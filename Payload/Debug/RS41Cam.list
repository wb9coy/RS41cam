
RS41Cam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd8  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072cc  080072cc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080072cc  080072cc  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072cc  080072cc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080072d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000009c  08007370  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08007370  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc1b  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408c  00000000  00000000  0003bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00041010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e56  00000000  00000000  000420f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001790e  00000000  00000000  00057f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074b85  00000000  00000000  0006f85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e43e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f24  00000000  00000000  000e4434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007190 	.word	0x08007190

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08007190 	.word	0x08007190

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	3a01      	subs	r2, #1
 8000b16:	bf28      	it	cs
 8000b18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b1c:	d2ed      	bcs.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_fmul>:
 8000c78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c80:	bf1e      	ittt	ne
 8000c82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c86:	ea92 0f0c 	teqne	r2, ip
 8000c8a:	ea93 0f0c 	teqne	r3, ip
 8000c8e:	d06f      	beq.n	8000d70 <__aeabi_fmul+0xf8>
 8000c90:	441a      	add	r2, r3
 8000c92:	ea80 0c01 	eor.w	ip, r0, r1
 8000c96:	0240      	lsls	r0, r0, #9
 8000c98:	bf18      	it	ne
 8000c9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c9e:	d01e      	beq.n	8000cde <__aeabi_fmul+0x66>
 8000ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ca4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ca8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cac:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cb8:	bf3e      	ittt	cc
 8000cba:	0049      	lslcc	r1, r1, #1
 8000cbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc0:	005b      	lslcc	r3, r3, #1
 8000cc2:	ea40 0001 	orr.w	r0, r0, r1
 8000cc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cca:	2afd      	cmp	r2, #253	; 0xfd
 8000ccc:	d81d      	bhi.n	8000d0a <__aeabi_fmul+0x92>
 8000cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	4770      	bx	lr
 8000cde:	f090 0f00 	teq	r0, #0
 8000ce2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ce6:	bf08      	it	eq
 8000ce8:	0249      	lsleq	r1, r1, #9
 8000cea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cf2:	3a7f      	subs	r2, #127	; 0x7f
 8000cf4:	bfc2      	ittt	gt
 8000cf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cfe:	4770      	bxgt	lr
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	dc5d      	bgt.n	8000dc8 <__aeabi_fmul+0x150>
 8000d0c:	f112 0f19 	cmn.w	r2, #25
 8000d10:	bfdc      	itt	le
 8000d12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d16:	4770      	bxle	lr
 8000d18:	f1c2 0200 	rsb	r2, r2, #0
 8000d1c:	0041      	lsls	r1, r0, #1
 8000d1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d22:	f1c2 0220 	rsb	r2, r2, #32
 8000d26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d2e:	f140 0000 	adc.w	r0, r0, #0
 8000d32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d36:	bf08      	it	eq
 8000d38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3c:	4770      	bx	lr
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d46:	bf02      	ittt	eq
 8000d48:	0040      	lsleq	r0, r0, #1
 8000d4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d4e:	3a01      	subeq	r2, #1
 8000d50:	d0f9      	beq.n	8000d46 <__aeabi_fmul+0xce>
 8000d52:	ea40 000c 	orr.w	r0, r0, ip
 8000d56:	f093 0f00 	teq	r3, #0
 8000d5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0049      	lsleq	r1, r1, #1
 8000d62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d66:	3b01      	subeq	r3, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xe6>
 8000d6a:	ea41 010c 	orr.w	r1, r1, ip
 8000d6e:	e78f      	b.n	8000c90 <__aeabi_fmul+0x18>
 8000d70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d74:	ea92 0f0c 	teq	r2, ip
 8000d78:	bf18      	it	ne
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d00a      	beq.n	8000d96 <__aeabi_fmul+0x11e>
 8000d80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d84:	bf18      	it	ne
 8000d86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	d1d8      	bne.n	8000d3e <__aeabi_fmul+0xc6>
 8000d8c:	ea80 0001 	eor.w	r0, r0, r1
 8000d90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	bf17      	itett	ne
 8000d9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da0:	4608      	moveq	r0, r1
 8000da2:	f091 0f00 	teqne	r1, #0
 8000da6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000daa:	d014      	beq.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d101      	bne.n	8000db6 <__aeabi_fmul+0x13e>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	d10f      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000db6:	ea93 0f0c 	teq	r3, ip
 8000dba:	d103      	bne.n	8000dc4 <__aeabi_fmul+0x14c>
 8000dbc:	024b      	lsls	r3, r1, #9
 8000dbe:	bf18      	it	ne
 8000dc0:	4608      	movne	r0, r1
 8000dc2:	d108      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bx	lr
 8000dd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fdiv>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d069      	beq.n	8000ecc <__aeabi_fdiv+0xec>
 8000df8:	eba2 0203 	sub.w	r2, r2, r3
 8000dfc:	ea80 0c01 	eor.w	ip, r0, r1
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e06:	d037      	beq.n	8000e78 <__aeabi_fdiv+0x98>
 8000e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	bf38      	it	cc
 8000e1c:	005b      	lslcc	r3, r3, #1
 8000e1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e26:	428b      	cmp	r3, r1
 8000e28:	bf24      	itt	cs
 8000e2a:	1a5b      	subcs	r3, r3, r1
 8000e2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e34:	bf24      	itt	cs
 8000e36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e42:	bf24      	itt	cs
 8000e44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	bf18      	it	ne
 8000e5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e62:	d1e0      	bne.n	8000e26 <__aeabi_fdiv+0x46>
 8000e64:	2afd      	cmp	r2, #253	; 0xfd
 8000e66:	f63f af50 	bhi.w	8000d0a <__aeabi_fmul+0x92>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e70:	bf08      	it	eq
 8000e72:	f020 0001 	biceq.w	r0, r0, #1
 8000e76:	4770      	bx	lr
 8000e78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e80:	327f      	adds	r2, #127	; 0x7f
 8000e82:	bfc2      	ittt	gt
 8000e84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8c:	4770      	bxgt	lr
 8000e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	3a01      	subs	r2, #1
 8000e98:	e737      	b.n	8000d0a <__aeabi_fmul+0x92>
 8000e9a:	f092 0f00 	teq	r2, #0
 8000e9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0040      	lsleq	r0, r0, #1
 8000ea6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eaa:	3a01      	subeq	r2, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fdiv+0xc2>
 8000eae:	ea40 000c 	orr.w	r0, r0, ip
 8000eb2:	f093 0f00 	teq	r3, #0
 8000eb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0049      	lsleq	r1, r1, #1
 8000ebe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ec2:	3b01      	subeq	r3, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xda>
 8000ec6:	ea41 010c 	orr.w	r1, r1, ip
 8000eca:	e795      	b.n	8000df8 <__aeabi_fdiv+0x18>
 8000ecc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed0:	ea92 0f0c 	teq	r2, ip
 8000ed4:	d108      	bne.n	8000ee8 <__aeabi_fdiv+0x108>
 8000ed6:	0242      	lsls	r2, r0, #9
 8000ed8:	f47f af7d 	bne.w	8000dd6 <__aeabi_fmul+0x15e>
 8000edc:	ea93 0f0c 	teq	r3, ip
 8000ee0:	f47f af70 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e776      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	d104      	bne.n	8000ef8 <__aeabi_fdiv+0x118>
 8000eee:	024b      	lsls	r3, r1, #9
 8000ef0:	f43f af4c 	beq.w	8000d8c <__aeabi_fmul+0x114>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e76e      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000efc:	bf18      	it	ne
 8000efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	d1ca      	bne.n	8000e9a <__aeabi_fdiv+0xba>
 8000f04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f08:	f47f af5c 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000f0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f10:	f47f af3c 	bne.w	8000d8c <__aeabi_fmul+0x114>
 8000f14:	e75f      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000f16:	bf00      	nop

08000f18 <__gesf2>:
 8000f18:	f04f 3cff 	mov.w	ip, #4294967295
 8000f1c:	e006      	b.n	8000f2c <__cmpsf2+0x4>
 8000f1e:	bf00      	nop

08000f20 <__lesf2>:
 8000f20:	f04f 0c01 	mov.w	ip, #1
 8000f24:	e002      	b.n	8000f2c <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__cmpsf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	bf18      	it	ne
 8000f3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f42:	d011      	beq.n	8000f68 <__cmpsf2+0x40>
 8000f44:	b001      	add	sp, #4
 8000f46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f4a:	bf18      	it	ne
 8000f4c:	ea90 0f01 	teqne	r0, r1
 8000f50:	bf58      	it	pl
 8000f52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f56:	bf88      	it	hi
 8000f58:	17c8      	asrhi	r0, r1, #31
 8000f5a:	bf38      	it	cc
 8000f5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f60:	bf18      	it	ne
 8000f62:	f040 0001 	orrne.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f6c:	d102      	bne.n	8000f74 <__cmpsf2+0x4c>
 8000f6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f72:	d105      	bne.n	8000f80 <__cmpsf2+0x58>
 8000f74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f78:	d1e4      	bne.n	8000f44 <__cmpsf2+0x1c>
 8000f7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f7e:	d0e1      	beq.n	8000f44 <__cmpsf2+0x1c>
 8000f80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__aeabi_cfrcmple>:
 8000f88:	4684      	mov	ip, r0
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4661      	mov	r1, ip
 8000f8e:	e7ff      	b.n	8000f90 <__aeabi_cfcmpeq>

08000f90 <__aeabi_cfcmpeq>:
 8000f90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f92:	f7ff ffc9 	bl	8000f28 <__cmpsf2>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	bf48      	it	mi
 8000f9a:	f110 0f00 	cmnmi.w	r0, #0
 8000f9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa0 <__aeabi_fcmpeq>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff fff4 	bl	8000f90 <__aeabi_cfcmpeq>
 8000fa8:	bf0c      	ite	eq
 8000faa:	2001      	moveq	r0, #1
 8000fac:	2000      	movne	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_fcmplt>:
 8000fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb8:	f7ff ffea 	bl	8000f90 <__aeabi_cfcmpeq>
 8000fbc:	bf34      	ite	cc
 8000fbe:	2001      	movcc	r0, #1
 8000fc0:	2000      	movcs	r0, #0
 8000fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_fcmple>:
 8000fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fcc:	f7ff ffe0 	bl	8000f90 <__aeabi_cfcmpeq>
 8000fd0:	bf94      	ite	ls
 8000fd2:	2001      	movls	r0, #1
 8000fd4:	2000      	movhi	r0, #0
 8000fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fda:	bf00      	nop

08000fdc <__aeabi_fcmpge>:
 8000fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe0:	f7ff ffd2 	bl	8000f88 <__aeabi_cfrcmple>
 8000fe4:	bf94      	ite	ls
 8000fe6:	2001      	movls	r0, #1
 8000fe8:	2000      	movhi	r0, #0
 8000fea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fee:	bf00      	nop

08000ff0 <__aeabi_fcmpgt>:
 8000ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff4:	f7ff ffc8 	bl	8000f88 <__aeabi_cfrcmple>
 8000ff8:	bf34      	ite	cc
 8000ffa:	2001      	movcc	r0, #1
 8000ffc:	2000      	movcs	r0, #0
 8000ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001002:	bf00      	nop

08001004 <__aeabi_f2uiz>:
 8001004:	0042      	lsls	r2, r0, #1
 8001006:	d20e      	bcs.n	8001026 <__aeabi_f2uiz+0x22>
 8001008:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800100c:	d30b      	bcc.n	8001026 <__aeabi_f2uiz+0x22>
 800100e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001012:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001016:	d409      	bmi.n	800102c <__aeabi_f2uiz+0x28>
 8001018:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800101c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001020:	fa23 f002 	lsr.w	r0, r3, r2
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr
 800102c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001030:	d101      	bne.n	8001036 <__aeabi_f2uiz+0x32>
 8001032:	0242      	lsls	r2, r0, #9
 8001034:	d102      	bne.n	800103c <__aeabi_f2uiz+0x38>
 8001036:	f04f 30ff 	mov.w	r0, #4294967295
 800103a:	4770      	bx	lr
 800103c:	f04f 0000 	mov.w	r0, #0
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	0000      	movs	r0, r0
	...

08001048 <processBattery>:
#include "radio.h"
#include "batt.h"
#include "config.h"

int processBattery(struct rscode_driver *rsDriver,ADC_HandleTypeDef* hadc)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b09b      	sub	sp, #108	; 0x6c
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t len = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	struct HABPacketBattInfoDataType HABPacketBattInfoData;

	//2032 = 3v
	//1785 = 2.7
	memset(&HABPacketBattInfoData, '\0', sizeof(HABPacketBattInfoData));
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	220f      	movs	r2, #15
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f006 f831 	bl	80070cc <memset>

	HAL_ADC_Start(hadc);
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f003 f87a 	bl	8004164 <HAL_ADC_Start>
	HAL_Status = HAL_ADC_PollForConversion(hadc,100);
 8001070:	2164      	movs	r1, #100	; 0x64
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f003 f916 	bl	80042a4 <HAL_ADC_PollForConversion>
 8001078:	4603      	mov	r3, r0
 800107a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if(HAL_Status == HAL_OK)
 800107e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001082:	2b00      	cmp	r3, #0
 8001084:	d14f      	bne.n	8001126 <processBattery+0xde>
	{
	  adcVal = HAL_ADC_GetValue(hadc);
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f003 fa12 	bl	80044b0 <HAL_ADC_GetValue>
 800108c:	65f8      	str	r0, [r7, #92]	; 0x5c
	  HAL_ADC_Stop(hadc);
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f003 f8dc 	bl	800424c <HAL_ADC_Stop>
	  adcValFloat = (float)adcVal / 4095 * 2 * 3.3 * 1.1;
 8001094:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001096:	f7ff fd97 	bl	8000bc8 <__aeabi_ui2f>
 800109a:	4603      	mov	r3, r0
 800109c:	4944      	ldr	r1, [pc, #272]	; (80011b0 <processBattery+0x168>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fe9e 	bl	8000de0 <__aeabi_fdiv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4619      	mov	r1, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fcdd 	bl	8000a68 <__addsf3>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa19 	bl	80004e8 <__aeabi_f2d>
 80010b6:	a33a      	add	r3, pc, #232	; (adr r3, 80011a0 <processBattery+0x158>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa6c 	bl	8000598 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a337      	add	r3, pc, #220	; (adr r3, 80011a8 <processBattery+0x160>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fa63 	bl	8000598 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fc6f 	bl	80009bc <__aeabi_d2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	65bb      	str	r3, [r7, #88]	; 0x58
	  adcValFloat = adcValFloat - ADC_BAT_CAL;
 80010e2:	4934      	ldr	r1, [pc, #208]	; (80011b4 <processBattery+0x16c>)
 80010e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010e6:	f7ff fcbd 	bl	8000a64 <__aeabi_fsub>
 80010ea:	4603      	mov	r3, r0
 80010ec:	65bb      	str	r3, [r7, #88]	; 0x58
	  HABPacketBattInfoData.battInfoData = round(adcValFloat*10)/10;
 80010ee:	4932      	ldr	r1, [pc, #200]	; (80011b8 <processBattery+0x170>)
 80010f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010f2:	f7ff fdc1 	bl	8000c78 <__aeabi_fmul>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f9f5 	bl	80004e8 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f005 fffb 	bl	8007100 <round>
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <processBattery+0x174>)
 8001110:	f7ff fb6c 	bl	80007ec <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fc4e 	bl	80009bc <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	f8c7 3009 	str.w	r3, [r7, #9]
	  //HABPacketBattInfoData.battInfoData = round(adcValTemp * 10000.0)/10000.0;
	}

	HABPacketBattInfoData.packetType  = BATT_INFO;
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	723b      	strb	r3, [r7, #8]
	len = sizeof(HABPacketBattInfoData)-sizeof(HABPacketBattInfoData.crc16)-NPAR;
 800112a:	2305      	movs	r3, #5
 800112c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	HABPacketBattInfoData.crc16 = crc_16((unsigned char *)&HABPacketBattInfoData,len);
 8001130:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fe8a 	bl	8001e54 <crc_16>
 8001140:	4603      	mov	r3, r0
 8001142:	f8a7 300d 	strh.w	r3, [r7, #13]
	rscode_encode(rsDriver, (unsigned char *)&HABPacketBattInfoData, sizeof(HABPacketBattInfoData)-NPAR, (unsigned char *)&HABPacketBattInfoData);
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	f107 0108 	add.w	r1, r7, #8
 800114e:	2207      	movs	r2, #7
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f001 f96f 	bl	8002434 <rscode_encode>
	memcpy(txBuf,&HABPacketBattInfoData,sizeof(HABPacketBattInfoData));
 8001156:	f107 0418 	add.w	r4, r7, #24
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001160:	c407      	stmia	r4!, {r0, r1, r2}
 8001162:	8023      	strh	r3, [r4, #0]
 8001164:	3402      	adds	r4, #2
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	7023      	strb	r3, [r4, #0]
	HAL_Delay(300);
 800116a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800116e:	f002 fefd 	bl	8003f6c <HAL_Delay>
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketBattInfoData));
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	210f      	movs	r1, #15
 8001178:	4618      	mov	r0, r3
 800117a:	f002 f9db 	bl	8003534 <radioTxData>
 800117e:	4603      	mov	r3, r0
 8001180:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if(HAL_Status != HAL_OK)
 8001184:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <processBattery+0x148>
	{
	status = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	  return status;
 8001190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8001192:	4618      	mov	r0, r3
 8001194:	376c      	adds	r7, #108	; 0x6c
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	66666666 	.word	0x66666666
 80011a4:	400a6666 	.word	0x400a6666
 80011a8:	9999999a 	.word	0x9999999a
 80011ac:	3ff19999 	.word	0x3ff19999
 80011b0:	457ff000 	.word	0x457ff000
 80011b4:	3ef5c28f 	.word	0x3ef5c28f
 80011b8:	41200000 	.word	0x41200000
 80011bc:	40240000 	.word	0x40240000

080011c0 <copy_poly>:
  int i;
  for (i = 0; i < MAXDEG; i++) dst[i] ^= src[i];
}

void copy_poly (__attribute__((unused)) struct rscode_driver * driver, int dst[], int src[]) 
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < MAXDEG; i++) dst[i] = src[i];
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e00c      	b.n	80011ec <copy_poly+0x2c>
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	441a      	add	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	440b      	add	r3, r1
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	ddef      	ble.n	80011d2 <copy_poly+0x12>
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <zero_poly>:
  for (i = 0; i < MAXDEG; i++) poly[i] = gmult(driver, k, poly[i]);
}


void zero_poly (__attribute__((unused)) struct rscode_driver * driver, int poly[]) 
{
 80011fe:	b480      	push	{r7}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < MAXDEG; i++) poly[i] = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	e008      	b.n	8001220 <zero_poly+0x22>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4413      	add	r3, r2
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	ddf3      	ble.n	800120e <zero_poly+0x10>
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <mult_polys>:
}

/* polynomial multiplication */
void
mult_polys (struct rscode_driver * driver, int dst[], int p1[], int p2[])
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b0a6      	sub	sp, #152	; 0x98
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	603b      	str	r3, [r7, #0]
  int i, j;
  int tmp1[MAXDEG*2];
  
  for (i=0; i < (MAXDEG*2); i++) dst[i] = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001246:	e00b      	b.n	8001260 <mult_polys+0x2e>
 8001248:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800125a:	3301      	adds	r3, #1
 800125c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001260:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001264:	2b1f      	cmp	r3, #31
 8001266:	ddef      	ble.n	8001248 <mult_polys+0x16>
  
  for (i = 0; i < MAXDEG; i++) {
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800126e:	e09c      	b.n	80013aa <mult_polys+0x178>
    for(j=MAXDEG; j<(MAXDEG*2); j++) tmp1[j]=0;
 8001270:	2310      	movs	r3, #16
 8001272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001276:	e00d      	b.n	8001294 <mult_polys+0x62>
 8001278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001282:	4413      	add	r3, r2
 8001284:	2200      	movs	r2, #0
 8001286:	f843 2c88 	str.w	r2, [r3, #-136]
 800128a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800128e:	3301      	adds	r3, #1
 8001290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001298:	2b1f      	cmp	r3, #31
 800129a:	dded      	ble.n	8001278 <mult_polys+0x46>
    
    /* scale tmp1 by p1[i] */
    for(j=0; j<MAXDEG; j++) tmp1[j]=gmult(driver, p2[j], p1[i]);
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012a2:	e01d      	b.n	80012e0 <mult_polys+0xae>
 80012a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	6819      	ldr	r1, [r3, #0]
 80012b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f001 f924 	bl	800250c <gmult>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012d0:	440b      	add	r3, r1
 80012d2:	f843 2c88 	str.w	r2, [r3, #-136]
 80012d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012da:	3301      	adds	r3, #1
 80012dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	dddd      	ble.n	80012a4 <mult_polys+0x72>
    /* and mult (shift) tmp1 right by i */
    for (j = (MAXDEG*2)-1; j >= i; j--) tmp1[j] = tmp1[j-i];
 80012e8:	231f      	movs	r3, #31
 80012ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012ee:	e017      	b.n	8001320 <mult_polys+0xee>
 80012f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001300:	4413      	add	r3, r2
 8001302:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8001306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001310:	440b      	add	r3, r1
 8001312:	f843 2c88 	str.w	r2, [r3, #-136]
 8001316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800131a:	3b01      	subs	r3, #1
 800131c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001320:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001328:	429a      	cmp	r2, r3
 800132a:	dae1      	bge.n	80012f0 <mult_polys+0xbe>
    for (j = 0; j < i; j++) tmp1[j] = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001332:	e00d      	b.n	8001350 <mult_polys+0x11e>
 8001334:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800133e:	4413      	add	r3, r2
 8001340:	2200      	movs	r2, #0
 8001342:	f843 2c88 	str.w	r2, [r3, #-136]
 8001346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800134a:	3301      	adds	r3, #1
 800134c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001350:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001358:	429a      	cmp	r2, r3
 800135a:	dbeb      	blt.n	8001334 <mult_polys+0x102>
    
    /* add into partial product */
    for(j=0; j < (MAXDEG*2); j++) dst[j] ^= tmp1[j];
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001362:	e019      	b.n	8001398 <mult_polys+0x166>
 8001364:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	6819      	ldr	r1, [r3, #0]
 8001370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800137a:	4413      	add	r3, r2
 800137c:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8001380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	68b8      	ldr	r0, [r7, #8]
 8001388:	4403      	add	r3, r0
 800138a:	404a      	eors	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800139c:	2b1f      	cmp	r3, #31
 800139e:	dde1      	ble.n	8001364 <mult_polys+0x132>
  for (i = 0; i < MAXDEG; i++) {
 80013a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013a4:	3301      	adds	r3, #1
 80013a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80013aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	f77f af5e 	ble.w	8001270 <mult_polys+0x3e>
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3798      	adds	r7, #152	; 0x98
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <processCallSign>:
#include "radio.h"
#include "cw.h"
#include "callSign.h"

int processCallSign(struct rscode_driver *rsDriver)
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b09a      	sub	sp, #104	; 0x68
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t len = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	uint8_t txBuf[MTU_SIZE];
	struct HABPacketCallSignDataType HABPacketCallSignData;

	memset(&HABPacketCallSignData, '\0', sizeof(HABPacketCallSignData));
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	2218      	movs	r2, #24
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fe76 	bl	80070cc <memset>
	HABPacketCallSignData.packetType      = CW_ID;
 80013e0:	2370      	movs	r3, #112	; 0x70
 80013e2:	723b      	strb	r3, [r7, #8]
	HABPacketCallSignData.callSignDataLen = strlen(CALL_SIGN);
 80013e4:	2309      	movs	r3, #9
 80013e6:	727b      	strb	r3, [r7, #9]
	memcpy(HABPacketCallSignData.callSignData,CALL_SIGN,HABPacketCallSignData.callSignDataLen);
 80013e8:	7a7b      	ldrb	r3, [r7, #9]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	3302      	adds	r3, #2
 80013f2:	4932      	ldr	r1, [pc, #200]	; (80014bc <processCallSign+0xfc>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fe5b 	bl	80070b0 <memcpy>
	len = sizeof(HABPacketCallSignData)-sizeof(HABPacketCallSignData.crc16)-NPAR;
 80013fa:	230e      	movs	r3, #14
 80013fc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	HABPacketCallSignData.crc16 = crc_16((unsigned char *)&HABPacketCallSignData,len);
 8001400:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fd22 	bl	8001e54 <crc_16>
 8001410:	4603      	mov	r3, r0
 8001412:	82fb      	strh	r3, [r7, #22]
	rscode_encode(rsDriver, (unsigned char *)&HABPacketCallSignData, sizeof(HABPacketCallSignData)-NPAR, (unsigned char *)&HABPacketCallSignData);
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	f107 0108 	add.w	r1, r7, #8
 800141c:	2210      	movs	r2, #16
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f001 f808 	bl	8002434 <rscode_encode>
	memcpy(txBuf,&HABPacketCallSignData,sizeof(HABPacketCallSignData));
 8001424:	f107 0420 	add.w	r4, r7, #32
 8001428:	f107 0508 	add.w	r5, r7, #8
 800142c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001430:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001434:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_Delay(300);
 8001438:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800143c:	f002 fd96 	bl	8003f6c <HAL_Delay>
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketCallSignData));
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	2118      	movs	r1, #24
 8001446:	4618      	mov	r0, r3
 8001448:	f002 f874 	bl	8003534 <radioTxData>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if(HAL_Status != HAL_OK)
 8001452:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <processCallSign+0x9e>
	{
	  status = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	667b      	str	r3, [r7, #100]	; 0x64
	}
	HAL_Status = setCW();
 800145e:	f001 feed 	bl	800323c <setCW>
 8001462:	4603      	mov	r3, r0
 8001464:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if(HAL_Status != HAL_OK)
 8001468:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <processCallSign+0xb4>
	{
	  status = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	667b      	str	r3, [r7, #100]	; 0x64
	}
	sendCallCW(CALL_SIGN,strlen(CALL_SIGN));
 8001474:	2109      	movs	r1, #9
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <processCallSign+0xfc>)
 8001478:	f000 ffac 	bl	80023d4 <sendCallCW>
	HAL_Delay(300);
 800147c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001480:	f002 fd74 	bl	8003f6c <HAL_Delay>
	HAL_Status = setPreamble();
 8001484:	f001 fef6 	bl	8003274 <setPreamble>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if(HAL_Status != HAL_OK)
 800148e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <processCallSign+0xda>
	{
	  status = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	667b      	str	r3, [r7, #100]	; 0x64
	}
	HAL_Status = setGFSK();
 800149a:	f001 fedd 	bl	8003258 <setGFSK>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if(HAL_Status != HAL_OK)
 80014a4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <processCallSign+0xf0>
	{
	  status = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	667b      	str	r3, [r7, #100]	; 0x64
	}
	return status;
 80014b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3768      	adds	r7, #104	; 0x68
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	080071a8 	.word	0x080071a8

080014c0 <resetCam>:
 0x00,//xh
 0x00 //xl
};

CAM_StatusTypeDef resetCam(UART_HandleTypeDef *huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	CAM_StatusTypeDef camStatus  = CAM_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t resetCmd[] = { 0x56, 0x00, 0x26, 0x00 };
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <resetCam+0x9c>)
 80014d0:	61bb      	str	r3, [r7, #24]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x26, 0x00 };
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <resetCam+0xa0>)
 80014d4:	617b      	str	r3, [r7, #20]
	uint8_t rspBuf[4];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,resetCmd,sizeof(resetCmd),1000);
 80014d6:	f107 0118 	add.w	r1, r7, #24
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	2204      	movs	r2, #4
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f005 fb0a 	bl	8006afa <HAL_UART_Transmit>
 80014e6:	4603      	mov	r3, r0
 80014e8:	77fb      	strb	r3, [r7, #31]
	if(HAL_Status != HAL_OK)
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <resetCam+0x38>
	{
		camStatus = CAM_FAIL;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014f6:	e02b      	b.n	8001550 <resetCam+0x90>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 80014f8:	f107 030e 	add.w	r3, r7, #14
 80014fc:	f107 0110 	add.w	r1, r7, #16
 8001500:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001504:	9200      	str	r2, [sp, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f005 fb88 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 800150e:	4603      	mov	r3, r0
 8001510:	77fb      	strb	r3, [r7, #31]
	  if(received != sizeof(rspBuf))
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d003      	beq.n	8001520 <resetCam+0x60>
	  {
		  camStatus = CAM_FAIL;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800151e:	e017      	b.n	8001550 <resetCam+0x90>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	e011      	b.n	800154a <resetCam+0x8a>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 8001526:	f107 0210 	add.w	r2, r7, #16
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	4413      	add	r3, r2
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	f107 0114 	add.w	r1, r7, #20
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	440b      	add	r3, r1
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d002      	beq.n	8001544 <resetCam+0x84>
			  {
				  camStatus = CAM_FAIL;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  for(int i=0;i<sizeof(rspBuf);i++)
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	3301      	adds	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d9ea      	bls.n	8001526 <resetCam+0x66>
			  }
		  }
	  }
	}

  return camStatus;
 8001550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001554:	4618      	mov	r0, r3
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	00260056 	.word	0x00260056
 8001560:	00260076 	.word	0x00260076

08001564 <stopTakingPicture>:

  return camStatus;
}

CAM_StatusTypeDef stopTakingPicture(UART_HandleTypeDef *huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af02      	add	r7, sp, #8
 800156a:	6078      	str	r0, [r7, #4]

	CAM_StatusTypeDef camStatus  = CAM_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_StatusTypeDef HAL_Status;

	uint8_t stopTakingPictureCmd[] = { 0x56, 0x00, 0x36, 0x01, 0x03 };
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <stopTakingPicture+0xc0>)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157c:	6018      	str	r0, [r3, #0]
 800157e:	3304      	adds	r3, #4
 8001580:	7019      	strb	r1, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x36, 0x00, 0x00 };
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <stopTakingPicture+0xc4>)
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158c:	6018      	str	r0, [r3, #0]
 800158e:	3304      	adds	r3, #4
 8001590:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	totReveived     = 0;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <stopTakingPicture+0xc8>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

	HAL_Status = HAL_UART_Transmit(huart,stopTakingPictureCmd,sizeof(stopTakingPictureCmd),1000);
 8001598:	f107 0120 	add.w	r1, r7, #32
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	2205      	movs	r2, #5
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f005 faa9 	bl	8006afa <HAL_UART_Transmit>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 80015ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <stopTakingPicture+0x5a>
	{
		camStatus = CAM_FAIL;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80015bc:	e02c      	b.n	8001618 <stopTakingPicture+0xb4>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 80015be:	f107 030e 	add.w	r3, r7, #14
 80015c2:	f107 0110 	add.w	r1, r7, #16
 80015c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	2205      	movs	r2, #5
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f005 fb25 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d003      	beq.n	80015e8 <stopTakingPicture+0x84>
	  {
		camStatus = CAM_FAIL;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80015e6:	e017      	b.n	8001618 <stopTakingPicture+0xb4>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ec:	e011      	b.n	8001612 <stopTakingPicture+0xae>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 80015ee:	f107 0210 	add.w	r2, r7, #16
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	4413      	add	r3, r2
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	f107 0118 	add.w	r1, r7, #24
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	440b      	add	r3, r1
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d002      	beq.n	800160c <stopTakingPicture+0xa8>
			  {
				camStatus = CAM_FAIL;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	3301      	adds	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	2b04      	cmp	r3, #4
 8001616:	d9ea      	bls.n	80015ee <stopTakingPicture+0x8a>
			  }
		  }
	  }
	}

  return camStatus;
 8001618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800161c:	4618      	mov	r0, r3
 800161e:	3730      	adds	r7, #48	; 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	080071c4 	.word	0x080071c4
 8001628:	080071bc 	.word	0x080071bc
 800162c:	200000b8 	.word	0x200000b8

08001630 <setPhotoSize>:

CAM_StatusTypeDef setPhotoSize(UART_HandleTypeDef *huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af02      	add	r7, sp, #8
 8001636:	6078      	str	r0, [r7, #4]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint8_t setPhotoSizeCmd[] = { 0x56, 0x00, 0x31, 0x05, 0x04, 0x01, 0x00, 0x19, 0x00 };
 800163e:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <setPhotoSize+0xb8>)
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	ca07      	ldmia	r2, {r0, r1, r2}
 8001646:	c303      	stmia	r3!, {r0, r1}
 8001648:	701a      	strb	r2, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x31, 0x00, 0x00 };
 800164a:	4a28      	ldr	r2, [pc, #160]	; (80016ec <setPhotoSize+0xbc>)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001654:	6018      	str	r0, [r3, #0]
 8001656:	3304      	adds	r3, #4
 8001658:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,setPhotoSizeCmd,sizeof(setPhotoSizeCmd),1000);
 800165a:	f107 011c 	add.w	r1, r7, #28
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	2209      	movs	r2, #9
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f005 fa48 	bl	8006afa <HAL_UART_Transmit>
 800166a:	4603      	mov	r3, r0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 8001670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <setPhotoSize+0x50>
	{
		camStatus = CAM_FAIL;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800167e:	e02c      	b.n	80016da <setPhotoSize+0xaa>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 8001680:	f107 030a 	add.w	r3, r7, #10
 8001684:	f107 010c 	add.w	r1, r7, #12
 8001688:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800168c:	9200      	str	r2, [sp, #0]
 800168e:	2205      	movs	r2, #5
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f005 fac4 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 800169c:	897b      	ldrh	r3, [r7, #10]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d003      	beq.n	80016aa <setPhotoSize+0x7a>
	  {
		camStatus = CAM_FAIL;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80016a8:	e017      	b.n	80016da <setPhotoSize+0xaa>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ae:	e011      	b.n	80016d4 <setPhotoSize+0xa4>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 80016b0:	f107 020c 	add.w	r2, r7, #12
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	4413      	add	r3, r2
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	f107 0114 	add.w	r1, r7, #20
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	440b      	add	r3, r1
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d002      	beq.n	80016ce <setPhotoSize+0x9e>
			  {
				camStatus = CAM_FAIL;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	3301      	adds	r3, #1
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d9ea      	bls.n	80016b0 <setPhotoSize+0x80>
			  }
		  }
	  }
	}

	return camStatus;
 80016da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3730      	adds	r7, #48	; 0x30
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	080071cc 	.word	0x080071cc
 80016ec:	080071d8 	.word	0x080071d8

080016f0 <setCompression>:


CAM_StatusTypeDef setCompression(UART_HandleTypeDef *huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	6078      	str	r0, [r7, #4]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint8_t setCompressionCmd[] = { 0x56, 0x00, 0x31, 0x05, 0x01, 0x01, 0x12, 0x04, 0x36 };
 80016fe:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <setCompression+0xb8>)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	ca07      	ldmia	r2, {r0, r1, r2}
 8001706:	c303      	stmia	r3!, {r0, r1}
 8001708:	701a      	strb	r2, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x31, 0x00, 0x00 };
 800170a:	4a28      	ldr	r2, [pc, #160]	; (80017ac <setCompression+0xbc>)
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001714:	6018      	str	r0, [r3, #0]
 8001716:	3304      	adds	r3, #4
 8001718:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,setCompressionCmd,sizeof(setCompressionCmd),1000);
 800171a:	f107 011c 	add.w	r1, r7, #28
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	2209      	movs	r2, #9
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f005 f9e8 	bl	8006afa <HAL_UART_Transmit>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 8001730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <setCompression+0x50>
	{
		camStatus = CAM_FAIL;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800173e:	e02c      	b.n	800179a <setCompression+0xaa>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 8001740:	f107 030a 	add.w	r3, r7, #10
 8001744:	f107 010c 	add.w	r1, r7, #12
 8001748:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	2205      	movs	r2, #5
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f005 fa64 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 8001756:	4603      	mov	r3, r0
 8001758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 800175c:	897b      	ldrh	r3, [r7, #10]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d003      	beq.n	800176a <setCompression+0x7a>
	  {
		camStatus = CAM_FAIL;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001768:	e017      	b.n	800179a <setCompression+0xaa>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
 800176e:	e011      	b.n	8001794 <setCompression+0xa4>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 8001770:	f107 020c 	add.w	r2, r7, #12
 8001774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001776:	4413      	add	r3, r2
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	f107 0114 	add.w	r1, r7, #20
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	440b      	add	r3, r1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d002      	beq.n	800178e <setCompression+0x9e>
			  {
				camStatus = CAM_FAIL;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	3301      	adds	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	2b04      	cmp	r3, #4
 8001798:	d9ea      	bls.n	8001770 <setCompression+0x80>
			  }
		  }
	  }
	}

	return camStatus;
 800179a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	080071e0 	.word	0x080071e0
 80017ac:	080071d8 	.word	0x080071d8

080017b0 <getLenOfPhoto>:

CAM_StatusTypeDef getLenOfPhoto(UART_HandleTypeDef *huart, uint16_t *len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b090      	sub	sp, #64	; 0x40
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_StatusTypeDef HAL_Status;

	uint16_t rtnLen;

	uint8_t getLenOfPhotoCmd[] = { 0x56, 0x00, 0x34, 0x01, 0x00};
 80017c0:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <getLenOfPhoto+0x100>)
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ca:	6018      	str	r0, [r3, #0]
 80017cc:	3304      	adds	r3, #4
 80017ce:	7019      	strb	r1, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x34, 0x00, 0x04, 0x00, 0x00};
 80017d0:	4a38      	ldr	r2, [pc, #224]	; (80018b4 <getLenOfPhoto+0x104>)
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017da:	6018      	str	r0, [r3, #0]
 80017dc:	3304      	adds	r3, #4
 80017de:	8019      	strh	r1, [r3, #0]
 80017e0:	3302      	adds	r3, #2
 80017e2:	0c0a      	lsrs	r2, r1, #16
 80017e4:	701a      	strb	r2, [r3, #0]
	uint8_t rspBuf[9];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,getLenOfPhotoCmd,sizeof(getLenOfPhotoCmd),1000);
 80017e6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	2205      	movs	r2, #5
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f005 f982 	bl	8006afa <HAL_UART_Transmit>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(HAL_Status != HAL_OK)
 80017fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <getLenOfPhoto+0x5c>
	{
		camStatus = CAM_FAIL;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800180a:	e04a      	b.n	80018a2 <getLenOfPhoto+0xf2>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 800180c:	f107 030e 	add.w	r3, r7, #14
 8001810:	f107 0110 	add.w	r1, r7, #16
 8001814:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001818:	9200      	str	r2, [sp, #0]
 800181a:	2209      	movs	r2, #9
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f005 f9fe 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if(received != sizeof(rspBuf))
 8001828:	89fb      	ldrh	r3, [r7, #14]
 800182a:	2b09      	cmp	r3, #9
 800182c:	d003      	beq.n	8001836 <getLenOfPhoto+0x86>
	  {
		 camStatus = CAM_FAIL;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001834:	e035      	b.n	80018a2 <getLenOfPhoto+0xf2>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf)-2;i++)
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
 800183a:	e011      	b.n	8001860 <getLenOfPhoto+0xb0>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 800183c:	f107 0210 	add.w	r2, r7, #16
 8001840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001842:	4413      	add	r3, r2
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	f107 011c 	add.w	r1, r7, #28
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	440b      	add	r3, r1
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d002      	beq.n	800185a <getLenOfPhoto+0xaa>
			  {
				 camStatus = CAM_FAIL;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  for(int i=0;i<sizeof(rspBuf)-2;i++)
 800185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185c:	3301      	adds	r3, #1
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
 8001860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001862:	2b06      	cmp	r3, #6
 8001864:	d9ea      	bls.n	800183c <getLenOfPhoto+0x8c>
			  }
		  }

		  if(camStatus == CAM_OK)
 8001866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800186a:	2b00      	cmp	r3, #0
 800186c:	d119      	bne.n	80018a2 <getLenOfPhoto+0xf2>
		  {
			  rtnLen = (uint16_t)(rspBuf[sizeof(rspBuf)-2] << 8 | rspBuf[sizeof(rspBuf)-1]);
 800186e:	7dfb      	ldrb	r3, [r7, #23]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b21a      	sxth	r2, r3
 8001874:	7e3b      	ldrb	r3, [r7, #24]
 8001876:	b21b      	sxth	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b21b      	sxth	r3, r3
 800187c:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  *len = rtnLen;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001882:	801a      	strh	r2, [r3, #0]
			  lenFromCam = rtnLen;
 8001884:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <getLenOfPhoto+0x108>)
 8001888:	6013      	str	r3, [r2, #0]
			  if( (rtnLen % IMG_BUF_DATA_SIZE) != 0 )
 800188a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	b29b      	uxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <getLenOfPhoto+0xf2>
			  {
				  camStatus = CAM_FAIL;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					HAL_Delay(100);
 800189c:	2064      	movs	r0, #100	; 0x64
 800189e:	f002 fb65 	bl	8003f6c <HAL_Delay>
			  }
		  }
	  }
	}

	return camStatus;
 80018a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3738      	adds	r7, #56	; 0x38
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	080071ec 	.word	0x080071ec
 80018b4:	080071f4 	.word	0x080071f4
 80018b8:	200000bc 	.word	0x200000bc

080018bc <takePhoto>:

CAM_StatusTypeDef takePhoto(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	6078      	str	r0, [r7, #4]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint8_t takePhotoCmd[] = { 0x56, 0x00, 0x36, 0x01, 0x00 };
 80018ca:	4a2b      	ldr	r2, [pc, #172]	; (8001978 <takePhoto+0xbc>)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d4:	6018      	str	r0, [r3, #0]
 80018d6:	3304      	adds	r3, #4
 80018d8:	7019      	strb	r1, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x36, 0x00, 0x00 };
 80018da:	4a28      	ldr	r2, [pc, #160]	; (800197c <takePhoto+0xc0>)
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e4:	6018      	str	r0, [r3, #0]
 80018e6:	3304      	adds	r3, #4
 80018e8:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,takePhotoCmd,sizeof(takePhotoCmd),1000);
 80018ea:	f107 0120 	add.w	r1, r7, #32
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	2205      	movs	r2, #5
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f005 f900 	bl	8006afa <HAL_UART_Transmit>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 8001900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <takePhoto+0x54>
	{
		camStatus = CAM_FAIL;
 8001908:	2301      	movs	r3, #1
 800190a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800190e:	e02c      	b.n	800196a <takePhoto+0xae>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 8001910:	f107 030e 	add.w	r3, r7, #14
 8001914:	f107 0110 	add.w	r1, r7, #16
 8001918:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800191c:	9200      	str	r2, [sp, #0]
 800191e:	2205      	movs	r2, #5
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f005 f97c 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 8001926:	4603      	mov	r3, r0
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d003      	beq.n	800193a <takePhoto+0x7e>
	  {
		  camStatus = CAM_FAIL;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001938:	e017      	b.n	800196a <takePhoto+0xae>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
 800193e:	e011      	b.n	8001964 <takePhoto+0xa8>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 8001940:	f107 0210 	add.w	r2, r7, #16
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	4413      	add	r3, r2
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	f107 0118 	add.w	r1, r7, #24
 800194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001950:	440b      	add	r3, r1
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d002      	beq.n	800195e <takePhoto+0xa2>
			  {
				  camStatus = CAM_FAIL;
 8001958:	2301      	movs	r3, #1
 800195a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	3301      	adds	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	2b04      	cmp	r3, #4
 8001968:	d9ea      	bls.n	8001940 <takePhoto+0x84>
			  }
		  }
	  }
	}

  return camStatus;
 800196a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800196e:	4618      	mov	r0, r3
 8001970:	3730      	adds	r7, #48	; 0x30
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	080071fc 	.word	0x080071fc
 800197c:	080071bc 	.word	0x080071bc

08001980 <readData>:

CAM_StatusTypeDef readData(UART_HandleTypeDef *huart, uint8_t camDataBuf[], uint16_t *len )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	CAM_StatusTypeDef status = CAM_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint16_t received;

	uint16_t k = CAM_DATA_LEN; // packet size
 8001992:	2320      	movs	r3, #32
 8001994:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t x = 0; //interval time xx xx * 0.01m[sec]
 8001996:	2300      	movs	r3, #0
 8001998:	843b      	strh	r3, [r7, #32]
	uint8_t adrMSB;
	uint8_t adrLSB;
	uint8_t intervalMSB;
	uint8_t intervalLSB;

	adrMSB = totReveived >> 8;
 800199a:	4b58      	ldr	r3, [pc, #352]	; (8001afc <readData+0x17c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	121b      	asrs	r3, r3, #8
 80019a0:	77fb      	strb	r3, [r7, #31]
	adrLSB = (uint8_t)totReveived;
 80019a2:	4b56      	ldr	r3, [pc, #344]	; (8001afc <readData+0x17c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	77bb      	strb	r3, [r7, #30]
	readDataCmd[8] = adrMSB;
 80019a8:	4a55      	ldr	r2, [pc, #340]	; (8001b00 <readData+0x180>)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	7213      	strb	r3, [r2, #8]
	readDataCmd[9] = adrLSB;
 80019ae:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <readData+0x180>)
 80019b0:	7fbb      	ldrb	r3, [r7, #30]
 80019b2:	7253      	strb	r3, [r2, #9]

	lenMSB = k >> 8;
 80019b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	777b      	strb	r3, [r7, #29]
	lenLSB = (uint8_t)k;
 80019bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019be:	773b      	strb	r3, [r7, #28]
	readDataCmd[12] = lenMSB;
 80019c0:	4a4f      	ldr	r2, [pc, #316]	; (8001b00 <readData+0x180>)
 80019c2:	7f7b      	ldrb	r3, [r7, #29]
 80019c4:	7313      	strb	r3, [r2, #12]
	readDataCmd[13] = lenLSB;
 80019c6:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <readData+0x180>)
 80019c8:	7f3b      	ldrb	r3, [r7, #28]
 80019ca:	7353      	strb	r3, [r2, #13]

	intervalMSB = x >> 8;
 80019cc:	8c3b      	ldrh	r3, [r7, #32]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	76fb      	strb	r3, [r7, #27]
	intervalLSB = (uint8_t)x;
 80019d4:	8c3b      	ldrh	r3, [r7, #32]
 80019d6:	76bb      	strb	r3, [r7, #26]
	readDataCmd[14] = intervalMSB;
 80019d8:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <readData+0x180>)
 80019da:	7efb      	ldrb	r3, [r7, #27]
 80019dc:	7393      	strb	r3, [r2, #14]
	readDataCmd[15] = intervalLSB;
 80019de:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <readData+0x180>)
 80019e0:	7ebb      	ldrb	r3, [r7, #26]
 80019e2:	73d3      	strb	r3, [r2, #15]

	status = CAM_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_Status = HAL_UART_Transmit(huart,readDataCmd,sizeof(readDataCmd),1000);
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	2210      	movs	r2, #16
 80019f0:	4943      	ldr	r1, [pc, #268]	; (8001b00 <readData+0x180>)
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f005 f881 	bl	8006afa <HAL_UART_Transmit>
 80019f8:	4603      	mov	r3, r0
 80019fa:	767b      	strb	r3, [r7, #25]
	if(HAL_Status != HAL_OK)
 80019fc:	7e7b      	ldrb	r3, [r7, #25]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <readData+0x8a>
	{
		status = CAM_FAIL;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a08:	e028      	b.n	8001a5c <readData+0xdc>
	}
	else
	{
		HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, header, sizeof(header), &received, 3000);
 8001a0a:	f107 0316 	add.w	r3, r7, #22
 8001a0e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	2205      	movs	r2, #5
 8001a16:	493b      	ldr	r1, [pc, #236]	; (8001b04 <readData+0x184>)
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f005 f900 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	767b      	strb	r3, [r7, #25]
		if(received != sizeof(header))
 8001a22:	8afb      	ldrh	r3, [r7, #22]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d003      	beq.n	8001a30 <readData+0xb0>
		{
			 status = CAM_FAIL;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a2e:	e015      	b.n	8001a5c <readData+0xdc>
		}
		else
		{
			for(int i=0;i<sizeof(header);i++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a34:	e00f      	b.n	8001a56 <readData+0xd6>
			{
				if(header[i] != headerRsp[i])
 8001a36:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <readData+0x184>)
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	4932      	ldr	r1, [pc, #200]	; (8001b08 <readData+0x188>)
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	440b      	add	r3, r1
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d002      	beq.n	8001a50 <readData+0xd0>
				{
					status = CAM_FAIL;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(int i=0;i<sizeof(header);i++)
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	3301      	adds	r3, #1
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d9ec      	bls.n	8001a36 <readData+0xb6>
				}
			}
		}
	}

	if(status == CAM_OK)
 8001a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d145      	bne.n	8001af0 <readData+0x170>
	{
		HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, camDataBuf, CAM_DATA_LEN, &received, 3000);
 8001a64:	f107 0316 	add.w	r3, r7, #22
 8001a68:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a6c:	9200      	str	r2, [sp, #0]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f005 f8d3 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	767b      	strb	r3, [r7, #25]
		if(received != CAM_DATA_LEN)
 8001a7c:	8afb      	ldrh	r3, [r7, #22]
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d003      	beq.n	8001a8a <readData+0x10a>
		{
		  status = CAM_FAIL;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a88:	e032      	b.n	8001af0 <readData+0x170>
		}
		else
		{
			*len = received;
 8001a8a:	8afa      	ldrh	r2, [r7, #22]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	801a      	strh	r2, [r3, #0]
			totReveived = totReveived + received;
 8001a90:	8afb      	ldrh	r3, [r7, #22]
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <readData+0x17c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <readData+0x17c>)
 8001a9c:	6013      	str	r3, [r2, #0]
			for(int i=0;i<received;i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	e013      	b.n	8001acc <readData+0x14c>
			{
				if((camDataBuf[i-1] == 0xff) && (camDataBuf[i-0] == 0xD9))
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d109      	bne.n	8001ac6 <readData+0x146>
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2bd9      	cmp	r3, #217	; 0xd9
 8001abc:	d103      	bne.n	8001ac6 <readData+0x146>
				{
					status = CAM_END;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 8001ac4:	e007      	b.n	8001ad6 <readData+0x156>
			for(int i=0;i<received;i++)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
 8001acc:	8afb      	ldrh	r3, [r7, #22]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	dbe6      	blt.n	8001aa4 <readData+0x124>
				}
			}
			if(status == CAM_END)
 8001ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d108      	bne.n	8001af0 <readData+0x170>
			{
				if(lenFromCam != totReveived)
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <readData+0x18c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <readData+0x17c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d002      	beq.n	8001af0 <readData+0x170>
				{
					status = CAM_FAIL;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
//				}
			}
		}
	}

	return status;
 8001af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200000b8 	.word	0x200000b8
 8001b00:	20000008 	.word	0x20000008
 8001b04:	200003e4 	.word	0x200003e4
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	200000bc 	.word	0x200000bc

08001b10 <processCAM>:

CAM_StatusTypeDef processCAM(UART_HandleTypeDef *huart,struct rscode_driver *rsDriver)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b09f      	sub	sp, #124	; 0x7c
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef HAL_Status;
	CAM_StatusTypeDef camStatus  = CAM_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	uint16_t imageLen     = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	uint16_t imageXferLen = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint16_t len          = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	static uint16_t  imageSeqnum = 0;

	uint8_t txBuf[MTU_SIZE];
	uint8_t camDataBuf[CAM_DATA_LEN];

	switch(CAM_State)
 8001b32:	4bc1      	ldr	r3, [pc, #772]	; (8001e38 <processCAM+0x328>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	f200 8177 	bhi.w	8001e2a <processCAM+0x31a>
 8001b3c:	a201      	add	r2, pc, #4	; (adr r2, 8001b44 <processCAM+0x34>)
 8001b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b42:	bf00      	nop
 8001b44:	08001b55 	.word	0x08001b55
 8001b48:	08001b85 	.word	0x08001b85
 8001b4c:	08001c9d 	.word	0x08001c9d
 8001b50:	08001d8d 	.word	0x08001d8d
	{
		case CAM_SETUP:
		{
			camStatus = setPhotoSize(huart);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fd6b 	bl	8001630 <setPhotoSize>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			camStatus = resetCam(huart);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fcad 	bl	80014c0 <resetCam>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			if(camStatus == CAM_OK)
 8001b6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <processCAM+0x6c>
			{
				CAM_State = CAM_TAKE_PIC;
 8001b74:	4bb0      	ldr	r3, [pc, #704]	; (8001e38 <processCAM+0x328>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				CAM_State = CAM_SETUP;
			}
			break;
 8001b7a:	e156      	b.n	8001e2a <processCAM+0x31a>
				CAM_State = CAM_SETUP;
 8001b7c:	4bae      	ldr	r3, [pc, #696]	; (8001e38 <processCAM+0x328>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			break;
 8001b82:	e152      	b.n	8001e2a <processCAM+0x31a>
		}
		case CAM_TAKE_PIC:
		{
			camStatus = stopTakingPicture(huart);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fced 	bl	8001564 <stopTakingPicture>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			HAL_Delay(500);
 8001b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b94:	f002 f9ea 	bl	8003f6c <HAL_Delay>
			camStatus =  setCompression(huart);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fda9 	bl	80016f0 <setCompression>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			if(camStatus == CAM_OK)
 8001ba4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 813b 	bne.w	8001e24 <processCAM+0x314>
			{
				camStatus = takePhoto(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fe84 	bl	80018bc <takePhoto>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if(camStatus == CAM_OK)
 8001bba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d168      	bne.n	8001c94 <processCAM+0x184>
				{
					camStatus = getLenOfPhoto(huart, &imageLen);
 8001bc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fdf1 	bl	80017b0 <getLenOfPhoto>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					if(camStatus == CAM_OK)
 8001bd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d157      	bne.n	8001c8c <processCAM+0x17c>
					{
						imageSeqnum = 0;
 8001bdc:	4b97      	ldr	r3, [pc, #604]	; (8001e3c <processCAM+0x32c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	801a      	strh	r2, [r3, #0]
						memset(&HABPacketImageStart,'\0',sizeof(HABPacketImageStart));
 8001be2:	2211      	movs	r2, #17
 8001be4:	2100      	movs	r1, #0
 8001be6:	4896      	ldr	r0, [pc, #600]	; (8001e40 <processCAM+0x330>)
 8001be8:	f005 fa70 	bl	80070cc <memset>
						HABPacketImageStart.packetType  = START_IMAGE;
 8001bec:	4b94      	ldr	r3, [pc, #592]	; (8001e40 <processCAM+0x330>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
						HABPacketImageStart.imageFileID = imageFileID;
 8001bf2:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <processCAM+0x334>)
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <processCAM+0x330>)
 8001bf8:	f8a3 2001 	strh.w	r2, [r3, #1]
						HABPacketImageStart.fileSize    = imageLen;
 8001bfc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <processCAM+0x330>)
 8001c04:	f8c3 2003 	str.w	r2, [r3, #3]
						len = sizeof(HABPacketImageStart)-sizeof(HABPacketImageStart.crc16)-NPAR;
 8001c08:	2307      	movs	r3, #7
 8001c0a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
						HABPacketImageStart.crc16 = crc_16((unsigned char *)&HABPacketImageStart,len);
 8001c0e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001c12:	4619      	mov	r1, r3
 8001c14:	488a      	ldr	r0, [pc, #552]	; (8001e40 <processCAM+0x330>)
 8001c16:	f000 f91d 	bl	8001e54 <crc_16>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <processCAM+0x330>)
 8001c20:	f8a3 2007 	strh.w	r2, [r3, #7]
						rscode_encode(rsDriver, (unsigned char *)&HABPacketImageStart, sizeof(HABPacketImageStart)-NPAR, (unsigned char *)&HABPacketImageStart);
 8001c24:	4b86      	ldr	r3, [pc, #536]	; (8001e40 <processCAM+0x330>)
 8001c26:	2209      	movs	r2, #9
 8001c28:	4985      	ldr	r1, [pc, #532]	; (8001e40 <processCAM+0x330>)
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f000 fc02 	bl	8002434 <rscode_encode>

						memset(&txBuf,'\0',sizeof(txBuf));
 8001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f005 fa47 	bl	80070cc <memset>
						memcpy(txBuf,&HABPacketImageStart,sizeof(HABPacketImageStart));
 8001c3e:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <processCAM+0x330>)
 8001c40:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001c44:	461d      	mov	r5, r3
 8001c46:	6828      	ldr	r0, [r5, #0]
 8001c48:	6869      	ldr	r1, [r5, #4]
 8001c4a:	68aa      	ldr	r2, [r5, #8]
 8001c4c:	68eb      	ldr	r3, [r5, #12]
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	7c2b      	ldrb	r3, [r5, #16]
 8001c52:	7023      	strb	r3, [r4, #0]
						HAL_Delay(300);
 8001c54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c58:	f002 f988 	bl	8003f6c <HAL_Delay>
						HAL_Status =  radioTxData(txBuf,sizeof(HABPacketImageStart));
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	2111      	movs	r1, #17
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fc66 	bl	8003534 <radioTxData>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
						if(HAL_Status != HAL_OK)
 8001c6e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <processCAM+0x16c>
						{
							CAM_State = CAM_SETUP;
 8001c76:	4b70      	ldr	r3, [pc, #448]	; (8001e38 <processCAM+0x328>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
						}
						HAL_Delay(300);
 8001c7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c80:	f002 f974 	bl	8003f6c <HAL_Delay>
						CAM_State = CAM_DATA_XFER;
 8001c84:	4b6c      	ldr	r3, [pc, #432]	; (8001e38 <processCAM+0x328>)
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
				else
				{
					CAM_State = CAM_TAKE_PIC;
				}
			}
			break;
 8001c8a:	e0cb      	b.n	8001e24 <processCAM+0x314>
						CAM_State = CAM_SETUP;
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <processCAM+0x328>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
			break;
 8001c92:	e0c7      	b.n	8001e24 <processCAM+0x314>
					CAM_State = CAM_TAKE_PIC;
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <processCAM+0x328>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
			break;
 8001c9a:	e0c3      	b.n	8001e24 <processCAM+0x314>
		}
		case CAM_DATA_XFER:
		{
			camStatus =  readData(huart, camDataBuf, &imageXferLen);
 8001c9c:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fe6a 	bl	8001980 <readData>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			switch(camStatus)
 8001cb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d05f      	beq.n	8001d7a <processCAM+0x26a>
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	f300 80b4 	bgt.w	8001e28 <processCAM+0x318>
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <processCAM+0x1ba>
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d05c      	beq.n	8001d82 <processCAM+0x272>
				{
					CAM_State = CAM_TAKE_PIC;
					break;
				}
			}
			break;
 8001cc8:	e0ae      	b.n	8001e28 <processCAM+0x318>
					HABPacketImageData.packetType = IMAGE_DATA;
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <processCAM+0x338>)
 8001ccc:	2202      	movs	r2, #2
 8001cce:	701a      	strb	r2, [r3, #0]
					HABPacketImageData.imageFileID = imageFileID;
 8001cd0:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <processCAM+0x334>)
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <processCAM+0x338>)
 8001cd6:	f8a3 2001 	strh.w	r2, [r3, #1]
					HABPacketImageData.imageSeqnum = imageSeqnum;
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <processCAM+0x32c>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <processCAM+0x338>)
 8001ce0:	f8a3 2003 	strh.w	r2, [r3, #3]
					HABPacketImageData.imageDataLen = imageXferLen;
 8001ce4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <processCAM+0x338>)
 8001cec:	715a      	strb	r2, [r3, #5]
					memcpy(&HABPacketImageData.imageData,&camDataBuf,HABPacketImageData.imageDataLen);
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <processCAM+0x338>)
 8001cf0:	795b      	ldrb	r3, [r3, #5]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4854      	ldr	r0, [pc, #336]	; (8001e4c <processCAM+0x33c>)
 8001cfc:	f005 f9d8 	bl	80070b0 <memcpy>
					len = sizeof(HABPacketImageData)-sizeof(HABPacketImageData.crc16);
 8001d00:	2326      	movs	r3, #38	; 0x26
 8001d02:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
					HABPacketImageData.crc16 = crc_16((unsigned char *)&HABPacketImageData,len);
 8001d06:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	484e      	ldr	r0, [pc, #312]	; (8001e48 <processCAM+0x338>)
 8001d0e:	f000 f8a1 	bl	8001e54 <crc_16>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <processCAM+0x338>)
 8001d18:	84da      	strh	r2, [r3, #38]	; 0x26
					memcpy(txBuf,&HABPacketImageData,sizeof(HABPacketImageData));
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <processCAM+0x338>)
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	f107 062c 	add.w	r6, r7, #44	; 0x2c
 8001d22:	f104 0c20 	add.w	ip, r4, #32
 8001d26:	4635      	mov	r5, r6
 8001d28:	4623      	mov	r3, r4
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d34:	3410      	adds	r4, #16
 8001d36:	3610      	adds	r6, #16
 8001d38:	4564      	cmp	r4, ip
 8001d3a:	d1f4      	bne.n	8001d26 <processCAM+0x216>
 8001d3c:	4633      	mov	r3, r6
 8001d3e:	4622      	mov	r2, r4
 8001d40:	6810      	ldr	r0, [r2, #0]
 8001d42:	6851      	ldr	r1, [r2, #4]
 8001d44:	c303      	stmia	r3!, {r0, r1}
					HAL_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f002 f910 	bl	8003f6c <HAL_Delay>
					HAL_Status =  radioTxData(txBuf,sizeof(HABPacketImageData));
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	2128      	movs	r1, #40	; 0x28
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fbee 	bl	8003534 <radioTxData>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
					if(HAL_Status != HAL_OK)
 8001d5e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <processCAM+0x25c>
						CAM_State = CAM_SETUP;
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <processCAM+0x328>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
					imageSeqnum = imageSeqnum + 1;
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <processCAM+0x32c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <processCAM+0x32c>)
 8001d76:	801a      	strh	r2, [r3, #0]
					break;
 8001d78:	e007      	b.n	8001d8a <processCAM+0x27a>
					CAM_State = CAM_END_XFER;
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <processCAM+0x328>)
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	701a      	strb	r2, [r3, #0]
					break;
 8001d80:	e003      	b.n	8001d8a <processCAM+0x27a>
					CAM_State = CAM_TAKE_PIC;
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <processCAM+0x328>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
					break;
 8001d88:	bf00      	nop
			break;
 8001d8a:	e04d      	b.n	8001e28 <processCAM+0x318>
		}
		case CAM_END_XFER:
		{

			HABPacketImageEnd.packetType    = END_IMAGE;
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <processCAM+0x340>)
 8001d8e:	2203      	movs	r2, #3
 8001d90:	701a      	strb	r2, [r3, #0]
			HABPacketImageEnd.imageFileID   = imageFileID;
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <processCAM+0x334>)
 8001d94:	881a      	ldrh	r2, [r3, #0]
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <processCAM+0x340>)
 8001d98:	f8a3 2001 	strh.w	r2, [r3, #1]
			len = sizeof(HABPacketImageEnd)-sizeof(HABPacketImageEnd.crc16)-NPAR;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			HABPacketImageEnd.crc16 = crc_16((unsigned char *)&HABPacketImageEnd,len);
 8001da2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001da6:	4619      	mov	r1, r3
 8001da8:	4829      	ldr	r0, [pc, #164]	; (8001e50 <processCAM+0x340>)
 8001daa:	f000 f853 	bl	8001e54 <crc_16>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <processCAM+0x340>)
 8001db4:	f8a3 2003 	strh.w	r2, [r3, #3]
			rscode_encode(rsDriver, (unsigned char *)&HABPacketImageEnd, sizeof(HABPacketImageEnd)-NPAR, (unsigned char *)&HABPacketImageEnd);
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <processCAM+0x340>)
 8001dba:	2205      	movs	r2, #5
 8001dbc:	4924      	ldr	r1, [pc, #144]	; (8001e50 <processCAM+0x340>)
 8001dbe:	6838      	ldr	r0, [r7, #0]
 8001dc0:	f000 fb38 	bl	8002434 <rscode_encode>
			memset(&txBuf,'\0',sizeof(txBuf));
 8001dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 f97d 	bl	80070cc <memset>
			memcpy(txBuf,&HABPacketImageEnd,sizeof(HABPacketImageEnd));
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <processCAM+0x340>)
 8001dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd8:	4614      	mov	r4, r2
 8001dda:	6820      	ldr	r0, [r4, #0]
 8001ddc:	6861      	ldr	r1, [r4, #4]
 8001dde:	68a2      	ldr	r2, [r4, #8]
 8001de0:	c307      	stmia	r3!, {r0, r1, r2}
 8001de2:	7b22      	ldrb	r2, [r4, #12]
 8001de4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(300);
 8001de6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dea:	f002 f8bf 	bl	8003f6c <HAL_Delay>
			HAL_Status =  radioTxData(txBuf,sizeof(HABPacketImageEnd));
 8001dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df2:	210d      	movs	r1, #13
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 fb9d 	bl	8003534 <radioTxData>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			if(HAL_Status == HAL_OK)
 8001e00:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <processCAM+0x30c>
			{
				CAM_State = CAM_TAKE_PIC;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <processCAM+0x328>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
				imageFileID = imageFileID +1;
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <processCAM+0x334>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <processCAM+0x334>)
 8001e18:	801a      	strh	r2, [r3, #0]
			}
			else
			{
				CAM_State = CAM_TAKE_PIC;
			}
			break;
 8001e1a:	e006      	b.n	8001e2a <processCAM+0x31a>
				CAM_State = CAM_TAKE_PIC;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <processCAM+0x328>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
			break;
 8001e22:	e002      	b.n	8001e2a <processCAM+0x31a>
			break;
 8001e24:	bf00      	nop
 8001e26:	e000      	b.n	8001e2a <processCAM+0x31a>
			break;
 8001e28:	bf00      	nop
		}
	}

	return camStatus;
 8001e2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
};
 8001e2e:	4618      	mov	r0, r3
 8001e30:	377c      	adds	r7, #124	; 0x7c
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200000c0 	.word	0x200000c0
 8001e3c:	200000c2 	.word	0x200000c2
 8001e40:	200003d0 	.word	0x200003d0
 8001e44:	200000c4 	.word	0x200000c4
 8001e48:	200003a8 	.word	0x200003a8
 8001e4c:	200003ae 	.word	0x200003ae
 8001e50:	20000390 	.word	0x20000390

08001e54 <crc_16>:
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 */

uint16_t crc_16(unsigned char *input_str, size_t num_bytes )
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <crc_16+0x68>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	f083 0301 	eor.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <crc_16+0x1c>
 8001e6c:	f000 f82a 	bl	8001ec4 <init_crc16_tab>

	crc = CRC_START_16;
 8001e70:	2300      	movs	r3, #0
 8001e72:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d018      	beq.n	8001eb0 <crc_16+0x5c>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e011      	b.n	8001ea8 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8001e84:	8afb      	ldrh	r3, [r7, #22]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	8af9      	ldrh	r1, [r7, #22]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1c58      	adds	r0, r3, #1
 8001e90:	6138      	str	r0, [r7, #16]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	404b      	eors	r3, r1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	4909      	ldr	r1, [pc, #36]	; (8001ec0 <crc_16+0x6c>)
 8001e9a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e9e:	4053      	eors	r3, r2
 8001ea0:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3e9      	bcc.n	8001e84 <crc_16+0x30>
	}

	return crc;
 8001eb0:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000c6 	.word	0x200000c6
 8001ec0:	200000c8 	.word	0x200000c8

08001ec4 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	80fb      	strh	r3, [r7, #6]
 8001ece:	e029      	b.n	8001f24 <init_crc16_tab+0x60>

		crc = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	807b      	strh	r3, [r7, #2]
		c   = i;
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	80bb      	strh	r3, [r7, #4]
 8001edc:	e017      	b.n	8001f0e <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	883b      	ldrh	r3, [r7, #0]
 8001ee2:	4053      	eors	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <init_crc16_tab+0x38>
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <init_crc16_tab+0x78>)
 8001ef6:	4053      	eors	r3, r2
 8001ef8:	807b      	strh	r3, [r7, #2]
 8001efa:	e002      	b.n	8001f02 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8001f02:	883b      	ldrh	r3, [r7, #0]
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8001f08:	88bb      	ldrh	r3, [r7, #4]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	80bb      	strh	r3, [r7, #4]
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	2b07      	cmp	r3, #7
 8001f12:	d9e4      	bls.n	8001ede <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <init_crc16_tab+0x7c>)
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	3301      	adds	r3, #1
 8001f22:	80fb      	strh	r3, [r7, #6]
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	2bff      	cmp	r3, #255	; 0xff
 8001f28:	d9d2      	bls.n	8001ed0 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <init_crc16_tab+0x80>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	ffffa001 	.word	0xffffa001
 8001f40:	200000c8 	.word	0x200000c8
 8001f44:	200000c6 	.word	0x200000c6

08001f48 <space>:
HAL_StatusTypeDef HAL_Status;
int spaceDelay  = 20;
uint8_t txBuf[] = {0};

void space()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
    HAL_Delay(spaceDelay);
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <space+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 f80b 	bl	8003f6c <HAL_Delay>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000018 	.word	0x20000018

08001f60 <characterSpace>:

void characterSpace()
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	HAL_Delay(spaceDelay*9);
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <characterSpace+0x18>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 fffc 	bl	8003f6c <HAL_Delay>
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000018 	.word	0x20000018

08001f7c <dit>:

void dit()
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	HAL_Status = radio_write_register(0x34, 0x60);
 8001f80:	2160      	movs	r1, #96	; 0x60
 8001f82:	2034      	movs	r0, #52	; 0x34
 8001f84:	f001 f9c4 	bl	8003310 <radio_write_register>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <dit+0x2c>)
 8001f8e:	701a      	strb	r2, [r3, #0]
	HAL_Status =  radioTxData(txBuf,sizeof(txBuf));
 8001f90:	2101      	movs	r1, #1
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <dit+0x30>)
 8001f94:	f001 face 	bl	8003534 <radioTxData>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <dit+0x2c>)
 8001f9e:	701a      	strb	r2, [r3, #0]
	space();
 8001fa0:	f7ff ffd2 	bl	8001f48 <space>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200003e9 	.word	0x200003e9
 8001fac:	200002c8 	.word	0x200002c8

08001fb0 <dah>:

void dah()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	HAL_Status = radio_write_register(0x34, 0xff);
 8001fb4:	21ff      	movs	r1, #255	; 0xff
 8001fb6:	2034      	movs	r0, #52	; 0x34
 8001fb8:	f001 f9aa 	bl	8003310 <radio_write_register>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <dah+0x2c>)
 8001fc2:	701a      	strb	r2, [r3, #0]
	HAL_Status =  radioTxData(txBuf,sizeof(txBuf));
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <dah+0x30>)
 8001fc8:	f001 fab4 	bl	8003534 <radioTxData>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <dah+0x2c>)
 8001fd2:	701a      	strb	r2, [r3, #0]
	space();
 8001fd4:	f7ff ffb8 	bl	8001f48 <space>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200003e9 	.word	0x200003e9
 8001fe0:	200002c8 	.word	0x200002c8

08001fe4 <sendCharacter>:

void sendCharacter(char c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	switch(c)
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	3b20      	subs	r3, #32
 8001ff2:	2b5a      	cmp	r3, #90	; 0x5a
 8001ff4:	f200 81e8 	bhi.w	80023c8 <sendCharacter+0x3e4>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <sendCharacter+0x1c>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	080023c3 	.word	0x080023c3
 8002004:	080023c9 	.word	0x080023c9
 8002008:	080023c9 	.word	0x080023c9
 800200c:	080023c9 	.word	0x080023c9
 8002010:	080023c9 	.word	0x080023c9
 8002014:	080023c9 	.word	0x080023c9
 8002018:	080023c9 	.word	0x080023c9
 800201c:	080023c9 	.word	0x080023c9
 8002020:	080023c9 	.word	0x080023c9
 8002024:	080023c9 	.word	0x080023c9
 8002028:	080023c9 	.word	0x080023c9
 800202c:	080023c9 	.word	0x080023c9
 8002030:	080023c9 	.word	0x080023c9
 8002034:	080023c9 	.word	0x080023c9
 8002038:	080023c9 	.word	0x080023c9
 800203c:	080023c9 	.word	0x080023c9
 8002040:	080023ad 	.word	0x080023ad
 8002044:	080022e7 	.word	0x080022e7
 8002048:	080022fd 	.word	0x080022fd
 800204c:	08002313 	.word	0x08002313
 8002050:	08002329 	.word	0x08002329
 8002054:	0800233f 	.word	0x0800233f
 8002058:	08002355 	.word	0x08002355
 800205c:	0800236b 	.word	0x0800236b
 8002060:	08002381 	.word	0x08002381
 8002064:	08002397 	.word	0x08002397
 8002068:	080023c9 	.word	0x080023c9
 800206c:	080023c9 	.word	0x080023c9
 8002070:	080023c9 	.word	0x080023c9
 8002074:	080023c9 	.word	0x080023c9
 8002078:	080023c9 	.word	0x080023c9
 800207c:	080023c9 	.word	0x080023c9
 8002080:	080023c9 	.word	0x080023c9
 8002084:	080023c9 	.word	0x080023c9
 8002088:	080023c9 	.word	0x080023c9
 800208c:	080023c9 	.word	0x080023c9
 8002090:	080023c9 	.word	0x080023c9
 8002094:	080023c9 	.word	0x080023c9
 8002098:	080023c9 	.word	0x080023c9
 800209c:	080023c9 	.word	0x080023c9
 80020a0:	080023c9 	.word	0x080023c9
 80020a4:	080023c9 	.word	0x080023c9
 80020a8:	080023c9 	.word	0x080023c9
 80020ac:	080023c9 	.word	0x080023c9
 80020b0:	080023c9 	.word	0x080023c9
 80020b4:	080023c9 	.word	0x080023c9
 80020b8:	080023c9 	.word	0x080023c9
 80020bc:	080023c9 	.word	0x080023c9
 80020c0:	080023c9 	.word	0x080023c9
 80020c4:	080023c9 	.word	0x080023c9
 80020c8:	080023c9 	.word	0x080023c9
 80020cc:	080023c9 	.word	0x080023c9
 80020d0:	080023c9 	.word	0x080023c9
 80020d4:	080023c9 	.word	0x080023c9
 80020d8:	080023c9 	.word	0x080023c9
 80020dc:	080023c9 	.word	0x080023c9
 80020e0:	080023c9 	.word	0x080023c9
 80020e4:	080023c9 	.word	0x080023c9
 80020e8:	080023c9 	.word	0x080023c9
 80020ec:	080023c9 	.word	0x080023c9
 80020f0:	080023c9 	.word	0x080023c9
 80020f4:	080023c9 	.word	0x080023c9
 80020f8:	080023c9 	.word	0x080023c9
 80020fc:	080023c9 	.word	0x080023c9
 8002100:	080023c9 	.word	0x080023c9
 8002104:	0800216d 	.word	0x0800216d
 8002108:	08002177 	.word	0x08002177
 800210c:	08002189 	.word	0x08002189
 8002110:	0800219b 	.word	0x0800219b
 8002114:	080021a9 	.word	0x080021a9
 8002118:	080021af 	.word	0x080021af
 800211c:	080021bf 	.word	0x080021bf
 8002120:	080021cd 	.word	0x080021cd
 8002124:	080021df 	.word	0x080021df
 8002128:	080021e9 	.word	0x080021e9
 800212c:	080021fb 	.word	0x080021fb
 8002130:	08002209 	.word	0x08002209
 8002134:	0800221b 	.word	0x0800221b
 8002138:	08002225 	.word	0x08002225
 800213c:	0800222f 	.word	0x0800222f
 8002140:	0800223d 	.word	0x0800223d
 8002144:	0800224f 	.word	0x0800224f
 8002148:	08002261 	.word	0x08002261
 800214c:	0800226f 	.word	0x0800226f
 8002150:	0800227d 	.word	0x0800227d
 8002154:	08002283 	.word	0x08002283
 8002158:	08002291 	.word	0x08002291
 800215c:	080022a3 	.word	0x080022a3
 8002160:	080022b1 	.word	0x080022b1
 8002164:	080022c3 	.word	0x080022c3
 8002168:	080022d5 	.word	0x080022d5
	{
		case 'a':
			dit();
 800216c:	f7ff ff06 	bl	8001f7c <dit>
			dah();
 8002170:	f7ff ff1e 	bl	8001fb0 <dah>
			break;
 8002174:	e128      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'b':
			dah();
 8002176:	f7ff ff1b 	bl	8001fb0 <dah>
			dit();
 800217a:	f7ff feff 	bl	8001f7c <dit>
			dit();
 800217e:	f7ff fefd 	bl	8001f7c <dit>
			dit();
 8002182:	f7ff fefb 	bl	8001f7c <dit>
			break;
 8002186:	e11f      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'c':
			dah();
 8002188:	f7ff ff12 	bl	8001fb0 <dah>
			dit();
 800218c:	f7ff fef6 	bl	8001f7c <dit>
			dah();
 8002190:	f7ff ff0e 	bl	8001fb0 <dah>
			dit();
 8002194:	f7ff fef2 	bl	8001f7c <dit>
			break;
 8002198:	e116      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'd':
			dah();
 800219a:	f7ff ff09 	bl	8001fb0 <dah>
			dit();
 800219e:	f7ff feed 	bl	8001f7c <dit>
			dit();
 80021a2:	f7ff feeb 	bl	8001f7c <dit>
			break;
 80021a6:	e10f      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'e':
			dit();
 80021a8:	f7ff fee8 	bl	8001f7c <dit>
			break;
 80021ac:	e10c      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'f':
			dit();
 80021ae:	f7ff fee5 	bl	8001f7c <dit>
			dit();
 80021b2:	f7ff fee3 	bl	8001f7c <dit>
			dah();
 80021b6:	f7ff fefb 	bl	8001fb0 <dah>
			dit();
 80021ba:	f7ff fedf 	bl	8001f7c <dit>
		case 'g':
			dah();
 80021be:	f7ff fef7 	bl	8001fb0 <dah>
			dah();
 80021c2:	f7ff fef5 	bl	8001fb0 <dah>
			dit();
 80021c6:	f7ff fed9 	bl	8001f7c <dit>
			break;
 80021ca:	e0fd      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'h':
			dit();
 80021cc:	f7ff fed6 	bl	8001f7c <dit>
			dit();
 80021d0:	f7ff fed4 	bl	8001f7c <dit>
			dit();
 80021d4:	f7ff fed2 	bl	8001f7c <dit>
			dit();
 80021d8:	f7ff fed0 	bl	8001f7c <dit>
			break;
 80021dc:	e0f4      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'i':
			dit();
 80021de:	f7ff fecd 	bl	8001f7c <dit>
			dit();
 80021e2:	f7ff fecb 	bl	8001f7c <dit>
			break;
 80021e6:	e0ef      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'j':
			dit();
 80021e8:	f7ff fec8 	bl	8001f7c <dit>
			dah();
 80021ec:	f7ff fee0 	bl	8001fb0 <dah>
			dah();
 80021f0:	f7ff fede 	bl	8001fb0 <dah>
			dah();
 80021f4:	f7ff fedc 	bl	8001fb0 <dah>
			break;
 80021f8:	e0e6      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'k':
			dah();
 80021fa:	f7ff fed9 	bl	8001fb0 <dah>
			dit();
 80021fe:	f7ff febd 	bl	8001f7c <dit>
			dah();
 8002202:	f7ff fed5 	bl	8001fb0 <dah>
			break;
 8002206:	e0df      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'l':
			dit();
 8002208:	f7ff feb8 	bl	8001f7c <dit>
			dah();
 800220c:	f7ff fed0 	bl	8001fb0 <dah>
			dit();
 8002210:	f7ff feb4 	bl	8001f7c <dit>
			dit();
 8002214:	f7ff feb2 	bl	8001f7c <dit>
			break;
 8002218:	e0d6      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'm':
			dah();
 800221a:	f7ff fec9 	bl	8001fb0 <dah>
			dah();
 800221e:	f7ff fec7 	bl	8001fb0 <dah>
			break;
 8002222:	e0d1      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'n':
			dah();
 8002224:	f7ff fec4 	bl	8001fb0 <dah>
			dit();
 8002228:	f7ff fea8 	bl	8001f7c <dit>
			break;
 800222c:	e0cc      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'o':
			dah();
 800222e:	f7ff febf 	bl	8001fb0 <dah>
			dah();
 8002232:	f7ff febd 	bl	8001fb0 <dah>
			dah();
 8002236:	f7ff febb 	bl	8001fb0 <dah>
			break;
 800223a:	e0c5      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'p':
			dit();
 800223c:	f7ff fe9e 	bl	8001f7c <dit>
			dah();
 8002240:	f7ff feb6 	bl	8001fb0 <dah>
			dah();
 8002244:	f7ff feb4 	bl	8001fb0 <dah>
			dit();
 8002248:	f7ff fe98 	bl	8001f7c <dit>
			break;
 800224c:	e0bc      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'q':
			dah();
 800224e:	f7ff feaf 	bl	8001fb0 <dah>
			dah();
 8002252:	f7ff fead 	bl	8001fb0 <dah>
			dit();
 8002256:	f7ff fe91 	bl	8001f7c <dit>
			dah();
 800225a:	f7ff fea9 	bl	8001fb0 <dah>
			break;
 800225e:	e0b3      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'r':
			dit();
 8002260:	f7ff fe8c 	bl	8001f7c <dit>
			dah();
 8002264:	f7ff fea4 	bl	8001fb0 <dah>
			dit();
 8002268:	f7ff fe88 	bl	8001f7c <dit>
			break;
 800226c:	e0ac      	b.n	80023c8 <sendCharacter+0x3e4>
		case 's':
			dit();
 800226e:	f7ff fe85 	bl	8001f7c <dit>
			dit();
 8002272:	f7ff fe83 	bl	8001f7c <dit>
			dit();
 8002276:	f7ff fe81 	bl	8001f7c <dit>
			break;
 800227a:	e0a5      	b.n	80023c8 <sendCharacter+0x3e4>
		case 't':
			dah();
 800227c:	f7ff fe98 	bl	8001fb0 <dah>
			break;
 8002280:	e0a2      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'u':
			dit();
 8002282:	f7ff fe7b 	bl	8001f7c <dit>
			dit();
 8002286:	f7ff fe79 	bl	8001f7c <dit>
			dah();
 800228a:	f7ff fe91 	bl	8001fb0 <dah>
			break;
 800228e:	e09b      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'v':
			dit();
 8002290:	f7ff fe74 	bl	8001f7c <dit>
			dit();
 8002294:	f7ff fe72 	bl	8001f7c <dit>
			dit();
 8002298:	f7ff fe70 	bl	8001f7c <dit>
			dah();
 800229c:	f7ff fe88 	bl	8001fb0 <dah>
			break;
 80022a0:	e092      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'w':
			dit();
 80022a2:	f7ff fe6b 	bl	8001f7c <dit>
			dah();
 80022a6:	f7ff fe83 	bl	8001fb0 <dah>
			dah();
 80022aa:	f7ff fe81 	bl	8001fb0 <dah>
			break;
 80022ae:	e08b      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'x':
			dah();
 80022b0:	f7ff fe7e 	bl	8001fb0 <dah>
			dit();
 80022b4:	f7ff fe62 	bl	8001f7c <dit>
			dit();
 80022b8:	f7ff fe60 	bl	8001f7c <dit>
			dah();
 80022bc:	f7ff fe78 	bl	8001fb0 <dah>
			break;
 80022c0:	e082      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'y':
			dah();
 80022c2:	f7ff fe75 	bl	8001fb0 <dah>
			dit();
 80022c6:	f7ff fe59 	bl	8001f7c <dit>
			dah();
 80022ca:	f7ff fe71 	bl	8001fb0 <dah>
			dah();
 80022ce:	f7ff fe6f 	bl	8001fb0 <dah>
			break;
 80022d2:	e079      	b.n	80023c8 <sendCharacter+0x3e4>
		case 'z':
			dah();
 80022d4:	f7ff fe6c 	bl	8001fb0 <dah>
			dah();
 80022d8:	f7ff fe6a 	bl	8001fb0 <dah>
			dit();
 80022dc:	f7ff fe4e 	bl	8001f7c <dit>
			dit();
 80022e0:	f7ff fe4c 	bl	8001f7c <dit>
			break;
 80022e4:	e070      	b.n	80023c8 <sendCharacter+0x3e4>
		case '1':
			dit();
 80022e6:	f7ff fe49 	bl	8001f7c <dit>
			dah();
 80022ea:	f7ff fe61 	bl	8001fb0 <dah>
			dah();
 80022ee:	f7ff fe5f 	bl	8001fb0 <dah>
			dah();
 80022f2:	f7ff fe5d 	bl	8001fb0 <dah>
			dah();
 80022f6:	f7ff fe5b 	bl	8001fb0 <dah>
			break;
 80022fa:	e065      	b.n	80023c8 <sendCharacter+0x3e4>
		case '2':
			dit();
 80022fc:	f7ff fe3e 	bl	8001f7c <dit>
			dit();
 8002300:	f7ff fe3c 	bl	8001f7c <dit>
			dah();
 8002304:	f7ff fe54 	bl	8001fb0 <dah>
			dah();
 8002308:	f7ff fe52 	bl	8001fb0 <dah>
			dah();
 800230c:	f7ff fe50 	bl	8001fb0 <dah>
			break;
 8002310:	e05a      	b.n	80023c8 <sendCharacter+0x3e4>
		case '3':
			dit();
 8002312:	f7ff fe33 	bl	8001f7c <dit>
			dit();
 8002316:	f7ff fe31 	bl	8001f7c <dit>
			dit();
 800231a:	f7ff fe2f 	bl	8001f7c <dit>
			dah();
 800231e:	f7ff fe47 	bl	8001fb0 <dah>
			dah();
 8002322:	f7ff fe45 	bl	8001fb0 <dah>

			break;
 8002326:	e04f      	b.n	80023c8 <sendCharacter+0x3e4>
		case '4':
			dit();
 8002328:	f7ff fe28 	bl	8001f7c <dit>
			dit();
 800232c:	f7ff fe26 	bl	8001f7c <dit>
			dit();
 8002330:	f7ff fe24 	bl	8001f7c <dit>
			dit();
 8002334:	f7ff fe22 	bl	8001f7c <dit>
			dah();
 8002338:	f7ff fe3a 	bl	8001fb0 <dah>
			break;
 800233c:	e044      	b.n	80023c8 <sendCharacter+0x3e4>
		case '5':
			dit();
 800233e:	f7ff fe1d 	bl	8001f7c <dit>
			dit();
 8002342:	f7ff fe1b 	bl	8001f7c <dit>
			dit();
 8002346:	f7ff fe19 	bl	8001f7c <dit>
			dit();
 800234a:	f7ff fe17 	bl	8001f7c <dit>
			dit();
 800234e:	f7ff fe15 	bl	8001f7c <dit>
			break;
 8002352:	e039      	b.n	80023c8 <sendCharacter+0x3e4>
		case '6':
			dah();
 8002354:	f7ff fe2c 	bl	8001fb0 <dah>
			dit();
 8002358:	f7ff fe10 	bl	8001f7c <dit>
			dit();
 800235c:	f7ff fe0e 	bl	8001f7c <dit>
			dit();
 8002360:	f7ff fe0c 	bl	8001f7c <dit>
			dit();
 8002364:	f7ff fe0a 	bl	8001f7c <dit>
			break;
 8002368:	e02e      	b.n	80023c8 <sendCharacter+0x3e4>
		case '7':
			dah();
 800236a:	f7ff fe21 	bl	8001fb0 <dah>
			dah();
 800236e:	f7ff fe1f 	bl	8001fb0 <dah>
			dit();
 8002372:	f7ff fe03 	bl	8001f7c <dit>
			dit();
 8002376:	f7ff fe01 	bl	8001f7c <dit>
			dit();
 800237a:	f7ff fdff 	bl	8001f7c <dit>
			break;
 800237e:	e023      	b.n	80023c8 <sendCharacter+0x3e4>
		case '8':
			dah();
 8002380:	f7ff fe16 	bl	8001fb0 <dah>
			dah();
 8002384:	f7ff fe14 	bl	8001fb0 <dah>
			dah();
 8002388:	f7ff fe12 	bl	8001fb0 <dah>
			dit();
 800238c:	f7ff fdf6 	bl	8001f7c <dit>
			dit();
 8002390:	f7ff fdf4 	bl	8001f7c <dit>
			break;
 8002394:	e018      	b.n	80023c8 <sendCharacter+0x3e4>
		case '9':
			dah();
 8002396:	f7ff fe0b 	bl	8001fb0 <dah>
			dah();
 800239a:	f7ff fe09 	bl	8001fb0 <dah>
			dah();
 800239e:	f7ff fe07 	bl	8001fb0 <dah>
			dah();
 80023a2:	f7ff fe05 	bl	8001fb0 <dah>
			dit();
 80023a6:	f7ff fde9 	bl	8001f7c <dit>
			break;
 80023aa:	e00d      	b.n	80023c8 <sendCharacter+0x3e4>
		case '0':
			dah();
 80023ac:	f7ff fe00 	bl	8001fb0 <dah>
			dah();
 80023b0:	f7ff fdfe 	bl	8001fb0 <dah>
			dah();
 80023b4:	f7ff fdfc 	bl	8001fb0 <dah>
			dah();
 80023b8:	f7ff fdfa 	bl	8001fb0 <dah>
			dah();
 80023bc:	f7ff fdf8 	bl	8001fb0 <dah>
			break;
 80023c0:	e002      	b.n	80023c8 <sendCharacter+0x3e4>
		case ' ':
			characterSpace();
 80023c2:	f7ff fdcd 	bl	8001f60 <characterSpace>
			break;
 80023c6:	bf00      	nop
	}

	characterSpace();
 80023c8:	f7ff fdca 	bl	8001f60 <characterSpace>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <sendCallCW>:

void sendCallCW(char * call, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	int i;;

	characterSpace();
 80023de:	f7ff fdbf 	bl	8001f60 <characterSpace>
	characterSpace();
 80023e2:	f7ff fdbd 	bl	8001f60 <characterSpace>

	for(i=0;i< len;i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e009      	b.n	8002400 <sendCallCW+0x2c>
		sendCharacter(call[i]);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fdf5 	bl	8001fe4 <sendCharacter>
	for(i=0;i< len;i++)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	3301      	adds	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	dbf1      	blt.n	80023ec <sendCallCW+0x18>
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <rscode_init>:
#include "ecc.h"
#include "rs.h"
#include "berlekamp.h"

void rscode_init(struct rscode_driver * driver)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  zero_fill_from ((unsigned char *)driver,0,sizeof(struct rscode_driver));
 800241a:	f640 1288 	movw	r2, #2440	; 0x988
 800241e:	2100      	movs	r1, #0
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f001 f8f1 	bl	8003608 <zero_fill_from>
  initialize_ecc (driver);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f001 f8e0 	bl	80035ec <initialize_ecc>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <rscode_encode>:

void rscode_encode(struct rscode_driver * driver, unsigned char *msg, int nbytes, unsigned char *dst)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  encode_data (driver, msg, nbytes,dst);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f001 f988 	bl	800375e <encode_data>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <gexp>:

#define PRIM_POLY 0435
#define NWM1 ((1 << 8)-1)

int gexp(__attribute__((unused)) struct rscode_driver * driver, int z)
{
 8002456:	b480      	push	{r7}
 8002458:	b08f      	sub	sp, #60	; 0x3c
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  int i;
  int pinit,p1,p2,p3,p4,p5,p6,p7,p8;
  int ret = 1;
 8002460:	2301      	movs	r3, #1
 8002462:	613b      	str	r3, [r7, #16]

  pinit = p2 = p3 = p4 = p5 = p6 = p7 = p8 = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	60fb      	str	r3, [r7, #12]
  p1 = 1;
 8002484:	2301      	movs	r3, #1
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(z!=0) {
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d038      	beq.n	8002500 <gexp+0xaa>
    for (i = 1; i <= z; i++) {
 800248e:	2301      	movs	r3, #1
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
 8002492:	e01a      	b.n	80024ca <gexp+0x74>
      pinit = p8;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	60fb      	str	r3, [r7, #12]
      p8 = p7;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	617b      	str	r3, [r7, #20]
      p7 = p6;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
      p6 = p5;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	61fb      	str	r3, [r7, #28]
      p5 = p4 ^ pinit;
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4053      	eors	r3, r2
 80024aa:	623b      	str	r3, [r7, #32]
      p4 = p3 ^ pinit;
 80024ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4053      	eors	r3, r2
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
      p3 = p2 ^ pinit;
 80024b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4053      	eors	r3, r2
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
      p2 = p1;
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
      p1 = pinit;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
    for (i = 1; i <= z; i++) {
 80024c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c6:	3301      	adds	r3, #1
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dde0      	ble.n	8002494 <gexp+0x3e>
    }
    ret = p1 + (p2<<1) + (p3<<2) + (p4<<3) + (p5<<4) + (p6<<5) + (p7<<6) + (p8<<7);
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	005a      	lsls	r2, r3, #1
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	441a      	add	r2, r3
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	441a      	add	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	441a      	add	r2, r3
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	441a      	add	r2, r3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	015b      	lsls	r3, r3, #5
 80024f0:	441a      	add	r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	441a      	add	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	01db      	lsls	r3, r3, #7
 80024fc:	4413      	add	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
  }
  return ret;
 8002500:	693b      	ldr	r3, [r7, #16]
}
 8002502:	4618      	mov	r0, r3
 8002504:	373c      	adds	r7, #60	; 0x3c
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <gmult>:

int gmult(__attribute__((unused)) struct rscode_driver * driver, int x, int y)
{
 800250c:	b480      	push	{r7}
 800250e:	b093      	sub	sp, #76	; 0x4c
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  int prod;
  int i, j, ind;
  int k;
  int scratch[8];
  int w;
  if (x==0 || y == 0) return (0);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <gmult+0x18>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <gmult+0x1c>
 8002524:	2300      	movs	r3, #0
 8002526:	e05c      	b.n	80025e2 <gmult+0xd6>
  w = 8;
 8002528:	2308      	movs	r3, #8
 800252a:	637b      	str	r3, [r7, #52]	; 0x34

  prod = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < w; i++) {
 8002530:	2300      	movs	r3, #0
 8002532:	643b      	str	r3, [r7, #64]	; 0x40
 8002534:	e021      	b.n	800257a <gmult+0x6e>
    scratch[i] = y;
 8002536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800253e:	4413      	add	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	f843 2c38 	str.w	r2, [r3, #-56]
    if (y & (1 << (w-1))) {
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	3b01      	subs	r3, #1
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	fa42 f303 	asr.w	r3, r2, r3
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <gmult+0x62>
      y = y << 1;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	607b      	str	r3, [r7, #4]
      y = (y ^ PRIM_POLY) & NWM1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f483 738e 	eor.w	r3, r3, #284	; 0x11c
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	e002      	b.n	8002574 <gmult+0x68>
    } else {
      y = y << 1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	607b      	str	r3, [r7, #4]
  for (i = 0; i < w; i++) {
 8002574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002576:	3301      	adds	r3, #1
 8002578:	643b      	str	r3, [r7, #64]	; 0x40
 800257a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	429a      	cmp	r2, r3
 8002580:	dbd9      	blt.n	8002536 <gmult+0x2a>
    }
  }
  for (i = 0; i < w; i++) {
 8002582:	2300      	movs	r3, #0
 8002584:	643b      	str	r3, [r7, #64]	; 0x40
 8002586:	e027      	b.n	80025d8 <gmult+0xcc>
    ind = (1 << i);
 8002588:	2201      	movs	r2, #1
 800258a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
    if (ind & x) {
 8002592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01a      	beq.n	80025d2 <gmult+0xc6>
      j = 1;
 800259c:	2301      	movs	r3, #1
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (k = 0; k < w; k++) {
 80025a0:	2300      	movs	r3, #0
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a4:	e011      	b.n	80025ca <gmult+0xbe>
        prod = prod ^ (j & scratch[i]);
 80025a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025ae:	4413      	add	r3, r2
 80025b0:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80025b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b6:	4013      	ands	r3, r2
 80025b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ba:	4053      	eors	r3, r2
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
        j = (j << 1);
 80025be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (k = 0; k < w; k++) {
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	3301      	adds	r3, #1
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbe9      	blt.n	80025a6 <gmult+0x9a>
  for (i = 0; i < w; i++) {
 80025d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d4:	3301      	adds	r3, #1
 80025d6:	643b      	str	r3, [r7, #64]	; 0x40
 80025d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	429a      	cmp	r2, r3
 80025de:	dbd3      	blt.n	8002588 <gmult+0x7c>
      }
    }
  }
  return prod;
 80025e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}	
 80025e2:	4618      	mov	r0, r3
 80025e4:	374c      	adds	r7, #76	; 0x4c
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <processGPS>:
#include "radio.h"
#include "gps.h"
#include "packetDefs.h"

GPS_StatusTypeDef processGPS(UART_HandleTypeDef *huart)
{
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80025f2:	af02      	add	r7, sp, #8
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	6018      	str	r0, [r3, #0]
	HAL_StatusTypeDef HAL_Status;
	GPS_StatusTypeDef gpsStatus  = GPS_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	uint16_t uartRxLen;
	int indx = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	static uint8_t GPGGASentence[GPS_UART_BUF_DATA_SIZE];
	static uint8_t GPRMCSentence[GPS_UART_BUF_DATA_SIZE];
	struct HABPacketGPSDataType HABPacketGPSData;


	HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, (uint8_t *)&gpsUARTBuf, UART_DATA_SIZE, &uartRxLen, 3000);
 8002604:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002608:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800260c:	1d38      	adds	r0, r7, #4
 800260e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002618:	6800      	ldr	r0, [r0, #0]
 800261a:	f004 fb00 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 800261e:	4603      	mov	r3, r0
 8002620:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
	HAL_Delay(100);
 8002624:	2064      	movs	r0, #100	; 0x64
 8002626:	f001 fca1 	bl	8003f6c <HAL_Delay>
	if(HAL_Status == HAL_OK)
 800262a:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
 800262e:	2b00      	cmp	r3, #0
 8002630:	d175      	bne.n	800271e <processGPS+0x132>
	{
	  for(int i=0;i<uartRxLen;i++)
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8002638:	e069      	b.n	800270e <processGPS+0x122>
	  {
		gpsSentence[indx] = gpsUARTBuf[i];
 800263a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800263e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002642:	4413      	add	r3, r2
 8002644:	7819      	ldrb	r1, [r3, #0]
 8002646:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800264a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800264e:	4413      	add	r3, r2
 8002650:	460a      	mov	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
		indx++;
 8002654:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002658:	3301      	adds	r3, #1
 800265a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		if( (gpsUARTBuf[i] == '\n') | (indx > GPS_UART_BUF_DATA_SIZE-1) )
 800265e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002662:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b0a      	cmp	r3, #10
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2da      	uxtb	r2, r3
 8002674:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002678:	2b4f      	cmp	r3, #79	; 0x4f
 800267a:	bfcc      	ite	gt
 800267c:	2301      	movgt	r3, #1
 800267e:	2300      	movle	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03c      	beq.n	8002704 <processGPS+0x118>
		{
		  if(gpsSentence[0] == '$')
 800268a:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800268e:	2b24      	cmp	r3, #36	; 0x24
 8002690:	d135      	bne.n	80026fe <processGPS+0x112>
		  {
			if(strncmp("GGA",(const char *)&gpsSentence[3],3) == 0)
 8002692:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002696:	3303      	adds	r3, #3
 8002698:	2203      	movs	r2, #3
 800269a:	4619      	mov	r1, r3
 800269c:	48b4      	ldr	r0, [pc, #720]	; (8002970 <processGPS+0x384>)
 800269e:	f004 fd1d 	bl	80070dc <strncmp>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10f      	bne.n	80026c8 <processGPS+0xdc>
			{
			  memset(GPGGASentence, '\0', GPS_UART_BUF_DATA_SIZE);
 80026a8:	2250      	movs	r2, #80	; 0x50
 80026aa:	2100      	movs	r1, #0
 80026ac:	48b1      	ldr	r0, [pc, #708]	; (8002974 <processGPS+0x388>)
 80026ae:	f004 fd0d 	bl	80070cc <memset>
			  memcpy(GPGGASentence,gpsSentence,indx);
 80026b2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80026b6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80026ba:	4619      	mov	r1, r3
 80026bc:	48ad      	ldr	r0, [pc, #692]	; (8002974 <processGPS+0x388>)
 80026be:	f004 fcf7 	bl	80070b0 <memcpy>
			  sendGGA = 1;
 80026c2:	4bad      	ldr	r3, [pc, #692]	; (8002978 <processGPS+0x38c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
				 //if(sscanf(&GPGGASentence, "GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%f", &time, &latitude, &ns, &longitude, &ew, &lock, &sats, &hdop, &alt, &unit, &geoid) >= 1)
			 }
			 if(strncmp("RMC",(const char *)&gpsSentence[3],3) == 0)
 80026c8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80026cc:	3303      	adds	r3, #3
 80026ce:	2203      	movs	r2, #3
 80026d0:	4619      	mov	r1, r3
 80026d2:	48aa      	ldr	r0, [pc, #680]	; (800297c <processGPS+0x390>)
 80026d4:	f004 fd02 	bl	80070dc <strncmp>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <processGPS+0x112>
			 {
				 memset(GPRMCSentence, '\0', GPS_UART_BUF_DATA_SIZE);
 80026de:	2250      	movs	r2, #80	; 0x50
 80026e0:	2100      	movs	r1, #0
 80026e2:	48a7      	ldr	r0, [pc, #668]	; (8002980 <processGPS+0x394>)
 80026e4:	f004 fcf2 	bl	80070cc <memset>
				 memcpy(GPRMCSentence,gpsSentence,indx);
 80026e8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80026ec:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80026f0:	4619      	mov	r1, r3
 80026f2:	48a3      	ldr	r0, [pc, #652]	; (8002980 <processGPS+0x394>)
 80026f4:	f004 fcdc 	bl	80070b0 <memcpy>
				 sendRMC = 1;
 80026f8:	4ba2      	ldr	r3, [pc, #648]	; (8002984 <processGPS+0x398>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
			 }
		 }
		 indx = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	  for(int i=0;i<uartRxLen;i++)
 8002704:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002708:	3301      	adds	r3, #1
 800270a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800270e:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8002712:	461a      	mov	r2, r3
 8002714:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002718:	4293      	cmp	r3, r2
 800271a:	db8e      	blt.n	800263a <processGPS+0x4e>
 800271c:	e002      	b.n	8002724 <processGPS+0x138>
		}
	  }
	}
	else
	{
	  HAL_Delay(1);
 800271e:	2001      	movs	r0, #1
 8002720:	f001 fc24 	bl	8003f6c <HAL_Delay>
	}

	if(sendGGA == 1 && sendRMC ==1)
 8002724:	4b94      	ldr	r3, [pc, #592]	; (8002978 <processGPS+0x38c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	f040 8119 	bne.w	8002960 <processGPS+0x374>
 800272e:	4b95      	ldr	r3, [pc, #596]	; (8002984 <processGPS+0x398>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	f040 8114 	bne.w	8002960 <processGPS+0x374>
	{
		rmcLen = strlen((const char *)GPRMCSentence);
 8002738:	4891      	ldr	r0, [pc, #580]	; (8002980 <processGPS+0x394>)
 800273a:	f7fd fd69 	bl	8000210 <strlen>
 800273e:	4603      	mov	r3, r0
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b91      	ldr	r3, [pc, #580]	; (8002988 <processGPS+0x39c>)
 8002744:	801a      	strh	r2, [r3, #0]
		ggaLen = strlen((const char *)GPGGASentence);
 8002746:	488b      	ldr	r0, [pc, #556]	; (8002974 <processGPS+0x388>)
 8002748:	f7fd fd62 	bl	8000210 <strlen>
 800274c:	4603      	mov	r3, r0
 800274e:	b29a      	uxth	r2, r3
 8002750:	4b8e      	ldr	r3, [pc, #568]	; (800298c <processGPS+0x3a0>)
 8002752:	801a      	strh	r2, [r3, #0]

		HABPacketGPSData.packetType = GPS_GGA_1;
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	2210      	movs	r2, #16
 800275a:	701a      	strb	r2, [r3, #0]
		if(ggaLen < GPS_BUF_DATA_SIZE)
 800275c:	4b8b      	ldr	r3, [pc, #556]	; (800298c <processGPS+0x3a0>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b3d      	cmp	r3, #61	; 0x3d
 8002762:	d806      	bhi.n	8002772 <processGPS+0x186>
		{
			HABPacketGPSData.gpsDataLen = ggaLen;
 8002764:	4b89      	ldr	r3, [pc, #548]	; (800298c <processGPS+0x3a0>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	f107 0308 	add.w	r3, r7, #8
 800276e:	705a      	strb	r2, [r3, #1]
 8002770:	e003      	b.n	800277a <processGPS+0x18e>
		}
		else
		{
			HABPacketGPSData.gpsDataLen = GPS_BUF_DATA_SIZE;
 8002772:	f107 0308 	add.w	r3, r7, #8
 8002776:	223e      	movs	r2, #62	; 0x3e
 8002778:	705a      	strb	r2, [r3, #1]
		}
		memcpy(HABPacketGPSData.gpsData,GPGGASentence,HABPacketGPSData.gpsDataLen);
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	461a      	mov	r2, r3
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	3302      	adds	r3, #2
 8002788:	497a      	ldr	r1, [pc, #488]	; (8002974 <processGPS+0x388>)
 800278a:	4618      	mov	r0, r3
 800278c:	f004 fc90 	bl	80070b0 <memcpy>
		memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 8002790:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_Delay(300);
 80027b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027b4:	f001 fbda 	bl	8003f6c <HAL_Delay>
		HAL_Status =  radioTxData(txBuf,MTU_SIZE);
 80027b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027bc:	2140      	movs	r1, #64	; 0x40
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 feb8 	bl	8003534 <radioTxData>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206

		memset(HABPacketGPSData.gpsData, '\0', GPS_BUF_DATA_SIZE);
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	3302      	adds	r3, #2
 80027d0:	223e      	movs	r2, #62	; 0x3e
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 fc79 	bl	80070cc <memset>
		if(ggaLen < GPS_BUF_DATA_SIZE)
 80027da:	4b6c      	ldr	r3, [pc, #432]	; (800298c <processGPS+0x3a0>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2b3d      	cmp	r3, #61	; 0x3d
 80027e0:	d804      	bhi.n	80027ec <processGPS+0x200>
		{
			HABPacketGPSData.gpsDataLen = 0;
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	2200      	movs	r2, #0
 80027e8:	705a      	strb	r2, [r3, #1]
 80027ea:	e012      	b.n	8002812 <processGPS+0x226>
		}
		else
		{
			HABPacketGPSData.gpsDataLen = ggaLen - GPS_BUF_DATA_SIZE;
 80027ec:	4b67      	ldr	r3, [pc, #412]	; (800298c <processGPS+0x3a0>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3b3e      	subs	r3, #62	; 0x3e
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	705a      	strb	r2, [r3, #1]
			memcpy(HABPacketGPSData.gpsData,&GPGGASentence[GPS_BUF_DATA_SIZE],HABPacketGPSData.gpsDataLen);
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	461a      	mov	r2, r3
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	3302      	adds	r3, #2
 800280a:	4961      	ldr	r1, [pc, #388]	; (8002990 <processGPS+0x3a4>)
 800280c:	4618      	mov	r0, r3
 800280e:	f004 fc4f 	bl	80070b0 <memcpy>
		}

		HABPacketGPSData.packetType = GPS_GGA_2;
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	2211      	movs	r2, #17
 8002818:	701a      	strb	r2, [r3, #0]
		memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 800281a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	4614      	mov	r4, r2
 8002824:	461d      	mov	r5, r3
 8002826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002832:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_Delay(300);
 800283a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800283e:	f001 fb95 	bl	8003f6c <HAL_Delay>
		HAL_Status =  radioTxData(txBuf,MTU_SIZE);
 8002842:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fe73 	bl	8003534 <radioTxData>
 800284e:	4603      	mov	r3, r0
 8002850:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
		///////////////////////////////////////////

		HABPacketGPSData.packetType = GPS_RMC_1;
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	2212      	movs	r2, #18
 800285a:	701a      	strb	r2, [r3, #0]
		if(rmcLen < GPS_BUF_DATA_SIZE)
 800285c:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <processGPS+0x39c>)
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	2b3d      	cmp	r3, #61	; 0x3d
 8002862:	d806      	bhi.n	8002872 <processGPS+0x286>
		{
			HABPacketGPSData.gpsDataLen = rmcLen;
 8002864:	4b48      	ldr	r3, [pc, #288]	; (8002988 <processGPS+0x39c>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	705a      	strb	r2, [r3, #1]
 8002870:	e003      	b.n	800287a <processGPS+0x28e>
		}
		else
		{
			HABPacketGPSData.gpsDataLen = GPS_BUF_DATA_SIZE;
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	223e      	movs	r2, #62	; 0x3e
 8002878:	705a      	strb	r2, [r3, #1]
		}
		memcpy(HABPacketGPSData.gpsData,GPRMCSentence,HABPacketGPSData.gpsDataLen);
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	461a      	mov	r2, r3
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	3302      	adds	r3, #2
 8002888:	493d      	ldr	r1, [pc, #244]	; (8002980 <processGPS+0x394>)
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fc10 	bl	80070b0 <memcpy>
		memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 8002890:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_Delay(300);
 80028b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028b4:	f001 fb5a 	bl	8003f6c <HAL_Delay>
		HAL_Status =  radioTxData(txBuf,MTU_SIZE);
 80028b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fe38 	bl	8003534 <radioTxData>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206

		memset(HABPacketGPSData.gpsData, '\0', GPS_BUF_DATA_SIZE);
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	3302      	adds	r3, #2
 80028d0:	223e      	movs	r2, #62	; 0x3e
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f004 fbf9 	bl	80070cc <memset>
		if(ggaLen < GPS_BUF_DATA_SIZE)
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <processGPS+0x3a0>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	2b3d      	cmp	r3, #61	; 0x3d
 80028e0:	d804      	bhi.n	80028ec <processGPS+0x300>
		{
			HABPacketGPSData.gpsDataLen = 0;
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	2200      	movs	r2, #0
 80028e8:	705a      	strb	r2, [r3, #1]
 80028ea:	e012      	b.n	8002912 <processGPS+0x326>
		}
		else
		{
			HABPacketGPSData.gpsDataLen = rmcLen - GPS_BUF_DATA_SIZE;
 80028ec:	4b26      	ldr	r3, [pc, #152]	; (8002988 <processGPS+0x39c>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3b3e      	subs	r3, #62	; 0x3e
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	705a      	strb	r2, [r3, #1]
			memcpy(HABPacketGPSData.gpsData,&GPRMCSentence[GPS_BUF_DATA_SIZE],HABPacketGPSData.gpsDataLen);
 80028fc:	f107 0308 	add.w	r3, r7, #8
 8002900:	785b      	ldrb	r3, [r3, #1]
 8002902:	461a      	mov	r2, r3
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	3302      	adds	r3, #2
 800290a:	4922      	ldr	r1, [pc, #136]	; (8002994 <processGPS+0x3a8>)
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fbcf 	bl	80070b0 <memcpy>
		}

		HABPacketGPSData.packetType = GPS_RMC_2;
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	2213      	movs	r2, #19
 8002918:	701a      	strb	r2, [r3, #0]
		memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 800291a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800291e:	f107 0308 	add.w	r3, r7, #8
 8002922:	4614      	mov	r4, r2
 8002924:	461d      	mov	r5, r3
 8002926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002932:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_Delay(300);
 800293a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800293e:	f001 fb15 	bl	8003f6c <HAL_Delay>
		HAL_Status =  radioTxData(txBuf,MTU_SIZE);
 8002942:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fdf3 	bl	8003534 <radioTxData>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206

		sendGGA 		= 0;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <processGPS+0x38c>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
		sendRMC 		= 0;
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <processGPS+0x398>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
	}

	return gpsStatus;
 8002960:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
}
 8002964:	4618      	mov	r0, r3
 8002966:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800296a:	46bd      	mov	sp, r7
 800296c:	bdb0      	pop	{r4, r5, r7, pc}
 800296e:	bf00      	nop
 8002970:	08007204 	.word	0x08007204
 8002974:	200002cc 	.word	0x200002cc
 8002978:	2000031c 	.word	0x2000031c
 800297c:	08007208 	.word	0x08007208
 8002980:	20000320 	.word	0x20000320
 8002984:	20000370 	.word	0x20000370
 8002988:	20000374 	.word	0x20000374
 800298c:	20000376 	.word	0x20000376
 8002990:	2000030a 	.word	0x2000030a
 8002994:	2000035e 	.word	0x2000035e

08002998 <processInfo>:
#include "packetDefs.h"
#include "info.h"
#include "stm32f1xx_hal.h"

int processInfo(struct rscode_driver *rsDriver)
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b0a0      	sub	sp, #128	; 0x80
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint16_t len = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint8_t txBuf[MTU_SIZE];
	struct HABPacketInfoDataType HABPacketInfoData;

	memset(&HABPacketInfoData, '\0', sizeof(HABPacketInfoData));
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	222c      	movs	r2, #44	; 0x2c
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 fb8a 	bl	80070cc <memset>
	HABPacketInfoData.packetType  = INFO_DATA;
 80029b8:	2360      	movs	r3, #96	; 0x60
 80029ba:	733b      	strb	r3, [r7, #12]
	HABPacketInfoData.infoDataLen = strlen(VERSION_INFO);
 80029bc:	2318      	movs	r3, #24
 80029be:	737b      	strb	r3, [r7, #13]
	memcpy(HABPacketInfoData.infoData,VERSION_INFO,HABPacketInfoData.infoDataLen);
 80029c0:	7b7b      	ldrb	r3, [r7, #13]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	3302      	adds	r3, #2
 80029ca:	491e      	ldr	r1, [pc, #120]	; (8002a44 <processInfo+0xac>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fb6f 	bl	80070b0 <memcpy>
	len = sizeof(HABPacketInfoData)-sizeof(HABPacketInfoData.crc16)-NPAR;
 80029d2:	2322      	movs	r3, #34	; 0x22
 80029d4:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	HABPacketInfoData.crc16 = crc_16((unsigned char *)&HABPacketInfoData,len);
 80029d8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fa36 	bl	8001e54 <crc_16>
 80029e8:	4603      	mov	r3, r0
 80029ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rscode_encode(rsDriver, (unsigned char *)&HABPacketInfoData, sizeof(HABPacketInfoData)-NPAR, (unsigned char *)&HABPacketInfoData);
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	f107 010c 	add.w	r1, r7, #12
 80029f4:	2224      	movs	r2, #36	; 0x24
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fd1c 	bl	8002434 <rscode_encode>
	memcpy(txBuf,&HABPacketInfoData,sizeof(HABPacketInfoData));
 80029fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002a00:	f107 050c 	add.w	r5, r7, #12
 8002a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_Delay(300);
 8002a14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a18:	f001 faa8 	bl	8003f6c <HAL_Delay>
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketInfoData));
 8002a1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fd86 	bl	8003534 <radioTxData>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	if(HAL_Status != HAL_OK)
 8002a2e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <processInfo+0xa2>
	{
	  status = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	return status;
 8002a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3780      	adds	r7, #128	; 0x80
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdb0      	pop	{r4, r5, r7, pc}
 8002a44:	0800720c 	.word	0x0800720c

08002a48 <processInternalTemp>:
#include "packetDefs.h"
#include "internalTemp.h"
#include "stm32f1xx_hal.h"

int processInternalTemp(struct rscode_driver *rsDriver)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b098      	sub	sp, #96	; 0x60
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint16_t len = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint8_t txBuf[MTU_SIZE];
	uint8_t adcInternalTemperatureVal;

	struct HABPacketIntTempInfoDataType HABPacketIntTempInfoData;

	memset(&HABPacketIntTempInfoData, '\0', sizeof(HABPacketIntTempInfoData));
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	220c      	movs	r2, #12
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fb32 	bl	80070cc <memset>

	// Set for Deg F
	HAL_Status = radio_write_register(0x12, ADC_TEMP_CAL_REG12);
 8002a68:	21e0      	movs	r1, #224	; 0xe0
 8002a6a:	2012      	movs	r0, #18
 8002a6c:	f000 fc50 	bl	8003310 <radio_write_register>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	HAL_Status = radio_write_register(0x13, ADC_TEMP_CAL_REG13);
 8002a76:	2100      	movs	r1, #0
 8002a78:	2013      	movs	r0, #19
 8002a7a:	f000 fc49 	bl	8003310 <radio_write_register>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Trigger ADC to capture.
	HAL_Status = radio_write_register(0x0f, 0x80);
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	200f      	movs	r0, #15
 8002a88:	f000 fc42 	bl	8003310 <radio_write_register>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	HAL_Delay(100);
 8002a92:	2064      	movs	r0, #100	; 0x64
 8002a94:	f001 fa6a 	bl	8003f6c <HAL_Delay>

	HAL_Status = radio_read_register(0x11, &adcInternalTemperatureVal);
 8002a98:	f107 0317 	add.w	r3, r7, #23
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	2011      	movs	r0, #17
 8002aa0:	f000 fbf6 	bl	8003290 <radio_read_register>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	if(HAL_Status == HAL_OK)
 8002aaa:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d12e      	bne.n	8002b10 <processInternalTemp+0xc8>
	{
	  // Convert ADC value to signed temperature value. Deg F
	  HABPacketIntTempInfoData.intTempInfoData = (uint8_t)-60 + (int16_t)adcInternalTemperatureVal;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	3b3c      	subs	r3, #60	; 0x3c
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	727b      	strb	r3, [r7, #9]
	  HABPacketIntTempInfoData.packetType  = INT_TEMP;
 8002aba:	2320      	movs	r3, #32
 8002abc:	723b      	strb	r3, [r7, #8]
	  len = sizeof(HABPacketIntTempInfoData)-sizeof(HABPacketIntTempInfoData.crc16)-NPAR;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  HABPacketIntTempInfoData.crc16 = crc_16((unsigned char *)&HABPacketIntTempInfoData,len);
 8002ac4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f9c0 	bl	8001e54 <crc_16>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	817b      	strh	r3, [r7, #10]
	  rscode_encode(rsDriver, (unsigned char *)&HABPacketIntTempInfoData, sizeof(HABPacketIntTempInfoData)-NPAR, (unsigned char *)&HABPacketIntTempInfoData);
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	f107 0108 	add.w	r1, r7, #8
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fca6 	bl	8002434 <rscode_encode>
	  memcpy(txBuf,&HABPacketIntTempInfoData,sizeof(HABPacketIntTempInfoData));
 8002ae8:	f107 0318 	add.w	r3, r7, #24
 8002aec:	f107 0208 	add.w	r2, r7, #8
 8002af0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002af2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_Delay(300);
 8002af6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002afa:	f001 fa37 	bl	8003f6c <HAL_Delay>
	  HAL_Status =  radioTxData(txBuf,sizeof(HABPacketIntTempInfoData));
 8002afe:	f107 0318 	add.w	r3, r7, #24
 8002b02:	210c      	movs	r1, #12
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fd15 	bl	8003534 <radioTxData>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	}

	return status;
 8002b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3760      	adds	r7, #96	; 0x60
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	f5ad 6d19 	sub.w	sp, sp, #2448	; 0x990
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_StatusTypeDef HAL_Status;

  GPS_StatusTypeDef gpsStatus  = GPS_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b2a:	f001 f9f6 	bl	8003f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b2e:	f000 f8a5 	bl	8002c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b32:	f000 fa11 	bl	8002f58 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002b36:	f000 f92f 	bl	8002d98 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002b3a:	f000 f9b9 	bl	8002eb0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002b3e:	f000 f9e1 	bl	8002f04 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002b42:	f000 f95f 	bl	8002e04 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002b46:	f000 f8e9 	bl	8002d1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  struct rscode_driver rsDriver;

  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_SET);
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	4841      	ldr	r0, [pc, #260]	; (8002c54 <main+0x138>)
 8002b50:	f002 f8b2 	bl	8004cb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	483e      	ldr	r0, [pc, #248]	; (8002c54 <main+0x138>)
 8002b5a:	f002 f8ad 	bl	8004cb8 <HAL_GPIO_WritePin>
  HAL_Delay(4000); // For Cam POR
 8002b5e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002b62:	f001 fa03 	bl	8003f6c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_SET);
 8002b66:	2201      	movs	r2, #1
 8002b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b6c:	4839      	ldr	r0, [pc, #228]	; (8002c54 <main+0x138>)
 8002b6e:	f002 f8a3 	bl	8004cb8 <HAL_GPIO_WritePin>

  gpsStatus = setGPS_DynamicModel6(&huart1); // - 6 􀀀 Airborne with <1g Acceleration HAB
 8002b72:	4839      	ldr	r0, [pc, #228]	; (8002c58 <main+0x13c>)
 8002b74:	f001 f8b1 	bl	8003cda <setGPS_DynamicModel6>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
  while(gpsStatus == GPS_FAIL)
 8002b7e:	e009      	b.n	8002b94 <main+0x78>
  {
	  gpsStatus = setGPS_DynamicModel6(&huart1);
 8002b80:	4835      	ldr	r0, [pc, #212]	; (8002c58 <main+0x13c>)
 8002b82:	f001 f8aa 	bl	8003cda <setGPS_DynamicModel6>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
	  HAL_GPIO_TogglePin(GPIOB, GREEN_LED_Pin);
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	4831      	ldr	r0, [pc, #196]	; (8002c54 <main+0x138>)
 8002b90:	f002 f8aa 	bl	8004ce8 <HAL_GPIO_TogglePin>
  while(gpsStatus == GPS_FAIL)
 8002b94:	f897 398f 	ldrb.w	r3, [r7, #2447]	; 0x98f
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d0f1      	beq.n	8002b80 <main+0x64>
  }

  gpsStatus = disableNMEA(&huart1);
 8002b9c:	482e      	ldr	r0, [pc, #184]	; (8002c58 <main+0x13c>)
 8002b9e:	f001 f945 	bl	8003e2c <disableNMEA>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
  if(gpsStatus != GPS_FAIL)
 8002ba8:	f897 398f 	ldrb.w	r3, [r7, #2447]	; 0x98f
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d002      	beq.n	8002bb6 <main+0x9a>
  {
	  // Nothing we can do
	  gpsStatus  = GPS_FAIL;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
  }

  HAL_Status = setupRadio(&hspi2);
 8002bb6:	4829      	ldr	r0, [pc, #164]	; (8002c5c <main+0x140>)
 8002bb8:	f000 fac6 	bl	8003148 <setupRadio>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f887 398e 	strb.w	r3, [r7, #2446]	; 0x98e
  if(HAL_Status != HAL_OK)
 8002bc2:	f897 398e 	ldrb.w	r3, [r7, #2446]	; 0x98e
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <main+0xb4>
  {
	  exit(1);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f004 fa38 	bl	8007040 <exit>
  }

  rscode_init(&rsDriver);
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fc1d 	bl	8002412 <rscode_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    /* USER CODE END WHILE */

	if(sendCallSign)
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <main+0x144>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <main+0xd2>
	{
		processCallSign(&rsDriver);
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fbec 	bl	80013c0 <processCallSign>
		sendCallSign = 0;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <main+0x144>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
	}

	if(sendInfo)
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <main+0x148>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <main+0xe8>
	{
		processInfo(&rsDriver);
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fecd 	bl	8002998 <processInfo>
		sendInfo = 0;
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <main+0x148>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
	}

	if(sendInternalTemperature)
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <main+0x14c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <main+0xfe>
	{
		processInternalTemp(&rsDriver);
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff1a 	bl	8002a48 <processInternalTemp>
		sendInternalTemperature = 0;
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <main+0x14c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
	}

	if(sendBattInfo)
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <main+0x150>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <main+0x116>
	{
		processBattery(&rsDriver,&hadc1);
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	4912      	ldr	r1, [pc, #72]	; (8002c70 <main+0x154>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fa0e 	bl	8001048 <processBattery>
		sendBattInfo = 0;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <main+0x150>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
	}

	if(collectGPSData == 1)
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <main+0x158>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <main+0x12a>
	{
		processGPS(&huart1);
 8002c3a:	4807      	ldr	r0, [pc, #28]	; (8002c58 <main+0x13c>)
 8002c3c:	f7ff fcd6 	bl	80025ec <processGPS>
		collectGPSData 	= 0;
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <main+0x158>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
	}

	processCAM(&huart3,&rsDriver);
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480b      	ldr	r0, [pc, #44]	; (8002c78 <main+0x15c>)
 8002c4c:	f7fe ff60 	bl	8001b10 <processCAM>
	if(sendCallSign)
 8002c50:	e7c2      	b.n	8002bd8 <main+0xbc>
 8002c52:	bf00      	nop
 8002c54:	40010c00 	.word	0x40010c00
 8002c58:	200004b8 	.word	0x200004b8
 8002c5c:	200003ec 	.word	0x200003ec
 8002c60:	2000001c 	.word	0x2000001c
 8002c64:	20000020 	.word	0x20000020
 8002c68:	20000028 	.word	0x20000028
 8002c6c:	20000024 	.word	0x20000024
 8002c70:	20000488 	.word	0x20000488
 8002c74:	20000378 	.word	0x20000378
 8002c78:	20000444 	.word	0x20000444

08002c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b092      	sub	sp, #72	; 0x48
 8002c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	2228      	movs	r2, #40	; 0x28
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 fa1e 	bl	80070cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002caa:	2302      	movs	r3, #2
 8002cac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 f82c 	bl	8004d1c <HAL_RCC_OscConfig>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <SystemClock_Config+0x52>
  {
    Error_Handler();
 8002cca:	f000 fa37 	bl	800313c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cce:	230f      	movs	r3, #15
 8002cd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ce2:	f107 030c 	add.w	r3, r7, #12
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 fa97 	bl	800521c <HAL_RCC_ClockConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002cf4:	f000 fa22 	bl	800313c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fc22 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d0e:	f000 fa15 	bl	800313c <Error_Handler>
  }
}
 8002d12:	bf00      	nop
 8002d14:	3748      	adds	r7, #72	; 0x48
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d2e:	4a19      	ldr	r2, [pc, #100]	; (8002d94 <MX_ADC1_Init+0x78>)
 8002d30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d46:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d58:	480d      	ldr	r0, [pc, #52]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d5a:	f001 f92b 	bl	8003fb4 <HAL_ADC_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002d64:	f000 f9ea 	bl	800313c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002d68:	2305      	movs	r3, #5
 8002d6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_ADC1_Init+0x74>)
 8002d7a:	f001 fba5 	bl	80044c8 <HAL_ADC_ConfigChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002d84:	f000 f9da 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000488 	.word	0x20000488
 8002d94:	40012400 	.word	0x40012400

08002d98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <MX_SPI2_Init+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002de4:	220a      	movs	r2, #10
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_SPI2_Init+0x64>)
 8002dea:	f002 fcad 	bl	8005748 <HAL_SPI_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002df4:	f000 f9a2 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200003ec 	.word	0x200003ec
 8002e00:	40003800 	.word	0x40003800

08002e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	463b      	mov	r3, r7
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002e28:	4b20      	ldr	r3, [pc, #128]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e2a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e38:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e4a:	4818      	ldr	r0, [pc, #96]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e4c:	f003 f9e0 	bl	8006210 <HAL_TIM_Base_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e56:	f000 f971 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	4619      	mov	r1, r3
 8002e66:	4811      	ldr	r0, [pc, #68]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e68:	f003 fb84 	bl	8006574 <HAL_TIM_ConfigClockSource>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e72:	f000 f963 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e7e:	463b      	mov	r3, r7
 8002e80:	4619      	mov	r1, r3
 8002e82:	480a      	ldr	r0, [pc, #40]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e84:	f003 fd74 	bl	8006970 <HAL_TIMEx_MasterConfigSynchronization>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e8e:	f000 f955 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8002e92:	4806      	ldr	r0, [pc, #24]	; (8002eac <MX_TIM2_Init+0xa8>)
 8002e94:	f003 fa0c 	bl	80062b0 <HAL_TIM_Base_Start_IT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002e9e:	f000 f94d 	bl	800313c <Error_Handler>
  }


  /* USER CODE END TIM2_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200004fc 	.word	0x200004fc

08002eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <MX_USART1_UART_Init+0x50>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ebc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee8:	f003 fdba 	bl	8006a60 <HAL_UART_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ef2:	f000 f923 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200004b8 	.word	0x200004b8
 8002f00:	40013800 	.word	0x40013800

08002f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <MX_USART3_UART_Init+0x50>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f3a:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f3c:	f003 fd90 	bl	8006a60 <HAL_UART_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f46:	f000 f8f9 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000444 	.word	0x20000444
 8002f54:	40004800 	.word	0x40004800

08002f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5e:	f107 0310 	add.w	r3, r7, #16
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6c:	4b28      	ldr	r3, [pc, #160]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4a27      	ldr	r2, [pc, #156]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002f72:	f043 0310 	orr.w	r3, r3, #16
 8002f76:	6193      	str	r3, [r2, #24]
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b22      	ldr	r3, [pc, #136]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a21      	ldr	r2, [pc, #132]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002fa2:	f043 0308 	orr.w	r3, r3, #8
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <MX_GPIO_Init+0xb8>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_RESET);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fba:	4816      	ldr	r0, [pc, #88]	; (8003014 <MX_GPIO_Init+0xbc>)
 8002fbc:	f001 fe7c 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002fc6:	4814      	ldr	r0, [pc, #80]	; (8003018 <MX_GPIO_Init+0xc0>)
 8002fc8:	f001 fe76 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RADIO_NSS_Pin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin;
 8002fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_NSS_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 0310 	add.w	r3, r7, #16
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <MX_GPIO_Init+0xbc>)
 8002fe6:	f001 fce3 	bl	80049b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8002fea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffc:	f107 0310 	add.w	r3, r7, #16
 8003000:	4619      	mov	r1, r3
 8003002:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_GPIO_Init+0xc0>)
 8003004:	f001 fcd4 	bl	80049b0 <HAL_GPIO_Init>

}
 8003008:	bf00      	nop
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	40011000 	.word	0x40011000
 8003018:	40010c00 	.word	0x40010c00

0800301c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800302e:	f000 ff81 	bl	8003f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d163      	bne.n	8003104 <HAL_TIM_PeriodElapsedCallback+0xe8>
  {
	  collectGPSData = 1;
 800303c:	4b34      	ldr	r3, [pc, #208]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOB, GREEN_LED_Pin);
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	4833      	ldr	r0, [pc, #204]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003046:	f001 fe4f 	bl	8004ce8 <HAL_GPIO_TogglePin>

	  callSignTic++;
 800304a:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a31      	ldr	r2, [pc, #196]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003052:	6013      	str	r3, [r2, #0]
	  sendInfoTic++;
 8003054:	4b31      	ldr	r3, [pc, #196]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a30      	ldr	r2, [pc, #192]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x100>)
 800305c:	6013      	str	r3, [r2, #0]
	  sendBattInfoTic++;
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	4a2e      	ldr	r2, [pc, #184]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003066:	6013      	str	r3, [r2, #0]
	  sendInternalTemperatureTic++;
 8003068:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003070:	6013      	str	r3, [r2, #0]

	  if(callSignTic % 40 == 0)
 8003072:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003078:	fb83 2301 	smull	r2, r3, r3, r1
 800307c:	111a      	asrs	r2, r3, #4
 800307e:	17cb      	asrs	r3, r1, #31
 8003080:	1ad2      	subs	r2, r2, r3
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1aca      	subs	r2, r1, r3
 800308c:	2a00      	cmp	r2, #0
 800308e:	d102      	bne.n	8003096 <HAL_TIM_PeriodElapsedCallback+0x7a>
	  {
		  sendCallSign = 1;
 8003090:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]
	  }

	  if(callSignTic % 60 == 0)
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b25      	ldr	r3, [pc, #148]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800309c:	fb83 1302 	smull	r1, r3, r3, r2
 80030a0:	4413      	add	r3, r2
 80030a2:	1159      	asrs	r1, r3, #5
 80030a4:	17d3      	asrs	r3, r2, #31
 80030a6:	1ac9      	subs	r1, r1, r3
 80030a8:	460b      	mov	r3, r1
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a5b      	subs	r3, r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	1ad1      	subs	r1, r2, r3
 80030b2:	2900      	cmp	r1, #0
 80030b4:	d102      	bne.n	80030bc <HAL_TIM_PeriodElapsedCallback+0xa0>
	  {
		  sendCallSign = 1;
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
	  }

	  if(sendBattInfoTic % 20 == 0)
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80030be:	6819      	ldr	r1, [r3, #0]
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80030c2:	fb83 2301 	smull	r2, r3, r3, r1
 80030c6:	10da      	asrs	r2, r3, #3
 80030c8:	17cb      	asrs	r3, r1, #31
 80030ca:	1ad2      	subs	r2, r2, r3
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	1aca      	subs	r2, r1, r3
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_TIM_PeriodElapsedCallback+0xc4>
	  {
		  sendBattInfo = 1;
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]
	  }
	  if(sendInternalTemperatureTic % 15 == 0)
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80030e6:	fb83 1302 	smull	r1, r3, r3, r2
 80030ea:	4413      	add	r3, r2
 80030ec:	10d9      	asrs	r1, r3, #3
 80030ee:	17d3      	asrs	r3, r2, #31
 80030f0:	1ac9      	subs	r1, r1, r3
 80030f2:	460b      	mov	r3, r1
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a5b      	subs	r3, r3, r1
 80030f8:	1ad1      	subs	r1, r2, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d102      	bne.n	8003104 <HAL_TIM_PeriodElapsedCallback+0xe8>
	  {
		  sendInternalTemperature = 1;
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
	  }
  }

  /* USER CODE END Callback 1 */
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40001000 	.word	0x40001000
 8003110:	20000378 	.word	0x20000378
 8003114:	40010c00 	.word	0x40010c00
 8003118:	2000037c 	.word	0x2000037c
 800311c:	20000380 	.word	0x20000380
 8003120:	20000384 	.word	0x20000384
 8003124:	20000388 	.word	0x20000388
 8003128:	66666667 	.word	0x66666667
 800312c:	2000001c 	.word	0x2000001c
 8003130:	88888889 	.word	0x88888889
 8003134:	20000024 	.word	0x20000024
 8003138:	20000028 	.word	0x20000028

0800313c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003140:	b672      	cpsid	i
}
 8003142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003144:	e7fe      	b.n	8003144 <Error_Handler+0x8>
	...

08003148 <setupRadio>:
#include "main.h"

static SPI_HandleTypeDef *hspi;

HAL_StatusTypeDef setupRadio(SPI_HandleTypeDef *hspiParam)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef HAL_Status;
	  hspi = hspiParam;
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <setupRadio+0xe8>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6013      	str	r3, [r2, #0]

	  //Soft Reset
	  HAL_Status = radio_write_register(0x07, 0x80);
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	2007      	movs	r0, #7
 800315a:	f000 f8d9 	bl	8003310 <radio_write_register>
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]
	  HAL_Delay(1000);
 8003162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003166:	f000 ff01 	bl	8003f6c <HAL_Delay>

	  //Set Tx Power
	  HAL_Status = radio_write_register(0x6D, 00 | (TX_POWER & 0x0007));
 800316a:	2107      	movs	r1, #7
 800316c:	206d      	movs	r0, #109	; 0x6d
 800316e:	f000 f8cf 	bl	8003310 <radio_write_register>
 8003172:	4603      	mov	r3, r0
 8003174:	73fb      	strb	r3, [r7, #15]

	  HAL_Status = radio_set_tx_frequency(TRANSMIT_FREQUENCY);
 8003176:	482f      	ldr	r0, [pc, #188]	; (8003234 <setupRadio+0xec>)
 8003178:	f000 f916 	bl	80033a8 <radio_set_tx_frequency>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]

	  //Data Rate 9.6kbps
	  HAL_Status = radio_write_register(0x6E, Si4032_TX_DATA_RATE_1);
 8003180:	2159      	movs	r1, #89	; 0x59
 8003182:	206e      	movs	r0, #110	; 0x6e
 8003184:	f000 f8c4 	bl	8003310 <radio_write_register>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x6F, Si4032_TX_DATA_RATE_0);
 800318c:	2121      	movs	r1, #33	; 0x21
 800318e:	206f      	movs	r0, #111	; 0x6f
 8003190:	f000 f8be 	bl	8003310 <radio_write_register>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x70, Si4032_MODULATION_MODE_CONTROL_1);
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	2070      	movs	r0, #112	; 0x70
 800319c:	f000 f8b8 	bl	8003310 <radio_write_register>
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]
	  //HAL_Status = radio_write_register(0x70, 0x20);

	  // 10KHz Dev
		HAL_Status = radio_write_register(0x72, Si4032_FREQUENCY_DEVIATION);
 80031a4:	2110      	movs	r1, #16
 80031a6:	2072      	movs	r0, #114	; 0x72
 80031a8:	f000 f8b2 	bl	8003310 <radio_write_register>
 80031ac:	4603      	mov	r3, r0
 80031ae:	73fb      	strb	r3, [r7, #15]

	  //Preamble
	  HAL_Status = setPreamble();
 80031b0:	f000 f860 	bl	8003274 <setPreamble>
 80031b4:	4603      	mov	r3, r0
 80031b6:	73fb      	strb	r3, [r7, #15]

	  //Header Control 2  sync b11 Fix Packet Length no header 4 sync words
	  HAL_Status = radio_write_register(0x33, 0x0E);
 80031b8:	210e      	movs	r1, #14
 80031ba:	2033      	movs	r0, #51	; 0x33
 80031bc:	f000 f8a8 	bl	8003310 <radio_write_register>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]


	  HAL_Status = radio_write_register(0x36, 0x08);
 80031c4:	2108      	movs	r1, #8
 80031c6:	2036      	movs	r0, #54	; 0x36
 80031c8:	f000 f8a2 	bl	8003310 <radio_write_register>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x37, 0x6D);
 80031d0:	216d      	movs	r1, #109	; 0x6d
 80031d2:	2037      	movs	r0, #55	; 0x37
 80031d4:	f000 f89c 	bl	8003310 <radio_write_register>
 80031d8:	4603      	mov	r3, r0
 80031da:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x38, 0x53);
 80031dc:	2153      	movs	r1, #83	; 0x53
 80031de:	2038      	movs	r0, #56	; 0x38
 80031e0:	f000 f896 	bl	8003310 <radio_write_register>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x39, 0x88);
 80031e8:	2188      	movs	r1, #136	; 0x88
 80031ea:	2039      	movs	r0, #57	; 0x39
 80031ec:	f000 f890 	bl	8003310 <radio_write_register>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]

	  //enable the TX packet handler  CCITT
	  radio_write_register(0x30, 0x08);
 80031f4:	2108      	movs	r1, #8
 80031f6:	2030      	movs	r0, #48	; 0x30
 80031f8:	f000 f88a 	bl	8003310 <radio_write_register>
	  //radio_write_register(0x30, 0x80); // no packet handling no CRC

	  // GFSK FIFO Mode FIFO Mode
	  HAL_Status = setGFSK();
 80031fc:	f000 f82c 	bl	8003258 <setGFSK>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]

	  //HAL_Status = radio_write_register(0x71, 0x63);

	 //write 0x04 to the Interrupt Enable 1 register
	 HAL_Status = radio_write_register(0x05, 0x04);
 8003204:	2104      	movs	r1, #4
 8003206:	2005      	movs	r0, #5
 8003208:	f000 f882 	bl	8003310 <radio_write_register>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]
	 //write 0x00 to the Interrupt Enable 2 register
	 HAL_Status = radio_write_register(0x06, 0x00);
 8003210:	2100      	movs	r1, #0
 8003212:	2006      	movs	r0, #6
 8003214:	f000 f87c 	bl	8003310 <radio_write_register>
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]

	 HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_RESET);
 800321c:	2200      	movs	r2, #0
 800321e:	2180      	movs	r1, #128	; 0x80
 8003220:	4805      	ldr	r0, [pc, #20]	; (8003238 <setupRadio+0xf0>)
 8003222:	f001 fd49 	bl	8004cb8 <HAL_GPIO_WritePin>

	 return HAL_Status;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2000038c 	.word	0x2000038c
 8003234:	43d9199a 	.word	0x43d9199a
 8003238:	40010c00 	.word	0x40010c00

0800323c <setCW>:

	  return HAL_Status;
}

HAL_StatusTypeDef setCW()
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  HAL_Status = radio_write_register(0x71, 0x20);
 8003242:	2120      	movs	r1, #32
 8003244:	2071      	movs	r0, #113	; 0x71
 8003246:	f000 f863 	bl	8003310 <radio_write_register>
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 800324e:	79fb      	ldrb	r3, [r7, #7]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <setGFSK>:

HAL_StatusTypeDef setGFSK()
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  // GFSK FIFO Mode FIFO Mode
	  HAL_Status = radio_write_register(0x71, Si4032_MODULATION_MODE_CONTROL_2);
 800325e:	2123      	movs	r1, #35	; 0x23
 8003260:	2071      	movs	r0, #113	; 0x71
 8003262:	f000 f855 	bl	8003310 <radio_write_register>
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 800326a:	79fb      	ldrb	r3, [r7, #7]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <setPreamble>:

HAL_StatusTypeDef setPreamble()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  // GFSK FIFO Mode FIFO Mode
	  //Preamble
	  HAL_Status = radio_write_register(0x34, 0x10);
 800327a:	2110      	movs	r1, #16
 800327c:	2034      	movs	r0, #52	; 0x34
 800327e:	f000 f847 	bl	8003310 <radio_write_register>
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 8003286:	79fb      	ldrb	r3, [r7, #7]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <radio_read_register>:

HAL_StatusTypeDef radio_read_register(const uint8_t register_addr, uint8_t *pData)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef HAL_Status;
  uint16_t data_word;
  uint8_t addr;
  uint8_t val;

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_RESET);
 800329c:	2200      	movs	r2, #0
 800329e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a2:	4819      	ldr	r0, [pc, #100]	; (8003308 <radio_read_register+0x78>)
 80032a4:	f001 fd08 	bl	8004cb8 <HAL_GPIO_WritePin>

  data_word = ((register_addr | 0x0) << 8);
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	81fb      	strh	r3, [r7, #14]
  addr = data_word >> 8;
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	733b      	strb	r3, [r7, #12]

  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&addr, 1, 1000);
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <radio_read_register+0x7c>)
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	f107 010c 	add.w	r1, r7, #12
 80032c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c6:	2201      	movs	r2, #1
 80032c8:	f002 faba 	bl	8005840 <HAL_SPI_Transmit>
 80032cc:	4603      	mov	r3, r0
 80032ce:	737b      	strb	r3, [r7, #13]
  HAL_Delay(1);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f000 fe4b 	bl	8003f6c <HAL_Delay>
  HAL_Status = HAL_SPI_Receive(hspi, &val, 1, 1000);
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <radio_read_register+0x7c>)
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	f107 010b 	add.w	r1, r7, #11
 80032de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e2:	2201      	movs	r2, #1
 80032e4:	f002 fbe8 	bl	8005ab8 <HAL_SPI_Receive>
 80032e8:	4603      	mov	r3, r0
 80032ea:	737b      	strb	r3, [r7, #13]
 80032ec:	7afa      	ldrb	r2, [r7, #11]

  memcpy(pData,&val,1);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_SET);
 80032f2:	2201      	movs	r2, #1
 80032f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032f8:	4803      	ldr	r0, [pc, #12]	; (8003308 <radio_read_register+0x78>)
 80032fa:	f001 fcdd 	bl	8004cb8 <HAL_GPIO_WritePin>

  return HAL_Status;
 80032fe:	7b7b      	ldrb	r3, [r7, #13]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40011000 	.word	0x40011000
 800330c:	2000038c 	.word	0x2000038c

08003310 <radio_write_register>:

HAL_StatusTypeDef radio_write_register(const uint8_t register_addr, uint8_t value)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	460a      	mov	r2, r1
 800331a:	71fb      	strb	r3, [r7, #7]
 800331c:	4613      	mov	r3, r2
 800331e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef HAL_Status;

  uint8_t WR = 0x80;
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	73fb      	strb	r3, [r7, #15]
  uint16_t data_word;
  uint8_t addr;
  uint8_t val;

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_RESET);
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800332a:	481d      	ldr	r0, [pc, #116]	; (80033a0 <radio_write_register+0x90>)
 800332c:	f001 fcc4 	bl	8004cb8 <HAL_GPIO_WritePin>

  data_word = ((register_addr | WR) << 8) | value;
 8003330:	79fa      	ldrb	r2, [r7, #7]
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	4313      	orrs	r3, r2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	b21a      	sxth	r2, r3
 800333c:	79bb      	ldrb	r3, [r7, #6]
 800333e:	b21b      	sxth	r3, r3
 8003340:	4313      	orrs	r3, r2
 8003342:	b21b      	sxth	r3, r3
 8003344:	81bb      	strh	r3, [r7, #12]
  addr = data_word >> 8;
 8003346:	89bb      	ldrh	r3, [r7, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	b29b      	uxth	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	72bb      	strb	r3, [r7, #10]
  val  = (uint8_t)data_word;
 8003350:	89bb      	ldrh	r3, [r7, #12]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	727b      	strb	r3, [r7, #9]


  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&addr, 1, 1000);
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <radio_write_register+0x94>)
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	f107 010a 	add.w	r1, r7, #10
 800335e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003362:	2201      	movs	r2, #1
 8003364:	f002 fa6c 	bl	8005840 <HAL_SPI_Transmit>
 8003368:	4603      	mov	r3, r0
 800336a:	72fb      	strb	r3, [r7, #11]
  HAL_Delay(1);
 800336c:	2001      	movs	r0, #1
 800336e:	f000 fdfd 	bl	8003f6c <HAL_Delay>
  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&val, 1, 1000);
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <radio_write_register+0x94>)
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	f107 0109 	add.w	r1, r7, #9
 800337a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800337e:	2201      	movs	r2, #1
 8003380:	f002 fa5e 	bl	8005840 <HAL_SPI_Transmit>
 8003384:	4603      	mov	r3, r0
 8003386:	72fb      	strb	r3, [r7, #11]

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_SET);
 8003388:	2201      	movs	r2, #1
 800338a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800338e:	4804      	ldr	r0, [pc, #16]	; (80033a0 <radio_write_register+0x90>)
 8003390:	f001 fc92 	bl	8004cb8 <HAL_GPIO_WritePin>

  return HAL_Status;
 8003394:	7afb      	ldrb	r3, [r7, #11]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40011000 	.word	0x40011000
 80033a4:	2000038c 	.word	0x2000038c

080033a8 <radio_set_tx_frequency>:

HAL_StatusTypeDef radio_set_tx_frequency(float freq_in_mhz)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef HAL_Status;
  float SI4032_CLOCK = 26.0;
 80033b0:	4b5a      	ldr	r3, [pc, #360]	; (800351c <radio_set_tx_frequency+0x174>)
 80033b2:	617b      	str	r3, [r7, #20]

  uint8_t hbsel = (uint8_t) ((freq_in_mhz * (30.0f / SI4032_CLOCK)) >= 480.0f ? 1 : 0);
 80033b4:	6979      	ldr	r1, [r7, #20]
 80033b6:	485a      	ldr	r0, [pc, #360]	; (8003520 <radio_set_tx_frequency+0x178>)
 80033b8:	f7fd fd12 	bl	8000de0 <__aeabi_fdiv>
 80033bc:	4603      	mov	r3, r0
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fc59 	bl	8000c78 <__aeabi_fmul>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4956      	ldr	r1, [pc, #344]	; (8003524 <radio_set_tx_frequency+0x17c>)
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd fe06 	bl	8000fdc <__aeabi_fcmpge>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <radio_set_tx_frequency+0x32>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <radio_set_tx_frequency+0x34>
 80033da:	2300      	movs	r3, #0
 80033dc:	74fb      	strb	r3, [r7, #19]

  uint8_t fb = (uint8_t) ((((uint8_t)((freq_in_mhz * (30.0f / SI4032_CLOCK)) / 10) - 24) - (24 * hbsel)) / (1 + hbsel));
 80033de:	6979      	ldr	r1, [r7, #20]
 80033e0:	484f      	ldr	r0, [pc, #316]	; (8003520 <radio_set_tx_frequency+0x178>)
 80033e2:	f7fd fcfd 	bl	8000de0 <__aeabi_fdiv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fc44 	bl	8000c78 <__aeabi_fmul>
 80033f0:	4603      	mov	r3, r0
 80033f2:	494d      	ldr	r1, [pc, #308]	; (8003528 <radio_set_tx_frequency+0x180>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fcf3 	bl	8000de0 <__aeabi_fdiv>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fe01 	bl	8001004 <__aeabi_f2uiz>
 8003402:	4603      	mov	r3, r0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f1a3 0118 	sub.w	r1, r3, #24
 800340a:	7cfa      	ldrb	r2, [r7, #19]
 800340c:	4613      	mov	r3, r2
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	18ca      	adds	r2, r1, r3
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	3301      	adds	r3, #1
 800341a:	fb92 f3f3 	sdiv	r3, r2, r3
 800341e:	74bb      	strb	r3, [r7, #18]
  uint8_t gen_div  =  3;  // constant - not possible to change!
 8003420:	2303      	movs	r3, #3
 8003422:	747b      	strb	r3, [r7, #17]
  uint16_t fc = (uint16_t) (((freq_in_mhz / ((SI4032_CLOCK / gen_div) * (hbsel + 1))) - fb - 24) * 64000);
 8003424:	7c7b      	ldrb	r3, [r7, #17]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fbd2 	bl	8000bd0 <__aeabi_i2f>
 800342c:	4603      	mov	r3, r0
 800342e:	4619      	mov	r1, r3
 8003430:	6978      	ldr	r0, [r7, #20]
 8003432:	f7fd fcd5 	bl	8000de0 <__aeabi_fdiv>
 8003436:	4603      	mov	r3, r0
 8003438:	461c      	mov	r4, r3
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	3301      	adds	r3, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd fbc6 	bl	8000bd0 <__aeabi_i2f>
 8003444:	4603      	mov	r3, r0
 8003446:	4619      	mov	r1, r3
 8003448:	4620      	mov	r0, r4
 800344a:	f7fd fc15 	bl	8000c78 <__aeabi_fmul>
 800344e:	4603      	mov	r3, r0
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fcc4 	bl	8000de0 <__aeabi_fdiv>
 8003458:	4603      	mov	r3, r0
 800345a:	461c      	mov	r4, r3
 800345c:	7cbb      	ldrb	r3, [r7, #18]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fbb6 	bl	8000bd0 <__aeabi_i2f>
 8003464:	4603      	mov	r3, r0
 8003466:	4619      	mov	r1, r3
 8003468:	4620      	mov	r0, r4
 800346a:	f7fd fafb 	bl	8000a64 <__aeabi_fsub>
 800346e:	4603      	mov	r3, r0
 8003470:	492e      	ldr	r1, [pc, #184]	; (800352c <radio_set_tx_frequency+0x184>)
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd faf6 	bl	8000a64 <__aeabi_fsub>
 8003478:	4603      	mov	r3, r0
 800347a:	492d      	ldr	r1, [pc, #180]	; (8003530 <radio_set_tx_frequency+0x188>)
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd fbfb 	bl	8000c78 <__aeabi_fmul>
 8003482:	4603      	mov	r3, r0
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fdbd 	bl	8001004 <__aeabi_f2uiz>
 800348a:	4603      	mov	r3, r0
 800348c:	81fb      	strh	r3, [r7, #14]
  HAL_Status = radio_write_register(0x75, (uint8_t) (0b01000000 | (fb & 0b11111) | ((hbsel & 0b1) << 5)));
 800348e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	b25b      	sxtb	r3, r3
 8003498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349c:	b25a      	sxtb	r2, r3
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	4313      	orrs	r3, r2
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	2075      	movs	r0, #117	; 0x75
 80034b4:	f7ff ff2c 	bl	8003310 <radio_write_register>
 80034b8:	4603      	mov	r3, r0
 80034ba:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x76, (uint8_t) (((uint16_t)fc >> 8) & 0xff));
 80034bc:	89fb      	ldrh	r3, [r7, #14]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	2076      	movs	r0, #118	; 0x76
 80034c8:	f7ff ff22 	bl	8003310 <radio_write_register>
 80034cc:	4603      	mov	r3, r0
 80034ce:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x77, (uint8_t) ((uint16_t)fc & 0xff));
 80034d0:	89fb      	ldrh	r3, [r7, #14]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	2077      	movs	r0, #119	; 0x77
 80034d8:	f7ff ff1a 	bl	8003310 <radio_write_register>
 80034dc:	4603      	mov	r3, r0
 80034de:	737b      	strb	r3, [r7, #13]

  HAL_Status = radio_write_register(0x73, Si4032_FREQUENCY_OFFSET_1);
 80034e0:	2100      	movs	r1, #0
 80034e2:	2073      	movs	r0, #115	; 0x73
 80034e4:	f7ff ff14 	bl	8003310 <radio_write_register>
 80034e8:	4603      	mov	r3, r0
 80034ea:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x74, Si4032_FREQUENCY_OFFSET_2);
 80034ec:	2100      	movs	r1, #0
 80034ee:	2074      	movs	r0, #116	; 0x74
 80034f0:	f7ff ff0e 	bl	8003310 <radio_write_register>
 80034f4:	4603      	mov	r3, r0
 80034f6:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x7A, Si4032_FREQUENCY_HOPPING_STEP_SIZE);
 80034f8:	2100      	movs	r1, #0
 80034fa:	207a      	movs	r0, #122	; 0x7a
 80034fc:	f7ff ff08 	bl	8003310 <radio_write_register>
 8003500:	4603      	mov	r3, r0
 8003502:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x79, Si4032_FREQUENCY_HOPPING_CHANNEL);
 8003504:	2100      	movs	r1, #0
 8003506:	2079      	movs	r0, #121	; 0x79
 8003508:	f7ff ff02 	bl	8003310 <radio_write_register>
 800350c:	4603      	mov	r3, r0
 800350e:	737b      	strb	r3, [r7, #13]

  return HAL_Status;
 8003510:	7b7b      	ldrb	r3, [r7, #13]
}
 8003512:	4618      	mov	r0, r3
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	bf00      	nop
 800351c:	41d00000 	.word	0x41d00000
 8003520:	41f00000 	.word	0x41f00000
 8003524:	43f00000 	.word	0x43f00000
 8003528:	41200000 	.word	0x41200000
 800352c:	41c00000 	.word	0x41c00000
 8003530:	477a0000 	.word	0x477a0000

08003534 <radioTxData>:

HAL_StatusTypeDef radioTxData(uint8_t txData[],uint8_t len)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef HAL_Status;
	uint8_t  regData;
	int i;

	HAL_Status = radio_write_register(0x3E, len);
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	4619      	mov	r1, r3
 8003544:	203e      	movs	r0, #62	; 0x3e
 8003546:	f7ff fee3 	bl	8003310 <radio_write_register>
 800354a:	4603      	mov	r3, r0
 800354c:	72fb      	strb	r3, [r7, #11]
	for(i=0; i<len;i++)
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e00c      	b.n	800356e <radioTxData+0x3a>
	{
		HAL_Status = radio_write_register(0x7F, txData[i]);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	207f      	movs	r0, #127	; 0x7f
 8003560:	f7ff fed6 	bl	8003310 <radio_write_register>
 8003564:	4603      	mov	r3, r0
 8003566:	72fb      	strb	r3, [r7, #11]
	for(i=0; i<len;i++)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3301      	adds	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	429a      	cmp	r2, r3
 8003574:	dbee      	blt.n	8003554 <radioTxData+0x20>
	}

	//read the Interrupt Status1 register
	HAL_Status =  radio_read_register(0x3,&regData);
 8003576:	f107 030a 	add.w	r3, r7, #10
 800357a:	4619      	mov	r1, r3
 800357c:	2003      	movs	r0, #3
 800357e:	f7ff fe87 	bl	8003290 <radio_read_register>
 8003582:	4603      	mov	r3, r0
 8003584:	72fb      	strb	r3, [r7, #11]
	//read the Interrupt Status2 register
	HAL_Status =  radio_read_register(0x4,&regData);
 8003586:	f107 030a 	add.w	r3, r7, #10
 800358a:	4619      	mov	r1, r3
 800358c:	2004      	movs	r0, #4
 800358e:	f7ff fe7f 	bl	8003290 <radio_read_register>
 8003592:	4603      	mov	r3, r0
 8003594:	72fb      	strb	r3, [r7, #11]

	HAL_Status = radio_write_register(0x07, Si4032_OPERATING_AND_FUNCTION_CONTROL_1);
 8003596:	2108      	movs	r1, #8
 8003598:	2007      	movs	r0, #7
 800359a:	f7ff feb9 	bl	8003310 <radio_write_register>
 800359e:	4603      	mov	r3, r0
 80035a0:	72fb      	strb	r3, [r7, #11]
	//HAL_Status = radio_write_register(0x07, 0x09);
	regData = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	72bb      	strb	r3, [r7, #10]
	while((regData & 0x04) != 0x4)
 80035a6:	e007      	b.n	80035b8 <radioTxData+0x84>
	{
		//read the Interrupt Status1 register
		HAL_Status =  radio_read_register(0x3,&regData);
 80035a8:	f107 030a 	add.w	r3, r7, #10
 80035ac:	4619      	mov	r1, r3
 80035ae:	2003      	movs	r0, #3
 80035b0:	f7ff fe6e 	bl	8003290 <radio_read_register>
 80035b4:	4603      	mov	r3, r0
 80035b6:	72fb      	strb	r3, [r7, #11]
	while((regData & 0x04) != 0x4)
 80035b8:	7abb      	ldrb	r3, [r7, #10]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f2      	beq.n	80035a8 <radioTxData+0x74>
	}

	//read the Interrupt Status2 register
	HAL_Status =  radio_read_register(0x4,&regData);
 80035c2:	f107 030a 	add.w	r3, r7, #10
 80035c6:	4619      	mov	r1, r3
 80035c8:	2004      	movs	r0, #4
 80035ca:	f7ff fe61 	bl	8003290 <radio_read_register>
 80035ce:	4603      	mov	r3, r0
 80035d0:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_TogglePin(GPIOB, RED_LED_Pin);
 80035d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035d6:	4804      	ldr	r0, [pc, #16]	; (80035e8 <radioTxData+0xb4>)
 80035d8:	f001 fb86 	bl	8004ce8 <HAL_GPIO_TogglePin>

	return HAL_Status;
 80035dc:	7afb      	ldrb	r3, [r7, #11]

}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40010c00 	.word	0x40010c00

080035ec <initialize_ecc>:
compute_genpoly (struct rscode_driver * driver, int nbytes, int * genpoly);

/* Initialize lookup tables, polynomials, etc. */
void
initialize_ecc (struct rscode_driver * driver)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Compute the encoder generator polynomial */
  compute_genpoly(driver, NPAR, driver->genPoly);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	2108      	movs	r1, #8
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f856 	bl	80036ac <compute_genpoly>
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <zero_fill_from>:

void
zero_fill_from (unsigned char * buf, int from, int to)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  int i;
  for (i = from; i < to; i++) buf[i] = 0;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e007      	b.n	800362a <zero_fill_from+0x22>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	dbf3      	blt.n	800361a <zero_fill_from+0x12>
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <build_codeword>:
#endif

/* Append the parity bytes onto the end of the message */
void
build_codeword (struct rscode_driver * driver, unsigned char * msg, int nbytes, unsigned char * dst)
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
  int i;
	
  for (i = 0; i < nbytes; i++) dst[i] = msg[i];
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e00a      	b.n	8003668 <build_codeword+0x2a>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	441a      	add	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	440b      	add	r3, r1
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3301      	adds	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	dbf0      	blt.n	8003652 <build_codeword+0x14>
	
  for (i = 0; i < NPAR; i++) {
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e011      	b.n	800369a <build_codeword+0x5c>
    dst[i+nbytes] = driver->pBytes[NPAR-1-i];
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f1c3 0207 	rsb	r2, r3, #7
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3220      	adds	r2, #32
 8003680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	461a      	mov	r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4413      	add	r3, r2
 8003690:	b2ca      	uxtb	r2, r1
 8003692:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NPAR; i++) {
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3301      	adds	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b07      	cmp	r3, #7
 800369e:	ddea      	ble.n	8003676 <build_codeword+0x38>
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <compute_genpoly>:
 * at least n+1 bytes long.
 */

static void
compute_genpoly (struct rscode_driver * driver, int nbytes, int * genpoly)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	6018      	str	r0, [r3, #0]
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	6019      	str	r1, [r3, #0]
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	601a      	str	r2, [r3, #0]
  int i, tp[256], tp1[256];
	
  /* multiply (x + a^n) for n = 1 to nbytes */

  zero_poly(driver, tp1);
 80036c4:	f107 0214 	add.w	r2, r7, #20
 80036c8:	f107 030c 	add.w	r3, r7, #12
 80036cc:	4611      	mov	r1, r2
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	f7fd fd95 	bl	80011fe <zero_poly>
  tp1[0] = 1;
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  for (i = 1; i <= nbytes; i++) {
 80036dc:	2301      	movs	r3, #1
 80036de:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80036e2:	e02f      	b.n	8003744 <compute_genpoly+0x98>
    zero_poly(driver, tp);
 80036e4:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	4611      	mov	r1, r2
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	f7fd fd85 	bl	80011fe <zero_poly>
    tp[0] = gexp(driver,i);		/* set up x+a^n */
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	f7fe feaa 	bl	8002456 <gexp>
 8003702:	4602      	mov	r2, r0
 8003704:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8003708:	601a      	str	r2, [r3, #0]
    tp[1] = 1;
 800370a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800370e:	2201      	movs	r2, #1
 8003710:	605a      	str	r2, [r3, #4]
	  
    mult_polys(driver, genpoly, tp, tp1);
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	f207 4214 	addw	r2, r7, #1044	; 0x414
 800371a:	1d39      	adds	r1, r7, #4
 800371c:	f107 000c 	add.w	r0, r7, #12
 8003720:	6809      	ldr	r1, [r1, #0]
 8003722:	6800      	ldr	r0, [r0, #0]
 8003724:	f7fd fd85 	bl	8001232 <mult_polys>
    copy_poly(driver, tp1, genpoly);
 8003728:	1d3a      	adds	r2, r7, #4
 800372a:	f107 0114 	add.w	r1, r7, #20
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	f7fd fd43 	bl	80011c0 <copy_poly>
  for (i = 1; i <= nbytes; i++) {
 800373a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800373e:	3301      	adds	r3, #1
 8003740:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	ddc8      	ble.n	80036e4 <compute_genpoly+0x38>
  }
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	f607 0718 	addw	r7, r7, #2072	; 0x818
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <encode_data>:
 * 
 */

void
encode_data (struct rscode_driver * driver, unsigned char *msg, int nbytes, unsigned char *dst)
{
 800375e:	b590      	push	{r4, r7, lr}
 8003760:	b091      	sub	sp, #68	; 0x44
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
  int i, LFSR[NPAR+1],dbyte, j;
	
  for(i=0; i < NPAR+1; i++) LFSR[i]=0;
 800376c:	2300      	movs	r3, #0
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003770:	e00a      	b.n	8003788 <encode_data+0x2a>
 8003772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800377a:	4413      	add	r3, r2
 800377c:	2200      	movs	r2, #0
 800377e:	f843 2c30 	str.w	r2, [r3, #-48]
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	3301      	adds	r3, #1
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378a:	2b08      	cmp	r3, #8
 800378c:	ddf1      	ble.n	8003772 <encode_data+0x14>

  for (i = 0; i < nbytes; i++) {
 800378e:	2300      	movs	r3, #0
 8003790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003792:	e037      	b.n	8003804 <encode_data+0xa6>
    dbyte = msg[i] ^ LFSR[NPAR-1];
 8003794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	4053      	eors	r3, r2
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = NPAR-1; j > 0; j--) {
 80037a4:	2307      	movs	r3, #7
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a8:	e01d      	b.n	80037e6 <encode_data+0x88>
      LFSR[j] = LFSR[j-1] ^ gmult(driver, driver->genPoly[j], dbyte);
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	3b01      	subs	r3, #1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80037b4:	4413      	add	r3, r2
 80037b6:	f853 4c30 	ldr.w	r4, [r3, #-48]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c4:	4619      	mov	r1, r3
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7fe fea0 	bl	800250c <gmult>
 80037cc:	4603      	mov	r3, r0
 80037ce:	ea84 0203 	eor.w	r2, r4, r3
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80037da:	440b      	add	r3, r1
 80037dc:	f843 2c30 	str.w	r2, [r3, #-48]
    for (j = NPAR-1; j > 0; j--) {
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e2:	3b01      	subs	r3, #1
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	dcde      	bgt.n	80037aa <encode_data+0x4c>
    }
    LFSR[0] = gmult(driver, driver->genPoly[0], dbyte);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f2:	4619      	mov	r1, r3
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7fe fe89 	bl	800250c <gmult>
 80037fa:	4603      	mov	r3, r0
 80037fc:	613b      	str	r3, [r7, #16]
  for (i = 0; i < nbytes; i++) {
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	3301      	adds	r3, #1
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	dbc3      	blt.n	8003794 <encode_data+0x36>
  }

  for (i = 0; i < NPAR; i++) 
 800380c:	2300      	movs	r3, #0
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003810:	e00e      	b.n	8003830 <encode_data+0xd2>
    driver->pBytes[i] = LFSR[i];
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800381a:	4413      	add	r3, r2
 800381c:	f853 1c30 	ldr.w	r1, [r3, #-48]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003824:	3220      	adds	r2, #32
 8003826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NPAR; i++) 
 800382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382c:	3301      	adds	r3, #1
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003832:	2b07      	cmp	r3, #7
 8003834:	dded      	ble.n	8003812 <encode_data+0xb4>
	
  build_codeword(driver, msg, nbytes, dst);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff fefe 	bl	800363e <build_codeword>
}
 8003842:	bf00      	nop
 8003844:	3744      	adds	r7, #68	; 0x44
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}
	...

0800384c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_MspInit+0x5c>)
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <HAL_MspInit+0x5c>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6193      	str	r3, [r2, #24]
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_MspInit+0x5c>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <HAL_MspInit+0x5c>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4a0e      	ldr	r2, [pc, #56]	; (80038a8 <HAL_MspInit+0x5c>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	61d3      	str	r3, [r2, #28]
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_MspInit+0x5c>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_MspInit+0x60>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_MspInit+0x60>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40010000 	.word	0x40010000

080038b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 0310 	add.w	r3, r7, #16
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_ADC_MspInit+0x6c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d121      	bne.n	8003914 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <HAL_ADC_MspInit+0x70>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <HAL_ADC_MspInit+0x70>)
 80038d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038da:	6193      	str	r3, [r2, #24]
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_ADC_MspInit+0x70>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <HAL_ADC_MspInit+0x70>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <HAL_ADC_MspInit+0x70>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6193      	str	r3, [r2, #24]
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_ADC_MspInit+0x70>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Batt_Volt_Pin;
 8003900:	2320      	movs	r3, #32
 8003902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003904:	2303      	movs	r3, #3
 8003906:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Batt_Volt_GPIO_Port, &GPIO_InitStruct);
 8003908:	f107 0310 	add.w	r3, r7, #16
 800390c:	4619      	mov	r1, r3
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <HAL_ADC_MspInit+0x74>)
 8003910:	f001 f84e 	bl	80049b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003914:	bf00      	nop
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40012400 	.word	0x40012400
 8003920:	40021000 	.word	0x40021000
 8003924:	40010800 	.word	0x40010800

08003928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_SPI_MspInit+0x8c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d131      	bne.n	80039ac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 800394e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003952:	61d3      	str	r3, [r2, #28]
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003960:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	6193      	str	r3, [r2, #24]
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_SPI_MspInit+0x90>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003978:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800397c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003982:	2303      	movs	r3, #3
 8003984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003986:	f107 0310 	add.w	r3, r7, #16
 800398a:	4619      	mov	r1, r3
 800398c:	480b      	ldr	r0, [pc, #44]	; (80039bc <HAL_SPI_MspInit+0x94>)
 800398e:	f001 f80f 	bl	80049b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	4619      	mov	r1, r3
 80039a6:	4805      	ldr	r0, [pc, #20]	; (80039bc <HAL_SPI_MspInit+0x94>)
 80039a8:	f001 f802 	bl	80049b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80039ac:	bf00      	nop
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40003800 	.word	0x40003800
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40010c00 	.word	0x40010c00

080039c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d113      	bne.n	80039fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_TIM_Base_MspInit+0x44>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <HAL_TIM_Base_MspInit+0x44>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	61d3      	str	r3, [r2, #28]
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_TIM_Base_MspInit+0x44>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2100      	movs	r1, #0
 80039ee:	201c      	movs	r0, #28
 80039f0:	f000 ffb3 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039f4:	201c      	movs	r0, #28
 80039f6:	f000 ffcc 	bl	8004992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 0318 	add.w	r3, r7, #24
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_UART_MspInit+0xfc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d132      	bne.n	8003a8e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a28:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4a36      	ldr	r2, [pc, #216]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a32:	6193      	str	r3, [r2, #24]
 8003a34:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4a30      	ldr	r2, [pc, #192]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6193      	str	r3, [r2, #24]
 8003a4c:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a62:	2303      	movs	r3, #3
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	f107 0318 	add.w	r3, r7, #24
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4827      	ldr	r0, [pc, #156]	; (8003b0c <HAL_UART_MspInit+0x104>)
 8003a6e:	f000 ff9f 	bl	80049b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a80:	f107 0318 	add.w	r3, r7, #24
 8003a84:	4619      	mov	r1, r3
 8003a86:	4821      	ldr	r0, [pc, #132]	; (8003b0c <HAL_UART_MspInit+0x104>)
 8003a88:	f000 ff92 	bl	80049b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a8c:	e036      	b.n	8003afc <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <HAL_UART_MspInit+0x108>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d131      	bne.n	8003afc <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa2:	61d3      	str	r3, [r2, #28]
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6193      	str	r3, [r2, #24]
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_UART_MspInit+0x100>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad6:	f107 0318 	add.w	r3, r7, #24
 8003ada:	4619      	mov	r1, r3
 8003adc:	480d      	ldr	r0, [pc, #52]	; (8003b14 <HAL_UART_MspInit+0x10c>)
 8003ade:	f000 ff67 	bl	80049b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af0:	f107 0318 	add.w	r3, r7, #24
 8003af4:	4619      	mov	r1, r3
 8003af6:	4807      	ldr	r0, [pc, #28]	; (8003b14 <HAL_UART_MspInit+0x10c>)
 8003af8:	f000 ff5a 	bl	80049b0 <HAL_GPIO_Init>
}
 8003afc:	bf00      	nop
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40013800 	.word	0x40013800
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010800 	.word	0x40010800
 8003b10:	40004800 	.word	0x40004800
 8003b14:	40010c00 	.word	0x40010c00

08003b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	2036      	movs	r0, #54	; 0x36
 8003b2e:	f000 ff14 	bl	800495a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b32:	2036      	movs	r0, #54	; 0x36
 8003b34:	f000 ff2d 	bl	8004992 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <HAL_InitTick+0x9c>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <HAL_InitTick+0x9c>)
 8003b3e:	f043 0310 	orr.w	r3, r3, #16
 8003b42:	61d3      	str	r3, [r2, #28]
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_InitTick+0x9c>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b50:	f107 0210 	add.w	r2, r7, #16
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 fcac 	bl	80054b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b60:	f001 fc82 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 8003b64:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_InitTick+0xa0>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	0c9b      	lsrs	r3, r3, #18
 8003b70:	3b01      	subs	r3, #1
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_InitTick+0xa4>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <HAL_InitTick+0xa8>)
 8003b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_InitTick+0xa4>)
 8003b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b80:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b82:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <HAL_InitTick+0xa4>)
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_InitTick+0xa4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_InitTick+0xa4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b94:	4809      	ldr	r0, [pc, #36]	; (8003bbc <HAL_InitTick+0xa4>)
 8003b96:	f002 fb3b 	bl	8006210 <HAL_TIM_Base_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003ba0:	4806      	ldr	r0, [pc, #24]	; (8003bbc <HAL_InitTick+0xa4>)
 8003ba2:	f002 fb85 	bl	80062b0 <HAL_TIM_Base_Start_IT>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	e000      	b.n	8003bac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3730      	adds	r7, #48	; 0x30
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	431bde83 	.word	0x431bde83
 8003bbc:	20000544 	.word	0x20000544
 8003bc0:	40001000 	.word	0x40001000

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc8:	e7fe      	b.n	8003bc8 <NMI_Handler+0x4>

08003bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bce:	e7fe      	b.n	8003bce <HardFault_Handler+0x4>

08003bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd4:	e7fe      	b.n	8003bd4 <MemManage_Handler+0x4>

08003bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bda:	e7fe      	b.n	8003bda <BusFault_Handler+0x4>

08003bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be0:	e7fe      	b.n	8003be0 <UsageFault_Handler+0x4>

08003be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
	...

08003c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <TIM2_IRQHandler+0x10>)
 8003c1a:	f002 fba3 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200004fc 	.word	0x200004fc

08003c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c2c:	4802      	ldr	r0, [pc, #8]	; (8003c38 <TIM6_DAC_IRQHandler+0x10>)
 8003c2e:	f002 fb99 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000544 	.word	0x20000544

08003c3c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c46:	f003 f9f5 	bl	8007034 <__errno>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2216      	movs	r2, #22
 8003c4e:	601a      	str	r2, [r3, #0]
	return -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_exit>:

void _exit (int status)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffe7 	bl	8003c3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c6e:	e7fe      	b.n	8003c6e <_exit+0x12>

08003c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <calcChecksum>:

#include <string.h>
#include <ublox.h>

struct ubxChecksumType calcChecksum(uint8_t *message, uint16_t size)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
	struct ubxChecksumType ck = {0, 0};
 8003c88:	2300      	movs	r3, #0
 8003c8a:	733b      	strb	r3, [r7, #12]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	737b      	strb	r3, [r7, #13]

	for(int i = 0;i<size;i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e00f      	b.n	8003cb6 <calcChecksum+0x3a>
	{
		ck.ck_a = ck.ck_a + message[i];
 8003c96:	7b3a      	ldrb	r2, [r7, #12]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	440b      	add	r3, r1
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	733b      	strb	r3, [r7, #12]
		ck.ck_b = ck.ck_b + ck.ck_a;
 8003ca6:	7b7a      	ldrb	r2, [r7, #13]
 8003ca8:	7b3b      	ldrb	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	737b      	strb	r3, [r7, #13]
	for(int i = 0;i<size;i++)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	dbeb      	blt.n	8003c96 <calcChecksum+0x1a>
	}

	return ck;
 8003cbe:	89bb      	ldrh	r3, [r7, #12]
 8003cc0:	823b      	strh	r3, [r7, #16]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	7c3a      	ldrb	r2, [r7, #16]
 8003cc6:	f362 0307 	bfi	r3, r2, #0, #8
 8003cca:	7c7a      	ldrb	r2, [r7, #17]
 8003ccc:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <setGPS_DynamicModel6>:

// Configure flight mode - needed above 18km altitude
// Notes: Tweaked the PDOP limits a bit, to make it a bit more likely to report a position.
GPS_StatusTypeDef setGPS_DynamicModel6(UART_HandleTypeDef *huart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b09a      	sub	sp, #104	; 0x68
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	GPS_StatusTypeDef gpsStatus  = GPS_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	uint8_t rspBuf[10];
	uint16_t received;
	uint8_t expectedRsp[10];

	uint8_t resetCmd = 0xff;
 8003ce8:	23ff      	movs	r3, #255	; 0xff
 8003cea:	73fb      	strb	r3, [r7, #15]

	memset(&ubxNavPacket,'\0',sizeof(ubxNavPacket));
 8003cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf0:	222c      	movs	r2, #44	; 0x2c
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 f9e9 	bl	80070cc <memset>
	ubxNavPacket.ubxSync.sc1          = 0xb5;
 8003cfa:	23b5      	movs	r3, #181	; 0xb5
 8003cfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	ubxNavPacket.ubxSync.sc2          = 0x62;
 8003d00:	2362      	movs	r3, #98	; 0x62
 8003d02:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ubxNavPacket.ubxNavMsgData.messageClass = 0x06;
 8003d06:	2306      	movs	r3, #6
 8003d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ubxNavPacket.ubxNavMsgData.messageId    = 0x24;
 8003d0c:	2324      	movs	r3, #36	; 0x24
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ubxNavPacket.ubxNavMsgData.payloadSize  = sizeof(ubxNavPacket.ubxNavMsgData.ubxNavPayload);
 8003d12:	2324      	movs	r3, #36	; 0x24
 8003d14:	85bb      	strh	r3, [r7, #44]	; 0x2c
	//ubxNavPacket.ubxNavMsgData.ubxNavPayload.mask = 0b00000001111111111;
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.mask =   0b00000000000000011;
 8003d16:	2303      	movs	r3, #3
 8003d18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.dynModel        =6;
 8003d1a:	2306      	movs	r3, #6
 8003d1c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.fixMode         =3;
 8003d20:	2303      	movs	r3, #3
 8003d22:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
//	ubxNavPacket.ubxNavMsgData.ubxNavPayload.pAcc            =100;
//	ubxNavPacket.ubxNavMsgData.ubxNavPayload.tAcc            =100;
//	ubxNavPacket.ubxNavMsgData.ubxNavPayload.staticHoldThres =0;
//	ubxNavPacket.ubxNavMsgData.ubxNavPayload.dgpsTimeOut     =2;

	ubxNavPacket.ubxChecksum = calcChecksum((uint8_t *)&ubxNavPacket.ubxNavMsgData,sizeof(ubxNavPacket.ubxNavMsgData));
 8003d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	2128      	movs	r1, #40	; 0x28
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ffa4 	bl	8003c7c <calcChecksum>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	expectedRsp[0] = ubxNavPacket.ubxSync.sc1; // header
 8003d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d3e:	743b      	strb	r3, [r7, #16]
	expectedRsp[1] = ubxNavPacket.ubxSync.sc2; // header
 8003d40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003d44:	747b      	strb	r3, [r7, #17]
	expectedRsp[2] = 0x05; // class
 8003d46:	2305      	movs	r3, #5
 8003d48:	74bb      	strb	r3, [r7, #18]
	expectedRsp[3] = 0x01; // id
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	74fb      	strb	r3, [r7, #19]
	expectedRsp[4] = 0x02; // length
 8003d4e:	2302      	movs	r3, #2
 8003d50:	753b      	strb	r3, [r7, #20]
	expectedRsp[5] = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	757b      	strb	r3, [r7, #21]
	expectedRsp[6] = ubxNavPacket.ubxNavMsgData.messageClass; // ACK class
 8003d56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003d5a:	75bb      	strb	r3, [r7, #22]
	expectedRsp[7] =ubxNavPacket.ubxNavMsgData.messageId; // ACK id
 8003d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d60:	75fb      	strb	r3, [r7, #23]
	expectedRsp[8] = 0x32; // CK_A
 8003d62:	2332      	movs	r3, #50	; 0x32
 8003d64:	763b      	strb	r3, [r7, #24]
	expectedRsp[9] = 0x5b; // CK_B
 8003d66:	235b      	movs	r3, #91	; 0x5b
 8003d68:	767b      	strb	r3, [r7, #25]

	HAL_Status = HAL_UART_Transmit(huart,&resetCmd,sizeof(resetCmd),1000);
 8003d6a:	f107 010f 	add.w	r1, r7, #15
 8003d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d72:	2201      	movs	r2, #1
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f002 fec0 	bl	8006afa <HAL_UART_Transmit>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_Delay(1000);
 8003d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d84:	f000 f8f2 	bl	8003f6c <HAL_Delay>
	if(HAL_Status != HAL_OK)
 8003d88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <setGPS_DynamicModel6+0xbe>
	{
		gpsStatus = GPS_FAIL;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003d96:	e043      	b.n	8003e20 <setGPS_DynamicModel6+0x146>
	}
	else
	{
		HAL_Status = HAL_UART_Transmit(huart,(uint8_t *)&ubxNavPacket,sizeof(ubxNavPacket),1000);
 8003d98:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003da0:	222c      	movs	r2, #44	; 0x2c
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f002 fea9 	bl	8006afa <HAL_UART_Transmit>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if(HAL_Status != HAL_OK)
 8003dae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <setGPS_DynamicModel6+0xe4>
		{
			gpsStatus = GPS_FAIL;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003dbc:	e030      	b.n	8003e20 <setGPS_DynamicModel6+0x146>
		}
		else
		{
			HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 8003dbe:	f107 031a 	add.w	r3, r7, #26
 8003dc2:	f107 011c 	add.w	r1, r7, #28
 8003dc6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003dca:	9200      	str	r2, [sp, #0]
 8003dcc:	220a      	movs	r2, #10
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f002 ff25 	bl	8006c1e <HAL_UARTEx_ReceiveToIdle>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(received != sizeof(rspBuf))
 8003dda:	8b7b      	ldrh	r3, [r7, #26]
 8003ddc:	2b0a      	cmp	r3, #10
 8003dde:	d003      	beq.n	8003de8 <setGPS_DynamicModel6+0x10e>
			{
				gpsStatus = GPS_FAIL;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003de6:	e01b      	b.n	8003e20 <setGPS_DynamicModel6+0x146>
			}
			else
			{
				if(HAL_Status == HAL_OK)
 8003de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d117      	bne.n	8003e20 <setGPS_DynamicModel6+0x146>
				{
					for(int i=0;i<sizeof(rspBuf);i++)
 8003df0:	2300      	movs	r3, #0
 8003df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003df4:	e011      	b.n	8003e1a <setGPS_DynamicModel6+0x140>
				    {
						if(rspBuf[i] != expectedRsp[i])
 8003df6:	f107 021c 	add.w	r2, r7, #28
 8003dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dfc:	4413      	add	r3, r2
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	f107 0110 	add.w	r1, r7, #16
 8003e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e06:	440b      	add	r3, r1
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d002      	beq.n	8003e14 <setGPS_DynamicModel6+0x13a>
					    {
							gpsStatus = GPS_FAIL;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					for(int i=0;i<sizeof(rspBuf);i++)
 8003e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e16:	3301      	adds	r3, #1
 8003e18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	d9ea      	bls.n	8003df6 <setGPS_DynamicModel6+0x11c>
				}
			}
		}
	}

	return gpsStatus;
 8003e20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3760      	adds	r7, #96	; 0x60
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <disableNMEA>:

GPS_StatusTypeDef disableNMEA(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	GPS_StatusTypeDef gpsStatus  = GPS_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t disableSentenceList[] = {0x01,  //GLL
 8003e3a:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <disableNMEA+0xa0>)
 8003e3c:	f107 0318 	add.w	r3, r7, #24
 8003e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e44:	6018      	str	r0, [r3, #0]
 8003e46:	3304      	adds	r3, #4
 8003e48:	7019      	strb	r1, [r3, #0]
									0x05,   //VTG
									0x08};  //ZDA

	struct ubxCFGMSGPacketType ubxCFGMSGPacket;

	ubxCFGMSGPacket.ubxSync.sc1                   = 0xb5;
 8003e4a:	23b5      	movs	r3, #181	; 0xb5
 8003e4c:	733b      	strb	r3, [r7, #12]
	ubxCFGMSGPacket.ubxSync.sc2                   = 0x62;
 8003e4e:	2362      	movs	r3, #98	; 0x62
 8003e50:	737b      	strb	r3, [r7, #13]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.messageClass = 0x06;
 8003e52:	2306      	movs	r3, #6
 8003e54:	73bb      	strb	r3, [r7, #14]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.messageId    = 0x01;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.payloadSize  = sizeof(ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload);
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	823b      	strh	r3, [r7, #16]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload.msgClass = 0xF0;
 8003e5e:	23f0      	movs	r3, #240	; 0xf0
 8003e60:	74bb      	strb	r3, [r7, #18]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload.rate     = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	753b      	strb	r3, [r7, #20]
	for (int i =0; i < sizeof(disableSentenceList);i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	e026      	b.n	8003eba <disableNMEA+0x8e>
	{
		ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload.msgID = disableSentenceList[i];
 8003e6c:	f107 0218 	add.w	r2, r7, #24
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	74fb      	strb	r3, [r7, #19]
		ubxCFGMSGPacket.ubxChecksum = calcChecksum((uint8_t *)&ubxCFGMSGPacket.ubxCFGMSGMsgData,sizeof(ubxCFGMSGPacket.ubxCFGMSGMsgData));
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	2107      	movs	r1, #7
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fefb 	bl	8003c7c <calcChecksum>
 8003e86:	4603      	mov	r3, r0
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	757a      	strb	r2, [r7, #21]
 8003e8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003e92:	75bb      	strb	r3, [r7, #22]
		HAL_Status = HAL_UART_Transmit(huart,(uint8_t *)&ubxCFGMSGPacket,sizeof(ubxCFGMSGPacket),1000);
 8003e94:	f107 010c 	add.w	r1, r7, #12
 8003e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e9c:	220b      	movs	r2, #11
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f002 fe2b 	bl	8006afa <HAL_UART_Transmit>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	77fb      	strb	r3, [r7, #31]
		if(HAL_Status != HAL_OK)
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <disableNMEA+0x88>
		{
			gpsStatus = GPS_FAIL;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int i =0; i < sizeof(disableSentenceList);i++)
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	623b      	str	r3, [r7, #32]
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d9d5      	bls.n	8003e6c <disableNMEA+0x40>
		}

	}

	return gpsStatus;
 8003ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	08007228 	.word	0x08007228

08003ed0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ed0:	480c      	ldr	r0, [pc, #48]	; (8003f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ed2:	490d      	ldr	r1, [pc, #52]	; (8003f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed8:	e002      	b.n	8003ee0 <LoopCopyDataInit>

08003eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ede:	3304      	adds	r3, #4

08003ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee4:	d3f9      	bcc.n	8003eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ee8:	4c0a      	ldr	r4, [pc, #40]	; (8003f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eec:	e001      	b.n	8003ef2 <LoopFillZerobss>

08003eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef0:	3204      	adds	r2, #4

08003ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef4:	d3fb      	bcc.n	8003eee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ef6:	f7ff febb 	bl	8003c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003efa:	f003 f8b5 	bl	8007068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003efe:	f7fe fe0d 	bl	8002b1c <main>
  bx lr
 8003f02:	4770      	bx	lr
  ldr r0, =_sdata
 8003f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f08:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003f0c:	080072d4 	.word	0x080072d4
  ldr r2, =_sbss
 8003f10:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8003f14:	20000590 	.word	0x20000590

08003f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC1_IRQHandler>

08003f1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f1e:	2003      	movs	r0, #3
 8003f20:	f000 fd10 	bl	8004944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f24:	200f      	movs	r0, #15
 8003f26:	f7ff fdf7 	bl	8003b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f2a:	f7ff fc8f 	bl	800384c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_IncTick+0x1c>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_IncTick+0x20>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <HAL_IncTick+0x20>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	20000034 	.word	0x20000034
 8003f54:	2000058c 	.word	0x2000058c

08003f58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f5c:	4b02      	ldr	r3, [pc, #8]	; (8003f68 <HAL_GetTick+0x10>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	2000058c 	.word	0x2000058c

08003f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f74:	f7ff fff0 	bl	8003f58 <HAL_GetTick>
 8003f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d005      	beq.n	8003f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_Delay+0x44>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f92:	bf00      	nop
 8003f94:	f7ff ffe0 	bl	8003f58 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d8f7      	bhi.n	8003f94 <HAL_Delay+0x28>
  {
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000034 	.word	0x20000034

08003fb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e0be      	b.n	8004154 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fc5c 	bl	80038b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fbb7 	bl	800476c <ADC_ConversionStop_Disable>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8099 	bne.w	8004142 <HAL_ADC_Init+0x18e>
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 8095 	bne.w	8004142 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	f043 0202 	orr.w	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004034:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7b1b      	ldrb	r3, [r3, #12]
 800403a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800403c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404c:	d003      	beq.n	8004056 <HAL_ADC_Init+0xa2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d102      	bne.n	800405c <HAL_ADC_Init+0xa8>
 8004056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800405a:	e000      	b.n	800405e <HAL_ADC_Init+0xaa>
 800405c:	2300      	movs	r3, #0
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7d1b      	ldrb	r3, [r3, #20]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d119      	bne.n	80040a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7b1b      	ldrb	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	3b01      	subs	r3, #1
 800407a:	035a      	lsls	r2, r3, #13
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e00b      	b.n	80040a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_ADC_Init+0x1a8>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d0:	d003      	beq.n	80040da <HAL_ADC_Init+0x126>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d104      	bne.n	80040e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	3b01      	subs	r3, #1
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_ADC_Init+0x1ac>)
 8004100:	4013      	ands	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	d10b      	bne.n	8004120 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800411e:	e018      	b.n	8004152 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f023 0312 	bic.w	r3, r3, #18
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004140:	e007      	b.n	8004152 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004152:	7dfb      	ldrb	r3, [r7, #23]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	ffe1f7fd 	.word	0xffe1f7fd
 8004160:	ff1f0efe 	.word	0xff1f0efe

08004164 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_ADC_Start+0x1a>
 800417a:	2302      	movs	r3, #2
 800417c:	e062      	b.n	8004244 <HAL_ADC_Start+0xe0>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fa96 	bl	80046b8 <ADC_Enable>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d151      	bne.n	800423a <HAL_ADC_Start+0xd6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <HAL_ADC_Start+0x70>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <HAL_ADC_Start+0x8a>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f023 0206 	bic.w	r2, r3, #6
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80041ec:	e002      	b.n	80041f4 <HAL_ADC_Start+0x90>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0202 	mvn.w	r2, #2
 8004204:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004210:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004214:	d108      	bne.n	8004228 <HAL_ADC_Start+0xc4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	e00c      	b.n	8004242 <HAL_ADC_Start+0xde>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	e003      	b.n	8004242 <HAL_ADC_Start+0xde>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_ADC_Stop+0x1a>
 8004262:	2302      	movs	r3, #2
 8004264:	e01a      	b.n	800429c <HAL_ADC_Stop+0x50>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa7c 	bl	800476c <ADC_ConversionStop_Disable>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80042ba:	f7ff fe4d 	bl	8003f58 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0d3      	b.n	800448e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d131      	bne.n	8004358 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d12a      	bne.n	8004358 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004302:	e021      	b.n	8004348 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d01d      	beq.n	8004348 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_ADC_PollForConversion+0x7e>
 8004312:	f7ff fe21 	bl	8003f58 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d212      	bcs.n	8004348 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10b      	bne.n	8004348 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	f043 0204 	orr.w	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0a2      	b.n	800448e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0d6      	beq.n	8004304 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004356:	e070      	b.n	800443a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004358:	4b4f      	ldr	r3, [pc, #316]	; (8004498 <HAL_ADC_PollForConversion+0x1f4>)
 800435a:	681c      	ldr	r4, [r3, #0]
 800435c:	2002      	movs	r0, #2
 800435e:	f001 f99b 	bl	8005698 <HAL_RCCEx_GetPeriphCLKFreq>
 8004362:	4603      	mov	r3, r0
 8004364:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6919      	ldr	r1, [r3, #16]
 800436e:	4b4b      	ldr	r3, [pc, #300]	; (800449c <HAL_ADC_PollForConversion+0x1f8>)
 8004370:	400b      	ands	r3, r1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d118      	bne.n	80043a8 <HAL_ADC_PollForConversion+0x104>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68d9      	ldr	r1, [r3, #12]
 800437c:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <HAL_ADC_PollForConversion+0x1fc>)
 800437e:	400b      	ands	r3, r1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d111      	bne.n	80043a8 <HAL_ADC_PollForConversion+0x104>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <HAL_ADC_PollForConversion+0x200>)
 800438c:	400b      	ands	r3, r1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <HAL_ADC_PollForConversion+0x100>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68d9      	ldr	r1, [r3, #12]
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_ADC_PollForConversion+0x204>)
 800439a:	400b      	ands	r3, r1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_ADC_PollForConversion+0x100>
 80043a0:	2314      	movs	r3, #20
 80043a2:	e020      	b.n	80043e6 <HAL_ADC_PollForConversion+0x142>
 80043a4:	2329      	movs	r3, #41	; 0x29
 80043a6:	e01e      	b.n	80043e6 <HAL_ADC_PollForConversion+0x142>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6919      	ldr	r1, [r3, #16]
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_ADC_PollForConversion+0x200>)
 80043b0:	400b      	ands	r3, r1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_ADC_PollForConversion+0x120>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <HAL_ADC_PollForConversion+0x204>)
 80043be:	400b      	ands	r3, r1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_ADC_PollForConversion+0x13c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6919      	ldr	r1, [r3, #16]
 80043ca:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_ADC_PollForConversion+0x208>)
 80043cc:	400b      	ands	r3, r1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <HAL_ADC_PollForConversion+0x140>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68d9      	ldr	r1, [r3, #12]
 80043d8:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_ADC_PollForConversion+0x208>)
 80043da:	400b      	ands	r3, r1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_ADC_PollForConversion+0x140>
 80043e0:	2354      	movs	r3, #84	; 0x54
 80043e2:	e000      	b.n	80043e6 <HAL_ADC_PollForConversion+0x142>
 80043e4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80043ec:	e021      	b.n	8004432 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d01a      	beq.n	800442c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_ADC_PollForConversion+0x168>
 80043fc:	f7ff fdac 	bl	8003f58 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d20f      	bcs.n	800442c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	429a      	cmp	r2, r3
 8004412:	d90b      	bls.n	800442c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e030      	b.n	800448e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d8d9      	bhi.n	80043ee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f06f 0212 	mvn.w	r2, #18
 8004442:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800445a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800445e:	d115      	bne.n	800448c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004464:	2b00      	cmp	r3, #0
 8004466:	d111      	bne.n	800448c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd90      	pop	{r4, r7, pc}
 8004496:	bf00      	nop
 8004498:	2000002c 	.word	0x2000002c
 800449c:	24924924 	.word	0x24924924
 80044a0:	00924924 	.word	0x00924924
 80044a4:	12492492 	.word	0x12492492
 80044a8:	00492492 	.word	0x00492492
 80044ac:	00249249 	.word	0x00249249

080044b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x20>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0dc      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x1da>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	d81c      	bhi.n	8004532 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	3b05      	subs	r3, #5
 800450a:	221f      	movs	r2, #31
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	4019      	ands	r1, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	3b05      	subs	r3, #5
 8004524:	fa00 f203 	lsl.w	r2, r0, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	635a      	str	r2, [r3, #52]	; 0x34
 8004530:	e03c      	b.n	80045ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d81c      	bhi.n	8004574 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	3b23      	subs	r3, #35	; 0x23
 800454c:	221f      	movs	r2, #31
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	4019      	ands	r1, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	3b23      	subs	r3, #35	; 0x23
 8004566:	fa00 f203 	lsl.w	r2, r0, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
 8004572:	e01b      	b.n	80045ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	3b41      	subs	r3, #65	; 0x41
 8004586:	221f      	movs	r2, #31
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	4019      	ands	r1, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	3b41      	subs	r3, #65	; 0x41
 80045a0:	fa00 f203 	lsl.w	r2, r0, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b09      	cmp	r3, #9
 80045b2:	d91c      	bls.n	80045ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	3b1e      	subs	r3, #30
 80045c6:	2207      	movs	r2, #7
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	4019      	ands	r1, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6898      	ldr	r0, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	3b1e      	subs	r3, #30
 80045e0:	fa00 f203 	lsl.w	r2, r0, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e019      	b.n	8004622 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6919      	ldr	r1, [r3, #16]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	2207      	movs	r2, #7
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	4019      	ands	r1, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6898      	ldr	r0, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	fa00 f203 	lsl.w	r2, r0, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b10      	cmp	r3, #16
 8004628:	d003      	beq.n	8004632 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800462e:	2b11      	cmp	r3, #17
 8004630:	d132      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_ADC_ConfigChannel+0x1e4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d125      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d126      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004658:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b10      	cmp	r3, #16
 8004660:	d11a      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	0c9a      	lsrs	r2, r3, #18
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004678:	e002      	b.n	8004680 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3b01      	subs	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f9      	bne.n	800467a <HAL_ADC_ConfigChannel+0x1b2>
 8004686:	e007      	b.n	8004698 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	40012400 	.word	0x40012400
 80046b0:	2000002c 	.word	0x2000002c
 80046b4:	431bde83 	.word	0x431bde83

080046b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d040      	beq.n	8004758 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0201 	orr.w	r2, r2, #1
 80046e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <ADC_Enable+0xac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <ADC_Enable+0xb0>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	0c9b      	lsrs	r3, r3, #18
 80046f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046f4:	e002      	b.n	80046fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f9      	bne.n	80046f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004702:	f7ff fc29 	bl	8003f58 <HAL_GetTick>
 8004706:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004708:	e01f      	b.n	800474a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800470a:	f7ff fc25 	bl	8003f58 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d918      	bls.n	800474a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d011      	beq.n	800474a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	f043 0210 	orr.w	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e007      	b.n	800475a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d1d8      	bne.n	800470a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	2000002c 	.word	0x2000002c
 8004768:	431bde83 	.word	0x431bde83

0800476c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d12e      	bne.n	80047e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004796:	f7ff fbdf 	bl	8003f58 <HAL_GetTick>
 800479a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800479c:	e01b      	b.n	80047d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800479e:	f7ff fbdb 	bl	8003f58 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d914      	bls.n	80047d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10d      	bne.n	80047d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f043 0210 	orr.w	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e007      	b.n	80047e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d0dc      	beq.n	800479e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800481c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	60d3      	str	r3, [r2, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <__NVIC_GetPriorityGrouping+0x18>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f003 0307 	and.w	r3, r3, #7
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	2b00      	cmp	r3, #0
 8004864:	db0b      	blt.n	800487e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4906      	ldr	r1, [pc, #24]	; (8004888 <__NVIC_EnableIRQ+0x34>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2001      	movs	r0, #1
 8004876:	fa00 f202 	lsl.w	r2, r0, r2
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	e000e100 	.word	0xe000e100

0800488c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	6039      	str	r1, [r7, #0]
 8004896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489c:	2b00      	cmp	r3, #0
 800489e:	db0a      	blt.n	80048b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	490c      	ldr	r1, [pc, #48]	; (80048d8 <__NVIC_SetPriority+0x4c>)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	0112      	lsls	r2, r2, #4
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	440b      	add	r3, r1
 80048b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b4:	e00a      	b.n	80048cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4908      	ldr	r1, [pc, #32]	; (80048dc <__NVIC_SetPriority+0x50>)
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	3b04      	subs	r3, #4
 80048c4:	0112      	lsls	r2, r2, #4
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	440b      	add	r3, r1
 80048ca:	761a      	strb	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e100 	.word	0xe000e100
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f1c3 0307 	rsb	r3, r3, #7
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	bf28      	it	cs
 80048fe:	2304      	movcs	r3, #4
 8004900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3304      	adds	r3, #4
 8004906:	2b06      	cmp	r3, #6
 8004908:	d902      	bls.n	8004910 <NVIC_EncodePriority+0x30>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3b03      	subs	r3, #3
 800490e:	e000      	b.n	8004912 <NVIC_EncodePriority+0x32>
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	f04f 32ff 	mov.w	r2, #4294967295
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	401a      	ands	r2, r3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004928:	f04f 31ff 	mov.w	r1, #4294967295
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	43d9      	mvns	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004938:	4313      	orrs	r3, r2
         );
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff4f 	bl	80047f0 <__NVIC_SetPriorityGrouping>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	4603      	mov	r3, r0
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800496c:	f7ff ff64 	bl	8004838 <__NVIC_GetPriorityGrouping>
 8004970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7ff ffb2 	bl	80048e0 <NVIC_EncodePriority>
 800497c:	4602      	mov	r2, r0
 800497e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff81 	bl	800488c <__NVIC_SetPriority>
}
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	4603      	mov	r3, r0
 800499a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800499c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff ff57 	bl	8004854 <__NVIC_EnableIRQ>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b08b      	sub	sp, #44	; 0x2c
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049c2:	e169      	b.n	8004c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049c4:	2201      	movs	r2, #1
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	429a      	cmp	r2, r3
 80049de:	f040 8158 	bne.w	8004c92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4a9a      	ldr	r2, [pc, #616]	; (8004c50 <HAL_GPIO_Init+0x2a0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d05e      	beq.n	8004aaa <HAL_GPIO_Init+0xfa>
 80049ec:	4a98      	ldr	r2, [pc, #608]	; (8004c50 <HAL_GPIO_Init+0x2a0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d875      	bhi.n	8004ade <HAL_GPIO_Init+0x12e>
 80049f2:	4a98      	ldr	r2, [pc, #608]	; (8004c54 <HAL_GPIO_Init+0x2a4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d058      	beq.n	8004aaa <HAL_GPIO_Init+0xfa>
 80049f8:	4a96      	ldr	r2, [pc, #600]	; (8004c54 <HAL_GPIO_Init+0x2a4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d86f      	bhi.n	8004ade <HAL_GPIO_Init+0x12e>
 80049fe:	4a96      	ldr	r2, [pc, #600]	; (8004c58 <HAL_GPIO_Init+0x2a8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d052      	beq.n	8004aaa <HAL_GPIO_Init+0xfa>
 8004a04:	4a94      	ldr	r2, [pc, #592]	; (8004c58 <HAL_GPIO_Init+0x2a8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d869      	bhi.n	8004ade <HAL_GPIO_Init+0x12e>
 8004a0a:	4a94      	ldr	r2, [pc, #592]	; (8004c5c <HAL_GPIO_Init+0x2ac>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d04c      	beq.n	8004aaa <HAL_GPIO_Init+0xfa>
 8004a10:	4a92      	ldr	r2, [pc, #584]	; (8004c5c <HAL_GPIO_Init+0x2ac>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d863      	bhi.n	8004ade <HAL_GPIO_Init+0x12e>
 8004a16:	4a92      	ldr	r2, [pc, #584]	; (8004c60 <HAL_GPIO_Init+0x2b0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d046      	beq.n	8004aaa <HAL_GPIO_Init+0xfa>
 8004a1c:	4a90      	ldr	r2, [pc, #576]	; (8004c60 <HAL_GPIO_Init+0x2b0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d85d      	bhi.n	8004ade <HAL_GPIO_Init+0x12e>
 8004a22:	2b12      	cmp	r3, #18
 8004a24:	d82a      	bhi.n	8004a7c <HAL_GPIO_Init+0xcc>
 8004a26:	2b12      	cmp	r3, #18
 8004a28:	d859      	bhi.n	8004ade <HAL_GPIO_Init+0x12e>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <HAL_GPIO_Init+0x80>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004aab 	.word	0x08004aab
 8004a34:	08004a85 	.word	0x08004a85
 8004a38:	08004a97 	.word	0x08004a97
 8004a3c:	08004ad9 	.word	0x08004ad9
 8004a40:	08004adf 	.word	0x08004adf
 8004a44:	08004adf 	.word	0x08004adf
 8004a48:	08004adf 	.word	0x08004adf
 8004a4c:	08004adf 	.word	0x08004adf
 8004a50:	08004adf 	.word	0x08004adf
 8004a54:	08004adf 	.word	0x08004adf
 8004a58:	08004adf 	.word	0x08004adf
 8004a5c:	08004adf 	.word	0x08004adf
 8004a60:	08004adf 	.word	0x08004adf
 8004a64:	08004adf 	.word	0x08004adf
 8004a68:	08004adf 	.word	0x08004adf
 8004a6c:	08004adf 	.word	0x08004adf
 8004a70:	08004adf 	.word	0x08004adf
 8004a74:	08004a8d 	.word	0x08004a8d
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	4a79      	ldr	r2, [pc, #484]	; (8004c64 <HAL_GPIO_Init+0x2b4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a82:	e02c      	b.n	8004ade <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	623b      	str	r3, [r7, #32]
          break;
 8004a8a:	e029      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	3304      	adds	r3, #4
 8004a92:	623b      	str	r3, [r7, #32]
          break;
 8004a94:	e024      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	623b      	str	r3, [r7, #32]
          break;
 8004a9e:	e01f      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	623b      	str	r3, [r7, #32]
          break;
 8004aa8:	e01a      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	623b      	str	r3, [r7, #32]
          break;
 8004ab6:	e013      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	611a      	str	r2, [r3, #16]
          break;
 8004aca:	e009      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004acc:	2308      	movs	r3, #8
 8004ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	615a      	str	r2, [r3, #20]
          break;
 8004ad6:	e003      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	623b      	str	r3, [r7, #32]
          break;
 8004adc:	e000      	b.n	8004ae0 <HAL_GPIO_Init+0x130>
          break;
 8004ade:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2bff      	cmp	r3, #255	; 0xff
 8004ae4:	d801      	bhi.n	8004aea <HAL_GPIO_Init+0x13a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	e001      	b.n	8004aee <HAL_GPIO_Init+0x13e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2bff      	cmp	r3, #255	; 0xff
 8004af4:	d802      	bhi.n	8004afc <HAL_GPIO_Init+0x14c>
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	e002      	b.n	8004b02 <HAL_GPIO_Init+0x152>
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	3b08      	subs	r3, #8
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	210f      	movs	r1, #15
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	401a      	ands	r2, r3
 8004b14:	6a39      	ldr	r1, [r7, #32]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80b1 	beq.w	8004c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b30:	4b4d      	ldr	r3, [pc, #308]	; (8004c68 <HAL_GPIO_Init+0x2b8>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	4a4c      	ldr	r2, [pc, #304]	; (8004c68 <HAL_GPIO_Init+0x2b8>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6193      	str	r3, [r2, #24]
 8004b3c:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <HAL_GPIO_Init+0x2b8>)
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b48:	4a48      	ldr	r2, [pc, #288]	; (8004c6c <HAL_GPIO_Init+0x2bc>)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	3302      	adds	r3, #2
 8004b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	220f      	movs	r2, #15
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a40      	ldr	r2, [pc, #256]	; (8004c70 <HAL_GPIO_Init+0x2c0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d013      	beq.n	8004b9c <HAL_GPIO_Init+0x1ec>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a3f      	ldr	r2, [pc, #252]	; (8004c74 <HAL_GPIO_Init+0x2c4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00d      	beq.n	8004b98 <HAL_GPIO_Init+0x1e8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a3e      	ldr	r2, [pc, #248]	; (8004c78 <HAL_GPIO_Init+0x2c8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <HAL_GPIO_Init+0x1e4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <HAL_GPIO_Init+0x2cc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d101      	bne.n	8004b90 <HAL_GPIO_Init+0x1e0>
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e006      	b.n	8004b9e <HAL_GPIO_Init+0x1ee>
 8004b90:	2304      	movs	r3, #4
 8004b92:	e004      	b.n	8004b9e <HAL_GPIO_Init+0x1ee>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e002      	b.n	8004b9e <HAL_GPIO_Init+0x1ee>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_GPIO_Init+0x1ee>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba0:	f002 0203 	and.w	r2, r2, #3
 8004ba4:	0092      	lsls	r2, r2, #2
 8004ba6:	4093      	lsls	r3, r2
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bae:	492f      	ldr	r1, [pc, #188]	; (8004c6c <HAL_GPIO_Init+0x2bc>)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	492c      	ldr	r1, [pc, #176]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]
 8004bd4:	e006      	b.n	8004be4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	4928      	ldr	r1, [pc, #160]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bf0:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	4922      	ldr	r1, [pc, #136]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	e006      	b.n	8004c0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bfe:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	491e      	ldr	r1, [pc, #120]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	4918      	ldr	r1, [pc, #96]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]
 8004c24:	e006      	b.n	8004c34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c26:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	4914      	ldr	r1, [pc, #80]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d021      	beq.n	8004c84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c40:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	490e      	ldr	r1, [pc, #56]	; (8004c80 <HAL_GPIO_Init+0x2d0>)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60cb      	str	r3, [r1, #12]
 8004c4c:	e021      	b.n	8004c92 <HAL_GPIO_Init+0x2e2>
 8004c4e:	bf00      	nop
 8004c50:	10320000 	.word	0x10320000
 8004c54:	10310000 	.word	0x10310000
 8004c58:	10220000 	.word	0x10220000
 8004c5c:	10210000 	.word	0x10210000
 8004c60:	10120000 	.word	0x10120000
 8004c64:	10110000 	.word	0x10110000
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40010800 	.word	0x40010800
 8004c74:	40010c00 	.word	0x40010c00
 8004c78:	40011000 	.word	0x40011000
 8004c7c:	40011400 	.word	0x40011400
 8004c80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_GPIO_Init+0x304>)
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	4909      	ldr	r1, [pc, #36]	; (8004cb4 <HAL_GPIO_Init+0x304>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	3301      	adds	r3, #1
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f47f ae8e 	bne.w	80049c4 <HAL_GPIO_Init+0x14>
  }
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	372c      	adds	r7, #44	; 0x2c
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	40010400 	.word	0x40010400

08004cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cc8:	787b      	ldrb	r3, [r7, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cd4:	e003      	b.n	8004cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	041a      	lsls	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	041a      	lsls	r2, r3, #16
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	43d9      	mvns	r1, r3
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	400b      	ands	r3, r1
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	611a      	str	r2, [r3, #16]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr
	...

08004d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e26c      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8087 	beq.w	8004e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d3c:	4b92      	ldr	r3, [pc, #584]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d00c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d48:	4b8f      	ldr	r3, [pc, #572]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 030c 	and.w	r3, r3, #12
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d112      	bne.n	8004d7a <HAL_RCC_OscConfig+0x5e>
 8004d54:	4b8c      	ldr	r3, [pc, #560]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d60:	d10b      	bne.n	8004d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d62:	4b89      	ldr	r3, [pc, #548]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d06c      	beq.n	8004e48 <HAL_RCC_OscConfig+0x12c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d168      	bne.n	8004e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e246      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d82:	d106      	bne.n	8004d92 <HAL_RCC_OscConfig+0x76>
 8004d84:	4b80      	ldr	r3, [pc, #512]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a7f      	ldr	r2, [pc, #508]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e02e      	b.n	8004df0 <HAL_RCC_OscConfig+0xd4>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCC_OscConfig+0x98>
 8004d9a:	4b7b      	ldr	r3, [pc, #492]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7a      	ldr	r2, [pc, #488]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4b78      	ldr	r3, [pc, #480]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a77      	ldr	r2, [pc, #476]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e01d      	b.n	8004df0 <HAL_RCC_OscConfig+0xd4>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0xbc>
 8004dbe:	4b72      	ldr	r3, [pc, #456]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a71      	ldr	r2, [pc, #452]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b6f      	ldr	r3, [pc, #444]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6e      	ldr	r2, [pc, #440]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0xd4>
 8004dd8:	4b6b      	ldr	r3, [pc, #428]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a6a      	ldr	r2, [pc, #424]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b68      	ldr	r3, [pc, #416]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a67      	ldr	r2, [pc, #412]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7ff f8ae 	bl	8003f58 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e00:	f7ff f8aa 	bl	8003f58 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e1fa      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b5d      	ldr	r3, [pc, #372]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0xe4>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7ff f89a 	bl	8003f58 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7ff f896 	bl	8003f58 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1e6      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3a:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x10c>
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d063      	beq.n	8004f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e56:	4b4c      	ldr	r3, [pc, #304]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e62:	4b49      	ldr	r3, [pc, #292]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x18c>
 8004e6e:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d116      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_RCC_OscConfig+0x176>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e1ba      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4939      	ldr	r1, [pc, #228]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	e03a      	b.n	8004f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb0:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <HAL_RCC_OscConfig+0x270>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb6:	f7ff f84f 	bl	8003f58 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7ff f84b 	bl	8003f58 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e19b      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4927      	ldr	r1, [pc, #156]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]
 8004ef0:	e015      	b.n	8004f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef2:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <HAL_RCC_OscConfig+0x270>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7ff f82e 	bl	8003f58 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f00:	f7ff f82a 	bl	8003f58 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e17a      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d03a      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d019      	beq.n	8004f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f32:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <HAL_RCC_OscConfig+0x274>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f38:	f7ff f80e 	bl	8003f58 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f40:	f7ff f80a 	bl	8003f58 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e15a      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f5e:	2001      	movs	r0, #1
 8004f60:	f000 fad6 	bl	8005510 <RCC_Delay>
 8004f64:	e01c      	b.n	8004fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCC_OscConfig+0x274>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f6c:	f7fe fff4 	bl	8003f58 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f72:	e00f      	b.n	8004f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f74:	f7fe fff0 	bl	8003f58 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d908      	bls.n	8004f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e140      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	42420000 	.word	0x42420000
 8004f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	4b9e      	ldr	r3, [pc, #632]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e9      	bne.n	8004f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80a6 	beq.w	80050fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb2:	4b97      	ldr	r3, [pc, #604]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	4b94      	ldr	r3, [pc, #592]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4a93      	ldr	r2, [pc, #588]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	61d3      	str	r3, [r2, #28]
 8004fca:	4b91      	ldr	r3, [pc, #580]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fda:	4b8e      	ldr	r3, [pc, #568]	; (8005214 <HAL_RCC_OscConfig+0x4f8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d118      	bne.n	8005018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe6:	4b8b      	ldr	r3, [pc, #556]	; (8005214 <HAL_RCC_OscConfig+0x4f8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a8a      	ldr	r2, [pc, #552]	; (8005214 <HAL_RCC_OscConfig+0x4f8>)
 8004fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff2:	f7fe ffb1 	bl	8003f58 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffa:	f7fe ffad 	bl	8003f58 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b64      	cmp	r3, #100	; 0x64
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e0fd      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500c:	4b81      	ldr	r3, [pc, #516]	; (8005214 <HAL_RCC_OscConfig+0x4f8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <HAL_RCC_OscConfig+0x312>
 8005020:	4b7b      	ldr	r3, [pc, #492]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	4a7a      	ldr	r2, [pc, #488]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	6213      	str	r3, [r2, #32]
 800502c:	e02d      	b.n	800508a <HAL_RCC_OscConfig+0x36e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0x334>
 8005036:	4b76      	ldr	r3, [pc, #472]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	4a75      	ldr	r2, [pc, #468]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	6213      	str	r3, [r2, #32]
 8005042:	4b73      	ldr	r3, [pc, #460]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4a72      	ldr	r2, [pc, #456]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005048:	f023 0304 	bic.w	r3, r3, #4
 800504c:	6213      	str	r3, [r2, #32]
 800504e:	e01c      	b.n	800508a <HAL_RCC_OscConfig+0x36e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b05      	cmp	r3, #5
 8005056:	d10c      	bne.n	8005072 <HAL_RCC_OscConfig+0x356>
 8005058:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	4a6c      	ldr	r2, [pc, #432]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 800505e:	f043 0304 	orr.w	r3, r3, #4
 8005062:	6213      	str	r3, [r2, #32]
 8005064:	4b6a      	ldr	r3, [pc, #424]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4a69      	ldr	r2, [pc, #420]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6213      	str	r3, [r2, #32]
 8005070:	e00b      	b.n	800508a <HAL_RCC_OscConfig+0x36e>
 8005072:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4a66      	ldr	r2, [pc, #408]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	6213      	str	r3, [r2, #32]
 800507e:	4b64      	ldr	r3, [pc, #400]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4a63      	ldr	r2, [pc, #396]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d015      	beq.n	80050be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005092:	f7fe ff61 	bl	8003f58 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005098:	e00a      	b.n	80050b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fe ff5d 	bl	8003f58 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e0ab      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b0:	4b57      	ldr	r3, [pc, #348]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ee      	beq.n	800509a <HAL_RCC_OscConfig+0x37e>
 80050bc:	e014      	b.n	80050e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050be:	f7fe ff4b 	bl	8003f58 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7fe ff47 	bl	8003f58 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e095      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050dc:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ee      	bne.n	80050c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ee:	4b48      	ldr	r3, [pc, #288]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	4a47      	ldr	r2, [pc, #284]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 80050f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8081 	beq.w	8005206 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005104:	4b42      	ldr	r3, [pc, #264]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b08      	cmp	r3, #8
 800510e:	d061      	beq.n	80051d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d146      	bne.n	80051a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005118:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <HAL_RCC_OscConfig+0x4fc>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511e:	f7fe ff1b 	bl	8003f58 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005126:	f7fe ff17 	bl	8003f58 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e067      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005138:	4b35      	ldr	r3, [pc, #212]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514c:	d108      	bne.n	8005160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800514e:	4b30      	ldr	r3, [pc, #192]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	f023 020f 	bic.w	r2, r3, #15
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	492d      	ldr	r1, [pc, #180]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 800515c:	4313      	orrs	r3, r2
 800515e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005160:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a19      	ldr	r1, [r3, #32]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	430b      	orrs	r3, r1
 8005172:	4927      	ldr	r1, [pc, #156]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <HAL_RCC_OscConfig+0x4fc>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517e:	f7fe feeb 	bl	8003f58 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005186:	f7fe fee7 	bl	8003f58 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e037      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCC_OscConfig+0x46a>
 80051a4:	e02f      	b.n	8005206 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a6:	4b1c      	ldr	r3, [pc, #112]	; (8005218 <HAL_RCC_OscConfig+0x4fc>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fe fed4 	bl	8003f58 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe fed0 	bl	8003f58 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e020      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x498>
 80051d2:	e018      	b.n	8005206 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e013      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_OscConfig+0x4f4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40021000 	.word	0x40021000
 8005214:	40007000 	.word	0x40007000
 8005218:	42420060 	.word	0x42420060

0800521c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0a0      	b.n	8005372 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005248:	4b4c      	ldr	r3, [pc, #304]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a4b      	ldr	r2, [pc, #300]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 800524e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005260:	4b46      	ldr	r3, [pc, #280]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4a45      	ldr	r2, [pc, #276]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 8005266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800526a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b43      	ldr	r3, [pc, #268]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4940      	ldr	r1, [pc, #256]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d040      	beq.n	800530c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	4b3a      	ldr	r3, [pc, #232]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d115      	bne.n	80052ca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e067      	b.n	8005372 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052aa:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e05b      	b.n	8005372 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e053      	b.n	8005372 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ca:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f023 0203 	bic.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4929      	ldr	r1, [pc, #164]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052dc:	f7fe fe3c 	bl	8003f58 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e2:	e00a      	b.n	80052fa <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e4:	f7fe fe38 	bl	8003f58 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e03b      	b.n	8005372 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f003 020c 	and.w	r2, r3, #12
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	429a      	cmp	r2, r3
 800530a:	d1eb      	bne.n	80052e4 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005318:	4b18      	ldr	r3, [pc, #96]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4915      	ldr	r1, [pc, #84]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	490d      	ldr	r1, [pc, #52]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 8005346:	4313      	orrs	r3, r2
 8005348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534a:	f000 f81f 	bl	800538c <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <HAL_RCC_ClockConfig+0x160>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	4909      	ldr	r1, [pc, #36]	; (8005380 <HAL_RCC_ClockConfig+0x164>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	4a08      	ldr	r2, [pc, #32]	; (8005384 <HAL_RCC_ClockConfig+0x168>)
 8005364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005366:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_RCC_ClockConfig+0x16c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fbd4 	bl	8003b18 <HAL_InitTick>

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	08007250 	.word	0x08007250
 8005384:	2000002c 	.word	0x2000002c
 8005388:	20000030 	.word	0x20000030

0800538c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800538c:	b490      	push	{r4, r7}
 800538e:	b08e      	sub	sp, #56	; 0x38
 8005390:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005392:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005394:	f107 0414 	add.w	r4, r7, #20
 8005398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800539a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a0:	1d3c      	adds	r4, r7, #4
 80053a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ac:	2300      	movs	r3, #0
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b0:	2300      	movs	r3, #0
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
 80053b4:	2300      	movs	r3, #0
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053bc:	4b22      	ldr	r3, [pc, #136]	; (8005448 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	f003 030c 	and.w	r3, r3, #12
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d002      	beq.n	80053d2 <HAL_RCC_GetSysClockFreq+0x46>
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d003      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x4c>
 80053d0:	e02c      	b.n	800542c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053d2:	4b1e      	ldr	r3, [pc, #120]	; (800544c <HAL_RCC_GetSysClockFreq+0xc0>)
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053d6:	e02c      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	0c9b      	lsrs	r3, r3, #18
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053e4:	4413      	add	r3, r2
 80053e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d012      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005402:	4413      	add	r3, r2
 8005404:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	4a0f      	ldr	r2, [pc, #60]	; (800544c <HAL_RCC_GetSysClockFreq+0xc0>)
 800540e:	fb02 f203 	mul.w	r2, r2, r3
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
 800541a:	e004      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800542a:	e002      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <HAL_RCC_GetSysClockFreq+0xc0>)
 800542e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005434:	4618      	mov	r0, r3
 8005436:	3738      	adds	r7, #56	; 0x38
 8005438:	46bd      	mov	sp, r7
 800543a:	bc90      	pop	{r4, r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	08007230 	.word	0x08007230
 8005444:	08007240 	.word	0x08007240
 8005448:	40021000 	.word	0x40021000
 800544c:	007a1200 	.word	0x007a1200
 8005450:	003d0900 	.word	0x003d0900

08005454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005458:	4b02      	ldr	r3, [pc, #8]	; (8005464 <HAL_RCC_GetHCLKFreq+0x10>)
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	2000002c 	.word	0x2000002c

08005468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800546c:	f7ff fff2 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <HAL_RCC_GetPCLK1Freq+0x24>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	08007260 	.word	0x08007260

08005490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005494:	f7ff ffde 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	0adb      	lsrs	r3, r3, #11
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4903      	ldr	r1, [pc, #12]	; (80054b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40021000 	.word	0x40021000
 80054b4:	08007260 	.word	0x08007260

080054b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	220f      	movs	r2, #15
 80054c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <HAL_RCC_GetClockConfig+0x54>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0203 	and.w	r2, r3, #3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <HAL_RCC_GetClockConfig+0x54>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <HAL_RCC_GetClockConfig+0x54>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80054ec:	4b07      	ldr	r3, [pc, #28]	; (800550c <HAL_RCC_GetClockConfig+0x54>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	08db      	lsrs	r3, r3, #3
 80054f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
#endif
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000

08005510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <RCC_Delay+0x34>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <RCC_Delay+0x38>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	0a5b      	lsrs	r3, r3, #9
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800552c:	bf00      	nop
  }
  while (Delay --);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1e5a      	subs	r2, r3, #1
 8005532:	60fa      	str	r2, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1f9      	bne.n	800552c <RCC_Delay+0x1c>
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	2000002c 	.word	0x2000002c
 8005548:	10624dd3 	.word	0x10624dd3

0800554c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d07d      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005568:	2300      	movs	r3, #0
 800556a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556c:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10d      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005578:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4a43      	ldr	r2, [pc, #268]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800557e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005582:	61d3      	str	r3, [r2, #28]
 8005584:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d118      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055a0:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a3a      	ldr	r2, [pc, #232]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80055a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ac:	f7fe fcd4 	bl	8003f58 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	e008      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b4:	f7fe fcd0 	bl	8003f58 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e05e      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	4b32      	ldr	r3, [pc, #200]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055d2:	4b2e      	ldr	r3, [pc, #184]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d02e      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d027      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055f0:	4b26      	ldr	r3, [pc, #152]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005600:	4b24      	ldr	r3, [pc, #144]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005606:	4a21      	ldr	r2, [pc, #132]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d014      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005616:	f7fe fc9f 	bl	8003f58 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	e00a      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fe fc9b 	bl	8003f58 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e027      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	4b15      	ldr	r3, [pc, #84]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ee      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	490f      	ldr	r1, [pc, #60]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800564e:	4313      	orrs	r3, r2
 8005650:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d105      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005658:	4b0c      	ldr	r3, [pc, #48]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4a0b      	ldr	r2, [pc, #44]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800565e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005662:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4903      	ldr	r1, [pc, #12]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800567e:	4313      	orrs	r3, r2
 8005680:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000
 8005690:	40007000 	.word	0x40007000
 8005694:	42420440 	.word	0x42420440

08005698 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d003      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d033      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80056b4:	e041      	b.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      temp_reg = RCC->BDCR;
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c6:	d108      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        frequency = LSE_VALUE;
 80056d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e01f      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e4:	d109      	bne.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80056e6:	4b17      	ldr	r3, [pc, #92]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = LSI_VALUE;
 80056f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	e00f      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005704:	d118      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8005706:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d012      	beq.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        frequency = HSE_VALUE / 128U;
 8005712:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005716:	60fb      	str	r3, [r7, #12]
      break;
 8005718:	e00e      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800571a:	e00d      	b.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800571c:	f7ff feb8 	bl	8005490 <HAL_RCC_GetPCLK2Freq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	0b9b      	lsrs	r3, r3, #14
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	3301      	adds	r3, #1
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	60fb      	str	r3, [r7, #12]
      break;
 8005736:	e000      	b.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      break;
 8005738:	bf00      	nop
    }
  }
  return (frequency);
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000

08005748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06e      	b.n	8005838 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d108      	bne.n	8005774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576a:	d009      	beq.n	8005780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
 8005772:	e005      	b.n	8005780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe f8c4 	bl	8003928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	ea42 0103 	orr.w	r1, r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	0c1a      	lsrs	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f002 0204 	and.w	r2, r2, #4
 8005826:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_SPI_Transmit+0x22>
 800585e:	2302      	movs	r3, #2
 8005860:	e126      	b.n	8005ab0 <HAL_SPI_Transmit+0x270>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800586a:	f7fe fb75 	bl	8003f58 <HAL_GetTick>
 800586e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d002      	beq.n	8005886 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005884:	e10b      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x52>
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005896:	e102      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2203      	movs	r2, #3
 800589c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058de:	d10f      	bne.n	8005900 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d007      	beq.n	800591e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005926:	d14b      	bne.n	80059c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_SPI_Transmit+0xf6>
 8005930:	8afb      	ldrh	r3, [r7, #22]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d13e      	bne.n	80059b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	1c9a      	adds	r2, r3, #2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800595a:	e02b      	b.n	80059b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d112      	bne.n	8005990 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	86da      	strh	r2, [r3, #54]	; 0x36
 800598e:	e011      	b.n	80059b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005990:	f7fe fae2 	bl	8003f58 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d803      	bhi.n	80059a8 <HAL_SPI_Transmit+0x168>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d102      	bne.n	80059ae <HAL_SPI_Transmit+0x16e>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059b2:	e074      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1ce      	bne.n	800595c <HAL_SPI_Transmit+0x11c>
 80059be:	e04c      	b.n	8005a5a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_SPI_Transmit+0x18e>
 80059c8:	8afb      	ldrh	r3, [r7, #22]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d140      	bne.n	8005a50 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059f4:	e02c      	b.n	8005a50 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d113      	bne.n	8005a2c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a2a:	e011      	b.n	8005a50 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2c:	f7fe fa94 	bl	8003f58 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d803      	bhi.n	8005a44 <HAL_SPI_Transmit+0x204>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d102      	bne.n	8005a4a <HAL_SPI_Transmit+0x20a>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a4e:	e026      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1cd      	bne.n	80059f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fbb8 	bl	80061d4 <SPI_EndRxTxTransaction>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	77fb      	strb	r3, [r7, #31]
 8005a9a:	e000      	b.n	8005a9e <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aae:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad4:	d112      	bne.n	8005afc <HAL_SPI_Receive+0x44>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10e      	bne.n	8005afc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f8f1 	bl	8005cda <HAL_SPI_TransmitReceive>
 8005af8:	4603      	mov	r3, r0
 8005afa:	e0ea      	b.n	8005cd2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_SPI_Receive+0x52>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e0e3      	b.n	8005cd2 <HAL_SPI_Receive+0x21a>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b12:	f7fe fa21 	bl	8003f58 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d002      	beq.n	8005b2a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
 8005b26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b28:	e0ca      	b.n	8005cc0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_SPI_Receive+0x7e>
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b3a:	e0c1      	b.n	8005cc0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b82:	d10f      	bne.n	8005ba4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ba2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	d007      	beq.n	8005bc2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d162      	bne.n	8005c90 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bca:	e02e      	b.n	8005c2a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d115      	bne.n	8005c06 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f103 020c 	add.w	r2, r3, #12
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c04:	e011      	b.n	8005c2a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c06:	f7fe f9a7 	bl	8003f58 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d803      	bhi.n	8005c1e <HAL_SPI_Receive+0x166>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d102      	bne.n	8005c24 <HAL_SPI_Receive+0x16c>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c28:	e04a      	b.n	8005cc0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1cb      	bne.n	8005bcc <HAL_SPI_Receive+0x114>
 8005c34:	e031      	b.n	8005c9a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d113      	bne.n	8005c6c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c6a:	e011      	b.n	8005c90 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c6c:	f7fe f974 	bl	8003f58 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d803      	bhi.n	8005c84 <HAL_SPI_Receive+0x1cc>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d102      	bne.n	8005c8a <HAL_SPI_Receive+0x1d2>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c8e:	e017      	b.n	8005cc0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1cd      	bne.n	8005c36 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa46 	bl	8006130 <SPI_EndRxTransaction>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	75fb      	strb	r3, [r7, #23]
 8005cbc:	e000      	b.n	8005cc0 <HAL_SPI_Receive+0x208>
  }

error :
 8005cbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b08c      	sub	sp, #48	; 0x30
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_SPI_TransmitReceive+0x26>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e18a      	b.n	8006016 <HAL_SPI_TransmitReceive+0x33c>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d08:	f7fe f926 	bl	8003f58 <HAL_GetTick>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d1e:	887b      	ldrh	r3, [r7, #2]
 8005d20:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d00f      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x70>
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d30:	d107      	bne.n	8005d42 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d103      	bne.n	8005d42 <HAL_SPI_TransmitReceive+0x68>
 8005d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d003      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
 8005d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d48:	e15b      	b.n	8006002 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_SPI_TransmitReceive+0x82>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_SPI_TransmitReceive+0x82>
 8005d56:	887b      	ldrh	r3, [r7, #2]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d62:	e14e      	b.n	8006002 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d003      	beq.n	8005d78 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2205      	movs	r2, #5
 8005d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	887a      	ldrh	r2, [r7, #2]
 8005d88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	887a      	ldrh	r2, [r7, #2]
 8005d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	887a      	ldrh	r2, [r7, #2]
 8005d9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	887a      	ldrh	r2, [r7, #2]
 8005da0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d007      	beq.n	8005dcc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd4:	d178      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_TransmitReceive+0x10a>
 8005dde:	8b7b      	ldrh	r3, [r7, #26]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d166      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	881a      	ldrh	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	1c9a      	adds	r2, r3, #2
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e08:	e053      	b.n	8005eb2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d11b      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x176>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x176>
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d113      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	1c9a      	adds	r2, r3, #2
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d119      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x1b8>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d014      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	b292      	uxth	r2, r2
 8005e74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e92:	f7fe f861 	bl	8003f58 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d807      	bhi.n	8005eb2 <HAL_SPI_TransmitReceive+0x1d8>
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d003      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005eb0:	e0a7      	b.n	8006002 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1a6      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x130>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1a1      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x130>
 8005ec6:	e07c      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x1fc>
 8005ed0:	8b7b      	ldrh	r3, [r7, #26]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d16b      	bne.n	8005fae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efc:	e057      	b.n	8005fae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d11c      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x26c>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d017      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x26c>
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d114      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	7812      	ldrb	r2, [r2, #0]
 8005f28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d119      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x2ae>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d014      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f84:	2301      	movs	r3, #1
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f88:	f7fd ffe6 	bl	8003f58 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d803      	bhi.n	8005fa0 <HAL_SPI_TransmitReceive+0x2c6>
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d102      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0x2cc>
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fac:	e029      	b.n	8006002 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1a2      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x224>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d19d      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f904 	bl	80061d4 <SPI_EndRxTxTransaction>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fde:	e010      	b.n	8006002 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	e000      	b.n	8006002 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006000:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006016:	4618      	mov	r0, r3
 8006018:	3730      	adds	r7, #48	; 0x30
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006030:	f7fd ff92 	bl	8003f58 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006040:	f7fd ff8a 	bl	8003f58 <HAL_GetTick>
 8006044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006046:	4b39      	ldr	r3, [pc, #228]	; (800612c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	015b      	lsls	r3, r3, #5
 800604c:	0d1b      	lsrs	r3, r3, #20
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	fb02 f303 	mul.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006056:	e054      	b.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d050      	beq.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006060:	f7fd ff7a 	bl	8003f58 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	429a      	cmp	r2, r3
 800606e:	d902      	bls.n	8006076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d13d      	bne.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608e:	d111      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	d004      	beq.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a2:	d107      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060bc:	d10f      	bne.n	80060de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e017      	b.n	8006122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3b01      	subs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	429a      	cmp	r2, r3
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	429a      	cmp	r2, r3
 800611e:	d19b      	bne.n	8006058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	2000002c 	.word	0x2000002c

08006130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006144:	d111      	bne.n	800616a <SPI_EndRxTransaction+0x3a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614e:	d004      	beq.n	800615a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006158:	d107      	bne.n	800616a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006168:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006172:	d117      	bne.n	80061a4 <SPI_EndRxTransaction+0x74>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617c:	d112      	bne.n	80061a4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	2101      	movs	r1, #1
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff ff49 	bl	8006020 <SPI_WaitFlagStateUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01a      	beq.n	80061ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	f043 0220 	orr.w	r2, r3, #32
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e013      	b.n	80061cc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff ff36 	bl	8006020 <SPI_WaitFlagStateUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e000      	b.n	80061cc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	2180      	movs	r1, #128	; 0x80
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff ff18 	bl	8006020 <SPI_WaitFlagStateUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	f043 0220 	orr.w	r2, r3, #32
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e000      	b.n	8006208 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e041      	b.n	80062a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fd fbc2 	bl	80039c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f000 fa78 	bl	8006744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d001      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e03f      	b.n	8006348 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_TIM_Base_Start_IT+0xa4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_TIM_Base_Start_IT+0x62>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f2:	d00e      	beq.n	8006312 <HAL_TIM_Base_Start_IT+0x62>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a17      	ldr	r2, [pc, #92]	; (8006358 <HAL_TIM_Base_Start_IT+0xa8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_TIM_Base_Start_IT+0x62>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a16      	ldr	r2, [pc, #88]	; (800635c <HAL_TIM_Base_Start_IT+0xac>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_TIM_Base_Start_IT+0x62>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <HAL_TIM_Base_Start_IT+0xb0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d111      	bne.n	8006336 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b06      	cmp	r3, #6
 8006322:	d010      	beq.n	8006346 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006334:	e007      	b.n	8006346 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0201 	orr.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40014000 	.word	0x40014000

08006364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0202 	mvn.w	r2, #2
 8006390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9b1 	bl	800670e <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9a4 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f9b3 	bl	8006720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0204 	mvn.w	r2, #4
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f987 	bl	800670e <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f97a 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f989 	bl	8006720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b08      	cmp	r3, #8
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b08      	cmp	r3, #8
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0208 	mvn.w	r2, #8
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f95d 	bl	800670e <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f950 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f95f 	bl	8006720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b10      	cmp	r3, #16
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0210 	mvn.w	r2, #16
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2208      	movs	r2, #8
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f933 	bl	800670e <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f926 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f935 	bl	8006720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10e      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0201 	mvn.w	r2, #1
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fc fd9a 	bl	800301c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d10e      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d107      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa9d 	bl	8006a4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d10e      	bne.n	8006540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d107      	bne.n	8006540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8f9 	bl	8006732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b20      	cmp	r3, #32
 800654c:	d10e      	bne.n	800656c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b20      	cmp	r3, #32
 800655a:	d107      	bne.n	800656c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0220 	mvn.w	r2, #32
 8006564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa68 	bl	8006a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_TIM_ConfigClockSource+0x18>
 8006588:	2302      	movs	r3, #2
 800658a:	e0b3      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x180>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c4:	d03e      	beq.n	8006644 <HAL_TIM_ConfigClockSource+0xd0>
 80065c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ca:	f200 8087 	bhi.w	80066dc <HAL_TIM_ConfigClockSource+0x168>
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d2:	f000 8085 	beq.w	80066e0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065da:	d87f      	bhi.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
 80065dc:	2b70      	cmp	r3, #112	; 0x70
 80065de:	d01a      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0xa2>
 80065e0:	2b70      	cmp	r3, #112	; 0x70
 80065e2:	d87b      	bhi.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
 80065e4:	2b60      	cmp	r3, #96	; 0x60
 80065e6:	d050      	beq.n	800668a <HAL_TIM_ConfigClockSource+0x116>
 80065e8:	2b60      	cmp	r3, #96	; 0x60
 80065ea:	d877      	bhi.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
 80065ec:	2b50      	cmp	r3, #80	; 0x50
 80065ee:	d03c      	beq.n	800666a <HAL_TIM_ConfigClockSource+0xf6>
 80065f0:	2b50      	cmp	r3, #80	; 0x50
 80065f2:	d873      	bhi.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d058      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x136>
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d86f      	bhi.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
 80065fc:	2b30      	cmp	r3, #48	; 0x30
 80065fe:	d064      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x156>
 8006600:	2b30      	cmp	r3, #48	; 0x30
 8006602:	d86b      	bhi.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
 8006604:	2b20      	cmp	r3, #32
 8006606:	d060      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x156>
 8006608:	2b20      	cmp	r3, #32
 800660a:	d867      	bhi.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d05c      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x156>
 8006610:	2b10      	cmp	r3, #16
 8006612:	d05a      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006614:	e062      	b.n	80066dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6899      	ldr	r1, [r3, #8]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f000 f984 	bl	8006932 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006638:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	609a      	str	r2, [r3, #8]
      break;
 8006642:	e04e      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	6899      	ldr	r1, [r3, #8]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f000 f96d 	bl	8006932 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006666:	609a      	str	r2, [r3, #8]
      break;
 8006668:	e03b      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6859      	ldr	r1, [r3, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	461a      	mov	r2, r3
 8006678:	f000 f8e4 	bl	8006844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2150      	movs	r1, #80	; 0x50
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f93b 	bl	80068fe <TIM_ITRx_SetConfig>
      break;
 8006688:	e02b      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6859      	ldr	r1, [r3, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	461a      	mov	r2, r3
 8006698:	f000 f902 	bl	80068a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2160      	movs	r1, #96	; 0x60
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 f92b 	bl	80068fe <TIM_ITRx_SetConfig>
      break;
 80066a8:	e01b      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6859      	ldr	r1, [r3, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f000 f8c4 	bl	8006844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2140      	movs	r1, #64	; 0x40
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f91b 	bl	80068fe <TIM_ITRx_SetConfig>
      break;
 80066c8:	e00b      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f000 f912 	bl	80068fe <TIM_ITRx_SetConfig>
        break;
 80066da:	e002      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80066e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr

08006720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a35      	ldr	r2, [pc, #212]	; (800682c <TIM_Base_SetConfig+0xe8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00b      	beq.n	8006774 <TIM_Base_SetConfig+0x30>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d007      	beq.n	8006774 <TIM_Base_SetConfig+0x30>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a32      	ldr	r2, [pc, #200]	; (8006830 <TIM_Base_SetConfig+0xec>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_Base_SetConfig+0x30>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a31      	ldr	r2, [pc, #196]	; (8006834 <TIM_Base_SetConfig+0xf0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d108      	bne.n	8006786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a28      	ldr	r2, [pc, #160]	; (800682c <TIM_Base_SetConfig+0xe8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d017      	beq.n	80067be <TIM_Base_SetConfig+0x7a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006794:	d013      	beq.n	80067be <TIM_Base_SetConfig+0x7a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a25      	ldr	r2, [pc, #148]	; (8006830 <TIM_Base_SetConfig+0xec>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <TIM_Base_SetConfig+0x7a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a24      	ldr	r2, [pc, #144]	; (8006834 <TIM_Base_SetConfig+0xf0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00b      	beq.n	80067be <TIM_Base_SetConfig+0x7a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a23      	ldr	r2, [pc, #140]	; (8006838 <TIM_Base_SetConfig+0xf4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <TIM_Base_SetConfig+0x7a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a22      	ldr	r2, [pc, #136]	; (800683c <TIM_Base_SetConfig+0xf8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_Base_SetConfig+0x7a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a21      	ldr	r2, [pc, #132]	; (8006840 <TIM_Base_SetConfig+0xfc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d108      	bne.n	80067d0 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a0d      	ldr	r2, [pc, #52]	; (800682c <TIM_Base_SetConfig+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00b      	beq.n	8006814 <TIM_Base_SetConfig+0xd0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a0e      	ldr	r2, [pc, #56]	; (8006838 <TIM_Base_SetConfig+0xf4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_Base_SetConfig+0xd0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a0d      	ldr	r2, [pc, #52]	; (800683c <TIM_Base_SetConfig+0xf8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_Base_SetConfig+0xd0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a0c      	ldr	r2, [pc, #48]	; (8006840 <TIM_Base_SetConfig+0xfc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d103      	bne.n	800681c <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	615a      	str	r2, [r3, #20]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800

08006844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	f023 0201 	bic.w	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800686e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 030a 	bic.w	r3, r3, #10
 8006880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	f023 0210 	bic.w	r2, r3, #16
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	031b      	lsls	r3, r3, #12
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr

080068fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	f043 0307 	orr.w	r3, r3, #7
 8006920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006932:	b480      	push	{r7}
 8006934:	b087      	sub	sp, #28
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800694c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	021a      	lsls	r2, r3, #8
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	431a      	orrs	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4313      	orrs	r3, r2
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	609a      	str	r2, [r3, #8]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006984:	2302      	movs	r3, #2
 8006986:	e04b      	b.n	8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a19      	ldr	r2, [pc, #100]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d4:	d00e      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a12      	ldr	r2, [pc, #72]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d10c      	bne.n	8006a0e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40014000 	.word	0x40014000

08006a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e03f      	b.n	8006af2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fc ffbe 	bl	8003a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	; 0x24
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f9e1 	bl	8006e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695a      	ldr	r2, [r3, #20]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b08a      	sub	sp, #40	; 0x28
 8006afe:	af02      	add	r7, sp, #8
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	4613      	mov	r3, r2
 8006b08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d17c      	bne.n	8006c14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_UART_Transmit+0x2c>
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e075      	b.n	8006c16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_UART_Transmit+0x3e>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e06e      	b.n	8006c16 <HAL_UART_Transmit+0x11c>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2221      	movs	r2, #33	; 0x21
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b4e:	f7fd fa03 	bl	8003f58 <HAL_GetTick>
 8006b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	88fa      	ldrh	r2, [r7, #6]
 8006b5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b68:	d108      	bne.n	8006b7c <HAL_UART_Transmit+0x82>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	e003      	b.n	8006b84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b8c:	e02a      	b.n	8006be4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	2180      	movs	r1, #128	; 0x80
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f91d 	bl	8006dd8 <UART_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e036      	b.n	8006c16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e007      	b.n	8006bd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1cf      	bne.n	8006b8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2140      	movs	r1, #64	; 0x40
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f8ed 	bl	8006dd8 <UART_WaitOnFlagUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e006      	b.n	8006c16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e000      	b.n	8006c16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b088      	sub	sp, #32
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b20      	cmp	r3, #32
 8006c38:	f040 80c9 	bne.w	8006dce <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0c1      	b.n	8006dd0 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_UARTEx_ReceiveToIdle+0x3c>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0ba      	b.n	8006dd0 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2222      	movs	r2, #34	; 0x22
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c76:	f7fd f96f 	bl	8003f58 <HAL_GetTick>
 8006c7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c90:	d108      	bne.n	8006ca4 <HAL_UARTEx_ReceiveToIdle+0x86>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e003      	b.n	8006cac <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006cba:	e074      	b.n	8006da6 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d114      	bne.n	8006cf4 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e06d      	b.n	8006dd0 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d13c      	bne.n	8006d7c <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10c      	bne.n	8006d22 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e01f      	b.n	8006d62 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
           if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2a:	d007      	beq.n	8006d3c <HAL_UARTEx_ReceiveToIdle+0x11e>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <HAL_UARTEx_ReceiveToIdle+0x12c>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d106      	bne.n	8006d4a <HAL_UARTEx_ReceiveToIdle+0x12c>
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e008      	b.n	8006d5c <HAL_UARTEx_ReceiveToIdle+0x13e>
           }
           else
           {
             *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	701a      	strb	r2, [r3, #0]
           }

          pdata8bits++;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	3301      	adds	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d010      	beq.n	8006da6 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d84:	f7fd f8e8 	bl	8003f58 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d302      	bcc.n	8006d9a <HAL_UARTEx_ReceiveToIdle+0x17c>
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e014      	b.n	8006dd0 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d185      	bne.n	8006cbc <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de8:	e02c      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d028      	beq.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df8:	f7fd f8ae 	bl	8003f58 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d21d      	bcs.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e00f      	b.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d0c3      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006eac:	f023 030c 	bic.w	r3, r3, #12
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699a      	ldr	r2, [r3, #24]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a55      	ldr	r2, [pc, #340]	; (800702c <UART_SetConfig+0x1c0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d103      	bne.n	8006ee2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006eda:	f7fe fad9 	bl	8005490 <HAL_RCC_GetPCLK2Freq>
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	e002      	b.n	8006ee8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ee2:	f7fe fac1 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 8006ee6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef0:	d14c      	bne.n	8006f8c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009a      	lsls	r2, r3, #2
 8006efc:	441a      	add	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	4a49      	ldr	r2, [pc, #292]	; (8007030 <UART_SetConfig+0x1c4>)
 8006f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	0119      	lsls	r1, r3, #4
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009a      	lsls	r2, r3, #2
 8006f1c:	441a      	add	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f28:	4b41      	ldr	r3, [pc, #260]	; (8007030 <UART_SetConfig+0x1c4>)
 8006f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	2064      	movs	r0, #100	; 0x64
 8006f32:	fb00 f303 	mul.w	r3, r0, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	3332      	adds	r3, #50	; 0x32
 8006f3c:	4a3c      	ldr	r2, [pc, #240]	; (8007030 <UART_SetConfig+0x1c4>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f4a:	4419      	add	r1, r3
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009a      	lsls	r2, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f62:	4b33      	ldr	r3, [pc, #204]	; (8007030 <UART_SetConfig+0x1c4>)
 8006f64:	fba3 0302 	umull	r0, r3, r3, r2
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	2064      	movs	r0, #100	; 0x64
 8006f6c:	fb00 f303 	mul.w	r3, r0, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	3332      	adds	r3, #50	; 0x32
 8006f76:	4a2e      	ldr	r2, [pc, #184]	; (8007030 <UART_SetConfig+0x1c4>)
 8006f78:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f003 0207 	and.w	r2, r3, #7
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	440a      	add	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8006f8a:	e04a      	b.n	8007022 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009a      	lsls	r2, r3, #2
 8006f96:	441a      	add	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	4a23      	ldr	r2, [pc, #140]	; (8007030 <UART_SetConfig+0x1c4>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	0119      	lsls	r1, r3, #4
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009a      	lsls	r2, r3, #2
 8006fb6:	441a      	add	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fc2:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <UART_SetConfig+0x1c4>)
 8006fc4:	fba3 0302 	umull	r0, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	2064      	movs	r0, #100	; 0x64
 8006fcc:	fb00 f303 	mul.w	r3, r0, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	3332      	adds	r3, #50	; 0x32
 8006fd6:	4a16      	ldr	r2, [pc, #88]	; (8007030 <UART_SetConfig+0x1c4>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe2:	4419      	add	r1, r3
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009a      	lsls	r2, r3, #2
 8006fee:	441a      	add	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <UART_SetConfig+0x1c4>)
 8006ffc:	fba3 0302 	umull	r0, r3, r3, r2
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	2064      	movs	r0, #100	; 0x64
 8007004:	fb00 f303 	mul.w	r3, r0, r3
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	3332      	adds	r3, #50	; 0x32
 800700e:	4a08      	ldr	r2, [pc, #32]	; (8007030 <UART_SetConfig+0x1c4>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	095b      	lsrs	r3, r3, #5
 8007016:	f003 020f 	and.w	r2, r3, #15
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	440a      	add	r2, r1
 8007020:	609a      	str	r2, [r3, #8]
}
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40013800 	.word	0x40013800
 8007030:	51eb851f 	.word	0x51eb851f

08007034 <__errno>:
 8007034:	4b01      	ldr	r3, [pc, #4]	; (800703c <__errno+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000038 	.word	0x20000038

08007040 <exit>:
 8007040:	b508      	push	{r3, lr}
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <exit+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	b113      	cbz	r3, 800704e <exit+0xe>
 8007048:	2100      	movs	r1, #0
 800704a:	f3af 8000 	nop.w
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <exit+0x24>)
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007054:	b103      	cbz	r3, 8007058 <exit+0x18>
 8007056:	4798      	blx	r3
 8007058:	4620      	mov	r0, r4
 800705a:	f7fc fdff 	bl	8003c5c <_exit>
 800705e:	bf00      	nop
 8007060:	00000000 	.word	0x00000000
 8007064:	08007268 	.word	0x08007268

08007068 <__libc_init_array>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	2600      	movs	r6, #0
 800706c:	4d0c      	ldr	r5, [pc, #48]	; (80070a0 <__libc_init_array+0x38>)
 800706e:	4c0d      	ldr	r4, [pc, #52]	; (80070a4 <__libc_init_array+0x3c>)
 8007070:	1b64      	subs	r4, r4, r5
 8007072:	10a4      	asrs	r4, r4, #2
 8007074:	42a6      	cmp	r6, r4
 8007076:	d109      	bne.n	800708c <__libc_init_array+0x24>
 8007078:	f000 f88a 	bl	8007190 <_init>
 800707c:	2600      	movs	r6, #0
 800707e:	4d0a      	ldr	r5, [pc, #40]	; (80070a8 <__libc_init_array+0x40>)
 8007080:	4c0a      	ldr	r4, [pc, #40]	; (80070ac <__libc_init_array+0x44>)
 8007082:	1b64      	subs	r4, r4, r5
 8007084:	10a4      	asrs	r4, r4, #2
 8007086:	42a6      	cmp	r6, r4
 8007088:	d105      	bne.n	8007096 <__libc_init_array+0x2e>
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007090:	4798      	blx	r3
 8007092:	3601      	adds	r6, #1
 8007094:	e7ee      	b.n	8007074 <__libc_init_array+0xc>
 8007096:	f855 3b04 	ldr.w	r3, [r5], #4
 800709a:	4798      	blx	r3
 800709c:	3601      	adds	r6, #1
 800709e:	e7f2      	b.n	8007086 <__libc_init_array+0x1e>
 80070a0:	080072cc 	.word	0x080072cc
 80070a4:	080072cc 	.word	0x080072cc
 80070a8:	080072cc 	.word	0x080072cc
 80070ac:	080072d0 	.word	0x080072d0

080070b0 <memcpy>:
 80070b0:	440a      	add	r2, r1
 80070b2:	4291      	cmp	r1, r2
 80070b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b8:	d100      	bne.n	80070bc <memcpy+0xc>
 80070ba:	4770      	bx	lr
 80070bc:	b510      	push	{r4, lr}
 80070be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c2:	4291      	cmp	r1, r2
 80070c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c8:	d1f9      	bne.n	80070be <memcpy+0xe>
 80070ca:	bd10      	pop	{r4, pc}

080070cc <memset>:
 80070cc:	4603      	mov	r3, r0
 80070ce:	4402      	add	r2, r0
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memset+0xa>
 80070d4:	4770      	bx	lr
 80070d6:	f803 1b01 	strb.w	r1, [r3], #1
 80070da:	e7f9      	b.n	80070d0 <memset+0x4>

080070dc <strncmp>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	b16a      	cbz	r2, 80070fc <strncmp+0x20>
 80070e0:	3901      	subs	r1, #1
 80070e2:	1884      	adds	r4, r0, r2
 80070e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80070e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d103      	bne.n	80070f8 <strncmp+0x1c>
 80070f0:	42a0      	cmp	r0, r4
 80070f2:	d001      	beq.n	80070f8 <strncmp+0x1c>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f5      	bne.n	80070e4 <strncmp+0x8>
 80070f8:	1a98      	subs	r0, r3, r2
 80070fa:	bd10      	pop	{r4, pc}
 80070fc:	4610      	mov	r0, r2
 80070fe:	e7fc      	b.n	80070fa <strncmp+0x1e>

08007100 <round>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007106:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800710a:	2c13      	cmp	r4, #19
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4606      	mov	r6, r0
 8007112:	460d      	mov	r5, r1
 8007114:	dc19      	bgt.n	800714a <round+0x4a>
 8007116:	2c00      	cmp	r4, #0
 8007118:	da09      	bge.n	800712e <round+0x2e>
 800711a:	3401      	adds	r4, #1
 800711c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007120:	d103      	bne.n	800712a <round+0x2a>
 8007122:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007126:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800712a:	2200      	movs	r2, #0
 800712c:	e02a      	b.n	8007184 <round+0x84>
 800712e:	4917      	ldr	r1, [pc, #92]	; (800718c <round+0x8c>)
 8007130:	4121      	asrs	r1, r4
 8007132:	ea03 0001 	and.w	r0, r3, r1
 8007136:	4302      	orrs	r2, r0
 8007138:	d010      	beq.n	800715c <round+0x5c>
 800713a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800713e:	fa42 f404 	asr.w	r4, r2, r4
 8007142:	4423      	add	r3, r4
 8007144:	ea23 0301 	bic.w	r3, r3, r1
 8007148:	e7ef      	b.n	800712a <round+0x2a>
 800714a:	2c33      	cmp	r4, #51	; 0x33
 800714c:	dd09      	ble.n	8007162 <round+0x62>
 800714e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007152:	d103      	bne.n	800715c <round+0x5c>
 8007154:	f7f9 f86a 	bl	800022c <__adddf3>
 8007158:	4606      	mov	r6, r0
 800715a:	460d      	mov	r5, r1
 800715c:	4630      	mov	r0, r6
 800715e:	4629      	mov	r1, r5
 8007160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800716a:	40f8      	lsrs	r0, r7
 800716c:	4202      	tst	r2, r0
 800716e:	d0f5      	beq.n	800715c <round+0x5c>
 8007170:	2101      	movs	r1, #1
 8007172:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007176:	fa01 f404 	lsl.w	r4, r1, r4
 800717a:	1912      	adds	r2, r2, r4
 800717c:	bf28      	it	cs
 800717e:	185b      	addcs	r3, r3, r1
 8007180:	ea22 0200 	bic.w	r2, r2, r0
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	e7e6      	b.n	8007158 <round+0x58>
 800718a:	bf00      	nop
 800718c:	000fffff 	.word	0x000fffff

08007190 <_init>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr

0800719c <_fini>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr
