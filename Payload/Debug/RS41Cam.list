
RS41Cam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c0  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a0  080088a0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080088a0  080088a0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088a0  080088a0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080088a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000028  080088d0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  080088d0  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e27  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d68  00000000  00000000  00036e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016090  00000000  00000000  0003cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6cd  00000000  00000000  00053008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073f1e  00000000  00000000  0006d6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e15f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d1c  00000000  00000000  000e1644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008578 	.word	0x08008578

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08008578 	.word	0x08008578

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	3a01      	subs	r2, #1
 8000b16:	bf28      	it	cs
 8000b18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b1c:	d2ed      	bcs.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_fmul>:
 8000c78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c80:	bf1e      	ittt	ne
 8000c82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c86:	ea92 0f0c 	teqne	r2, ip
 8000c8a:	ea93 0f0c 	teqne	r3, ip
 8000c8e:	d06f      	beq.n	8000d70 <__aeabi_fmul+0xf8>
 8000c90:	441a      	add	r2, r3
 8000c92:	ea80 0c01 	eor.w	ip, r0, r1
 8000c96:	0240      	lsls	r0, r0, #9
 8000c98:	bf18      	it	ne
 8000c9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c9e:	d01e      	beq.n	8000cde <__aeabi_fmul+0x66>
 8000ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ca4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ca8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cac:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cb8:	bf3e      	ittt	cc
 8000cba:	0049      	lslcc	r1, r1, #1
 8000cbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc0:	005b      	lslcc	r3, r3, #1
 8000cc2:	ea40 0001 	orr.w	r0, r0, r1
 8000cc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cca:	2afd      	cmp	r2, #253	; 0xfd
 8000ccc:	d81d      	bhi.n	8000d0a <__aeabi_fmul+0x92>
 8000cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	4770      	bx	lr
 8000cde:	f090 0f00 	teq	r0, #0
 8000ce2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ce6:	bf08      	it	eq
 8000ce8:	0249      	lsleq	r1, r1, #9
 8000cea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cf2:	3a7f      	subs	r2, #127	; 0x7f
 8000cf4:	bfc2      	ittt	gt
 8000cf6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cfa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cfe:	4770      	bxgt	lr
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	dc5d      	bgt.n	8000dc8 <__aeabi_fmul+0x150>
 8000d0c:	f112 0f19 	cmn.w	r2, #25
 8000d10:	bfdc      	itt	le
 8000d12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d16:	4770      	bxle	lr
 8000d18:	f1c2 0200 	rsb	r2, r2, #0
 8000d1c:	0041      	lsls	r1, r0, #1
 8000d1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d22:	f1c2 0220 	rsb	r2, r2, #32
 8000d26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d2e:	f140 0000 	adc.w	r0, r0, #0
 8000d32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d36:	bf08      	it	eq
 8000d38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3c:	4770      	bx	lr
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d46:	bf02      	ittt	eq
 8000d48:	0040      	lsleq	r0, r0, #1
 8000d4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d4e:	3a01      	subeq	r2, #1
 8000d50:	d0f9      	beq.n	8000d46 <__aeabi_fmul+0xce>
 8000d52:	ea40 000c 	orr.w	r0, r0, ip
 8000d56:	f093 0f00 	teq	r3, #0
 8000d5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d5e:	bf02      	ittt	eq
 8000d60:	0049      	lsleq	r1, r1, #1
 8000d62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d66:	3b01      	subeq	r3, #1
 8000d68:	d0f9      	beq.n	8000d5e <__aeabi_fmul+0xe6>
 8000d6a:	ea41 010c 	orr.w	r1, r1, ip
 8000d6e:	e78f      	b.n	8000c90 <__aeabi_fmul+0x18>
 8000d70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d74:	ea92 0f0c 	teq	r2, ip
 8000d78:	bf18      	it	ne
 8000d7a:	ea93 0f0c 	teqne	r3, ip
 8000d7e:	d00a      	beq.n	8000d96 <__aeabi_fmul+0x11e>
 8000d80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d84:	bf18      	it	ne
 8000d86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	d1d8      	bne.n	8000d3e <__aeabi_fmul+0xc6>
 8000d8c:	ea80 0001 	eor.w	r0, r0, r1
 8000d90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	bf17      	itett	ne
 8000d9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da0:	4608      	moveq	r0, r1
 8000da2:	f091 0f00 	teqne	r1, #0
 8000da6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000daa:	d014      	beq.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d101      	bne.n	8000db6 <__aeabi_fmul+0x13e>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	d10f      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000db6:	ea93 0f0c 	teq	r3, ip
 8000dba:	d103      	bne.n	8000dc4 <__aeabi_fmul+0x14c>
 8000dbc:	024b      	lsls	r3, r1, #9
 8000dbe:	bf18      	it	ne
 8000dc0:	4608      	movne	r0, r1
 8000dc2:	d108      	bne.n	8000dd6 <__aeabi_fmul+0x15e>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bx	lr
 8000dd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fdiv>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d069      	beq.n	8000ecc <__aeabi_fdiv+0xec>
 8000df8:	eba2 0203 	sub.w	r2, r2, r3
 8000dfc:	ea80 0c01 	eor.w	ip, r0, r1
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e06:	d037      	beq.n	8000e78 <__aeabi_fdiv+0x98>
 8000e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	bf38      	it	cc
 8000e1c:	005b      	lslcc	r3, r3, #1
 8000e1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e26:	428b      	cmp	r3, r1
 8000e28:	bf24      	itt	cs
 8000e2a:	1a5b      	subcs	r3, r3, r1
 8000e2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e34:	bf24      	itt	cs
 8000e36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e42:	bf24      	itt	cs
 8000e44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	bf18      	it	ne
 8000e5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e62:	d1e0      	bne.n	8000e26 <__aeabi_fdiv+0x46>
 8000e64:	2afd      	cmp	r2, #253	; 0xfd
 8000e66:	f63f af50 	bhi.w	8000d0a <__aeabi_fmul+0x92>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e70:	bf08      	it	eq
 8000e72:	f020 0001 	biceq.w	r0, r0, #1
 8000e76:	4770      	bx	lr
 8000e78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e80:	327f      	adds	r2, #127	; 0x7f
 8000e82:	bfc2      	ittt	gt
 8000e84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8c:	4770      	bxgt	lr
 8000e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	3a01      	subs	r2, #1
 8000e98:	e737      	b.n	8000d0a <__aeabi_fmul+0x92>
 8000e9a:	f092 0f00 	teq	r2, #0
 8000e9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0040      	lsleq	r0, r0, #1
 8000ea6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eaa:	3a01      	subeq	r2, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fdiv+0xc2>
 8000eae:	ea40 000c 	orr.w	r0, r0, ip
 8000eb2:	f093 0f00 	teq	r3, #0
 8000eb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eba:	bf02      	ittt	eq
 8000ebc:	0049      	lsleq	r1, r1, #1
 8000ebe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ec2:	3b01      	subeq	r3, #1
 8000ec4:	d0f9      	beq.n	8000eba <__aeabi_fdiv+0xda>
 8000ec6:	ea41 010c 	orr.w	r1, r1, ip
 8000eca:	e795      	b.n	8000df8 <__aeabi_fdiv+0x18>
 8000ecc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed0:	ea92 0f0c 	teq	r2, ip
 8000ed4:	d108      	bne.n	8000ee8 <__aeabi_fdiv+0x108>
 8000ed6:	0242      	lsls	r2, r0, #9
 8000ed8:	f47f af7d 	bne.w	8000dd6 <__aeabi_fmul+0x15e>
 8000edc:	ea93 0f0c 	teq	r3, ip
 8000ee0:	f47f af70 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e776      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	d104      	bne.n	8000ef8 <__aeabi_fdiv+0x118>
 8000eee:	024b      	lsls	r3, r1, #9
 8000ef0:	f43f af4c 	beq.w	8000d8c <__aeabi_fmul+0x114>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e76e      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000ef8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000efc:	bf18      	it	ne
 8000efe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	d1ca      	bne.n	8000e9a <__aeabi_fdiv+0xba>
 8000f04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f08:	f47f af5c 	bne.w	8000dc4 <__aeabi_fmul+0x14c>
 8000f0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f10:	f47f af3c 	bne.w	8000d8c <__aeabi_fmul+0x114>
 8000f14:	e75f      	b.n	8000dd6 <__aeabi_fmul+0x15e>
 8000f16:	bf00      	nop

08000f18 <__gesf2>:
 8000f18:	f04f 3cff 	mov.w	ip, #4294967295
 8000f1c:	e006      	b.n	8000f2c <__cmpsf2+0x4>
 8000f1e:	bf00      	nop

08000f20 <__lesf2>:
 8000f20:	f04f 0c01 	mov.w	ip, #1
 8000f24:	e002      	b.n	8000f2c <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__cmpsf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	bf18      	it	ne
 8000f3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f42:	d011      	beq.n	8000f68 <__cmpsf2+0x40>
 8000f44:	b001      	add	sp, #4
 8000f46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f4a:	bf18      	it	ne
 8000f4c:	ea90 0f01 	teqne	r0, r1
 8000f50:	bf58      	it	pl
 8000f52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f56:	bf88      	it	hi
 8000f58:	17c8      	asrhi	r0, r1, #31
 8000f5a:	bf38      	it	cc
 8000f5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f60:	bf18      	it	ne
 8000f62:	f040 0001 	orrne.w	r0, r0, #1
 8000f66:	4770      	bx	lr
 8000f68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f6c:	d102      	bne.n	8000f74 <__cmpsf2+0x4c>
 8000f6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f72:	d105      	bne.n	8000f80 <__cmpsf2+0x58>
 8000f74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f78:	d1e4      	bne.n	8000f44 <__cmpsf2+0x1c>
 8000f7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f7e:	d0e1      	beq.n	8000f44 <__cmpsf2+0x1c>
 8000f80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__aeabi_cfrcmple>:
 8000f88:	4684      	mov	ip, r0
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4661      	mov	r1, ip
 8000f8e:	e7ff      	b.n	8000f90 <__aeabi_cfcmpeq>

08000f90 <__aeabi_cfcmpeq>:
 8000f90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f92:	f7ff ffc9 	bl	8000f28 <__cmpsf2>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	bf48      	it	mi
 8000f9a:	f110 0f00 	cmnmi.w	r0, #0
 8000f9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa0 <__aeabi_fcmpeq>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff fff4 	bl	8000f90 <__aeabi_cfcmpeq>
 8000fa8:	bf0c      	ite	eq
 8000faa:	2001      	moveq	r0, #1
 8000fac:	2000      	movne	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_fcmplt>:
 8000fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb8:	f7ff ffea 	bl	8000f90 <__aeabi_cfcmpeq>
 8000fbc:	bf34      	ite	cc
 8000fbe:	2001      	movcc	r0, #1
 8000fc0:	2000      	movcs	r0, #0
 8000fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_fcmple>:
 8000fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fcc:	f7ff ffe0 	bl	8000f90 <__aeabi_cfcmpeq>
 8000fd0:	bf94      	ite	ls
 8000fd2:	2001      	movls	r0, #1
 8000fd4:	2000      	movhi	r0, #0
 8000fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fda:	bf00      	nop

08000fdc <__aeabi_fcmpge>:
 8000fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe0:	f7ff ffd2 	bl	8000f88 <__aeabi_cfrcmple>
 8000fe4:	bf94      	ite	ls
 8000fe6:	2001      	movls	r0, #1
 8000fe8:	2000      	movhi	r0, #0
 8000fea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fee:	bf00      	nop

08000ff0 <__aeabi_fcmpgt>:
 8000ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff4:	f7ff ffc8 	bl	8000f88 <__aeabi_cfrcmple>
 8000ff8:	bf34      	ite	cc
 8000ffa:	2001      	movcc	r0, #1
 8000ffc:	2000      	movcs	r0, #0
 8000ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001002:	bf00      	nop

08001004 <__aeabi_f2uiz>:
 8001004:	0042      	lsls	r2, r0, #1
 8001006:	d20e      	bcs.n	8001026 <__aeabi_f2uiz+0x22>
 8001008:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800100c:	d30b      	bcc.n	8001026 <__aeabi_f2uiz+0x22>
 800100e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001012:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001016:	d409      	bmi.n	800102c <__aeabi_f2uiz+0x28>
 8001018:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800101c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001020:	fa23 f002 	lsr.w	r0, r3, r2
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr
 800102c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001030:	d101      	bne.n	8001036 <__aeabi_f2uiz+0x32>
 8001032:	0242      	lsls	r2, r0, #9
 8001034:	d102      	bne.n	800103c <__aeabi_f2uiz+0x38>
 8001036:	f04f 30ff 	mov.w	r0, #4294967295
 800103a:	4770      	bx	lr
 800103c:	f04f 0000 	mov.w	r0, #0
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <busyWait>:
#include "main.h"

static SPI_HandleTypeDef *hspi;

void busyWait(int num)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	for(int i =0;i<num;i++)
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e002      	b.n	8001058 <busyWait+0x14>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf8      	blt.n	8001052 <busyWait+0xe>
	{

	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <RPM411Init>:

RPM411StatusTypeDef RPM411Init(SPI_HandleTypeDef *hspiParam)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8001072:	af00      	add	r7, sp, #0
 8001074:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001078:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800107c:	6018      	str	r0, [r3, #0]
	RPM411StatusTypeDef RPM411Status = RPM411_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
	HAL_StatusTypeDef HAL_Status     = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277

	uint8_t rsp[SIZE_OF_RPM411_PRESSURE_DATA];

	int initCmds[RPM_411_NUM_INIT_CMDS][RPM_411_SIZE_OF_INIT_CMD] = {
 800108a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800108e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001092:	4a47      	ldr	r2, [pc, #284]	; (80011b0 <RPM411Init+0x144>)
 8001094:	4618      	mov	r0, r3
 8001096:	4611      	mov	r1, r2
 8001098:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800109c:	461a      	mov	r2, r3
 800109e:	f007 f9f9 	bl	8008494 <memcpy>
			{0x03,0x02,0xFA,0x00,0x76,0x8D,0x00},
			{0x03,0x02,0x04,0x01,0x99,0xAD,0x00},
			{0x03,0x02,0x0E,0x01,0x52,0x42,0x00}
	};

	hspi = hspiParam;
 80010a2:	4a44      	ldr	r2, [pc, #272]	; (80011b4 <RPM411Init+0x148>)
 80010a4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80010a8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6013      	str	r3, [r2, #0]

	for(int i=0;i<RPM_411_NUM_INIT_CMDS;i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80010b6:	e06c      	b.n	8001192 <RPM411Init+0x126>
	{
		for(int j =0;j<RPM_411_SIZE_OF_INIT_CMD;j++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80010be:	e02b      	b.n	8001118 <RPM411Init+0xac>
		{
			HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2104      	movs	r1, #4
 80010c4:	483c      	ldr	r0, [pc, #240]	; (80011b8 <RPM411Init+0x14c>)
 80010c6:	f004 fc71 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&initCmds[i][j], 1, 1000);
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <RPM411Init+0x148>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f107 0108 	add.w	r1, r7, #8
 80010d2:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4419      	add	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	2201      	movs	r2, #1
 80010ec:	f005 fa4e 	bl	800658c <HAL_SPI_Transmit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277
			if(HAL_Status != HAL_OK)
 80010f6:	f897 3277 	ldrb.w	r3, [r7, #631]	; 0x277
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <RPM411Init+0x98>
			{
				RPM411Status = RPM411_FAIL;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
			}
			HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2104      	movs	r1, #4
 8001108:	482b      	ldr	r0, [pc, #172]	; (80011b8 <RPM411Init+0x14c>)
 800110a:	f004 fc4f 	bl	80059ac <HAL_GPIO_WritePin>
		for(int j =0;j<RPM_411_SIZE_OF_INIT_CMD;j++)
 800110e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001112:	3301      	adds	r3, #1
 8001114:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8001118:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800111c:	2b06      	cmp	r3, #6
 800111e:	ddcf      	ble.n	80010c0 <RPM411Init+0x54>
		}

		//425 us
		busyWait(300);
 8001120:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001124:	f7ff ff8e 	bl	8001044 <busyWait>
		//busyWait(900);

		for(int k =0;k<SIZE_OF_RPM411_PRESSURE_DATA;k++)
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 800112e:	e024      	b.n	800117a <RPM411Init+0x10e>
		{
			HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2104      	movs	r1, #4
 8001134:	4820      	ldr	r0, [pc, #128]	; (80011b8 <RPM411Init+0x14c>)
 8001136:	f004 fc39 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_Status = HAL_SPI_Receive(hspi, &rsp[k], 1, 1000);
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <RPM411Init+0x148>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8001142:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001146:	18d1      	adds	r1, r2, r3
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	2201      	movs	r2, #1
 800114e:	f005 fb60 	bl	8006812 <HAL_SPI_Receive>
 8001152:	4603      	mov	r3, r0
 8001154:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277
			if(HAL_Status != HAL_OK)
 8001158:	f897 3277 	ldrb.w	r3, [r7, #631]	; 0x277
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <RPM411Init+0xfa>
			{
				RPM411Status = RPM411_FAIL;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
			}
			HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2104      	movs	r1, #4
 800116a:	4813      	ldr	r0, [pc, #76]	; (80011b8 <RPM411Init+0x14c>)
 800116c:	f004 fc1e 	bl	80059ac <HAL_GPIO_WritePin>
		for(int k =0;k<SIZE_OF_RPM411_PRESSURE_DATA;k++)
 8001170:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001174:	3301      	adds	r3, #1
 8001176:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 800117a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800117e:	2b20      	cmp	r3, #32
 8001180:	ddd6      	ble.n	8001130 <RPM411Init+0xc4>
			//busyWait(shapingNum);
		}

		HAL_Delay(50);
 8001182:	2032      	movs	r0, #50	; 0x32
 8001184:	f003 fd6c 	bl	8004c60 <HAL_Delay>
	for(int i=0;i<RPM_411_NUM_INIT_CMDS;i++)
 8001188:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800118c:	3301      	adds	r3, #1
 800118e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8001192:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001196:	2b14      	cmp	r3, #20
 8001198:	dd8e      	ble.n	80010b8 <RPM411Init+0x4c>
	}

	HAL_Delay(280);
 800119a:	f44f 708c 	mov.w	r0, #280	; 0x118
 800119e:	f003 fd5f 	bl	8004c60 <HAL_Delay>

	return RPM411Status;
 80011a2:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	f507 7722 	add.w	r7, r7, #648	; 0x288
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	08008590 	.word	0x08008590
 80011b4:	20000044 	.word	0x20000044
 80011b8:	40010c00 	.word	0x40010c00

080011bc <RPM411ReadPressure>:

RPM411StatusTypeDef RPM411ReadPressure(float *RPM411PressureData)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	; 0x50
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	RPM411StatusTypeDef RPM411Status = RPM411_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	HAL_StatusTypeDef HAL_Status;
	uint8_t    pressureDataBuf[SIZE_OF_RPM411_PRESSURE_DATA];
	float      RPM411PressureDataTemp = 0.0;
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]

	uint8_t cmd2[] = {0x01,0x00,0x3E,0x2E,0x00};
 80011d0:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <RPM411ReadPressure+0x154>)
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011da:	6018      	str	r0, [r3, #0]
 80011dc:	3304      	adds	r3, #4
 80011de:	7019      	strb	r1, [r3, #0]
	uint8_t cmd3[] = {0x02,0x00,0x6D,0x7B,0x00};
 80011e0:	4a4c      	ldr	r2, [pc, #304]	; (8001314 <RPM411ReadPressure+0x158>)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ea:	6018      	str	r0, [r3, #0]
 80011ec:	3304      	adds	r3, #4
 80011ee:	7019      	strb	r1, [r3, #0]

	HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2104      	movs	r1, #4
 80011f4:	4848      	ldr	r0, [pc, #288]	; (8001318 <RPM411ReadPressure+0x15c>)
 80011f6:	f004 fbd9 	bl	80059ac <HAL_GPIO_WritePin>

	for(int i =0;i<sizeof(cmd2);i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80011fe:	e021      	b.n	8001244 <RPM411ReadPressure+0x88>
	{
		HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2104      	movs	r1, #4
 8001204:	4844      	ldr	r0, [pc, #272]	; (8001318 <RPM411ReadPressure+0x15c>)
 8001206:	f004 fbd1 	bl	80059ac <HAL_GPIO_WritePin>
		HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&cmd2[i], 1, 1000);
 800120a:	4b44      	ldr	r3, [pc, #272]	; (800131c <RPM411ReadPressure+0x160>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f107 0210 	add.w	r2, r7, #16
 8001212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001214:	18d1      	adds	r1, r2, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	2201      	movs	r2, #1
 800121c:	f005 f9b6 	bl	800658c <HAL_SPI_Transmit>
 8001220:	4603      	mov	r3, r0
 8001222:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(HAL_Status != HAL_OK)
 8001226:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <RPM411ReadPressure+0x78>
		{
			RPM411Status = RPM411_FAIL;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}
		HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2104      	movs	r1, #4
 8001238:	4837      	ldr	r0, [pc, #220]	; (8001318 <RPM411ReadPressure+0x15c>)
 800123a:	f004 fbb7 	bl	80059ac <HAL_GPIO_WritePin>
	for(int i =0;i<sizeof(cmd2);i++)
 800123e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001240:	3301      	adds	r3, #1
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
 8001244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001246:	2b04      	cmp	r3, #4
 8001248:	d9da      	bls.n	8001200 <RPM411ReadPressure+0x44>
		//busyWait(shapingNum);
	}
	HAL_Delay(193);
 800124a:	20c1      	movs	r0, #193	; 0xc1
 800124c:	f003 fd08 	bl	8004c60 <HAL_Delay>

	for(int i =0;i<sizeof(cmd3);i++)
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
 8001254:	e021      	b.n	800129a <RPM411ReadPressure+0xde>
	{
		HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2104      	movs	r1, #4
 800125a:	482f      	ldr	r0, [pc, #188]	; (8001318 <RPM411ReadPressure+0x15c>)
 800125c:	f004 fba6 	bl	80059ac <HAL_GPIO_WritePin>
		HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&cmd3[i], 1, 1000);
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <RPM411ReadPressure+0x160>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	f107 0208 	add.w	r2, r7, #8
 8001268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126a:	18d1      	adds	r1, r2, r3
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	2201      	movs	r2, #1
 8001272:	f005 f98b 	bl	800658c <HAL_SPI_Transmit>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(HAL_Status != HAL_OK)
 800127c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <RPM411ReadPressure+0xce>
		{
			RPM411Status = RPM411_FAIL;
 8001284:	2301      	movs	r3, #1
 8001286:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		}
		HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2104      	movs	r1, #4
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <RPM411ReadPressure+0x15c>)
 8001290:	f004 fb8c 	bl	80059ac <HAL_GPIO_WritePin>
	for(int i =0;i<sizeof(cmd3);i++)
 8001294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001296:	3301      	adds	r3, #1
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
 800129a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129c:	2b04      	cmp	r3, #4
 800129e:	d9da      	bls.n	8001256 <RPM411ReadPressure+0x9a>
		//busyWait(shapingNum);
	}

	//388us
	busyWait(275);
 80012a0:	f240 1013 	movw	r0, #275	; 0x113
 80012a4:	f7ff fece 	bl	8001044 <busyWait>
	//busyWait(825);

	for(int k =0;k<SIZE_OF_RPM411_PRESSURE_DATA;k++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	643b      	str	r3, [r7, #64]	; 0x40
 80012ac:	e01a      	b.n	80012e4 <RPM411ReadPressure+0x128>
	{
		HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2104      	movs	r1, #4
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <RPM411ReadPressure+0x15c>)
 80012b4:	f004 fb7a 	bl	80059ac <HAL_GPIO_WritePin>
		HAL_Status = HAL_SPI_Receive(hspi, &pressureDataBuf[k], 1, 1000);
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <RPM411ReadPressure+0x160>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	f107 021c 	add.w	r2, r7, #28
 80012c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c2:	18d1      	adds	r1, r2, r3
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	2201      	movs	r2, #1
 80012ca:	f005 faa2 	bl	8006812 <HAL_SPI_Receive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_GPIO_WritePin(PRESSURE_NSS_GPIO_Port, PRESSURE_NSS_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2104      	movs	r1, #4
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <RPM411ReadPressure+0x15c>)
 80012da:	f004 fb67 	bl	80059ac <HAL_GPIO_WritePin>
	for(int k =0;k<SIZE_OF_RPM411_PRESSURE_DATA;k++)
 80012de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012e0:	3301      	adds	r3, #1
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
 80012e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	dde1      	ble.n	80012ae <RPM411ReadPressure+0xf2>
	}
	if(pressureDataBuf[0] == 0xFF)
 80012ea:	7f3b      	ldrb	r3, [r7, #28]
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d103      	bne.n	80012f8 <RPM411ReadPressure+0x13c>
	{
		RPM411Status = RPM411_FAIL;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80012f6:	e005      	b.n	8001304 <RPM411ReadPressure+0x148>
 80012f8:	f8d7 302f 	ldr.w	r3, [r7, #47]	; 0x2f
	}
	else
	{
		memcpy(&RPM411PressureDataTemp,&pressureDataBuf[19],4);
 80012fc:	61bb      	str	r3, [r7, #24]
		*RPM411PressureData = RPM411PressureDataTemp;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
	}


	return RPM411Status;
 8001304:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001308:	4618      	mov	r0, r3
 800130a:	3750      	adds	r7, #80	; 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	080087dc 	.word	0x080087dc
 8001314:	080087e4 	.word	0x080087e4
 8001318:	40010c00 	.word	0x40010c00
 800131c:	20000044 	.word	0x20000044

08001320 <processBattery>:
#include "radio.h"
#include "batt.h"
#include "config.h"

int processBattery(struct rscode_driver *rsDriver,ADC_HandleTypeDef* hadc)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b09b      	sub	sp, #108	; 0x6c
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t len = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	struct HABPacketBattInfoDataType HABPacketBattInfoData;

	//2032 = 3v
	//1785 = 2.7
	memset(&HABPacketBattInfoData, '\0', sizeof(HABPacketBattInfoData));
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	2210      	movs	r2, #16
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f007 f8b7 	bl	80084b0 <memset>

	HAL_ADC_Start(hadc);
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f003 fd88 	bl	8004e58 <HAL_ADC_Start>
	HAL_Status = HAL_ADC_PollForConversion(hadc,100);
 8001348:	2164      	movs	r1, #100	; 0x64
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f003 fe24 	bl	8004f98 <HAL_ADC_PollForConversion>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	if(HAL_Status == HAL_OK)
 8001356:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800135a:	2b00      	cmp	r3, #0
 800135c:	d14f      	bne.n	80013fe <processBattery+0xde>
	{
	  adcVal = HAL_ADC_GetValue(hadc);
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f003 ff20 	bl	80051a4 <HAL_ADC_GetValue>
 8001364:	65f8      	str	r0, [r7, #92]	; 0x5c
	  HAL_ADC_Stop(hadc);
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f003 fdea 	bl	8004f40 <HAL_ADC_Stop>
	  adcValFloat = (float)adcVal / 4095 * 2 * 3.3 * 1.1;
 800136c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800136e:	f7ff fc2b 	bl	8000bc8 <__aeabi_ui2f>
 8001372:	4603      	mov	r3, r0
 8001374:	4940      	ldr	r1, [pc, #256]	; (8001478 <processBattery+0x158>)
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fd32 	bl	8000de0 <__aeabi_fdiv>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fb71 	bl	8000a68 <__addsf3>
 8001386:	4603      	mov	r3, r0
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8ad 	bl	80004e8 <__aeabi_f2d>
 800138e:	a336      	add	r3, pc, #216	; (adr r3, 8001468 <processBattery+0x148>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f900 	bl	8000598 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	a333      	add	r3, pc, #204	; (adr r3, 8001470 <processBattery+0x150>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f8f7 	bl	8000598 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fb03 	bl	80009bc <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	65bb      	str	r3, [r7, #88]	; 0x58
	  adcValFloat = adcValFloat - ADC_BAT_CAL;
 80013ba:	4930      	ldr	r1, [pc, #192]	; (800147c <processBattery+0x15c>)
 80013bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80013be:	f7ff fb51 	bl	8000a64 <__aeabi_fsub>
 80013c2:	4603      	mov	r3, r0
 80013c4:	65bb      	str	r3, [r7, #88]	; 0x58
	  HABPacketBattInfoData.battInfoData = round(adcValFloat*10)/10;
 80013c6:	492e      	ldr	r1, [pc, #184]	; (8001480 <processBattery+0x160>)
 80013c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80013ca:	f7ff fc55 	bl	8000c78 <__aeabi_fmul>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f889 	bl	80004e8 <__aeabi_f2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f007 f883 	bl	80084e8 <round>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <processBattery+0x164>)
 80013e8:	f7ff fa00 	bl	80007ec <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fae2 	bl	80009bc <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f8c7 300a 	str.w	r3, [r7, #10]
	  //HABPacketBattInfoData.battInfoData = round(adcValTemp * 10000.0)/10000.0;
	}

	HABPacketBattInfoData.packetType  = BATT_INFO;
 80013fe:	2388      	movs	r3, #136	; 0x88
 8001400:	813b      	strh	r3, [r7, #8]
	len = sizeof(HABPacketBattInfoData)-sizeof(HABPacketBattInfoData.crc16)-NPAR;
 8001402:	2306      	movs	r3, #6
 8001404:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	HABPacketBattInfoData.crc16 = crc_16((unsigned char *)&HABPacketBattInfoData,len);
 8001408:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fe84 	bl	8002120 <crc_16>
 8001418:	4603      	mov	r3, r0
 800141a:	81fb      	strh	r3, [r7, #14]
	rscode_encode(rsDriver, (unsigned char *)&HABPacketBattInfoData, sizeof(HABPacketBattInfoData)-NPAR, (unsigned char *)&HABPacketBattInfoData);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	f107 0108 	add.w	r1, r7, #8
 8001424:	2208      	movs	r2, #8
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f001 f92a 	bl	8002680 <rscode_encode>
	memcpy(txBuf,&HABPacketBattInfoData,sizeof(HABPacketBattInfoData));
 800142c:	f107 0418 	add.w	r4, r7, #24
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketBattInfoData));
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	2110      	movs	r1, #16
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fe4b 	bl	80040dc <radioTxData>
 8001446:	4603      	mov	r3, r0
 8001448:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	HAL_Delay(PROTOCOL_DELAY);
 800144c:	2064      	movs	r0, #100	; 0x64
 800144e:	f003 fc07 	bl	8004c60 <HAL_Delay>
	if(HAL_Status != HAL_OK)
 8001452:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <processBattery+0x13e>
	{
	status = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	  return status;
 800145e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8001460:	4618      	mov	r0, r3
 8001462:	376c      	adds	r7, #108	; 0x6c
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	66666666 	.word	0x66666666
 800146c:	400a6666 	.word	0x400a6666
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3ff19999 	.word	0x3ff19999
 8001478:	457ff000 	.word	0x457ff000
 800147c:	3ef5c28f 	.word	0x3ef5c28f
 8001480:	41200000 	.word	0x41200000
 8001484:	40240000 	.word	0x40240000

08001488 <copy_poly>:
  int i;
  for (i = 0; i < MAXDEG; i++) dst[i] ^= src[i];
}

void copy_poly (__attribute__((unused)) struct rscode_driver * driver, int dst[], int src[]) 
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < MAXDEG; i++) dst[i] = src[i];
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e00c      	b.n	80014b4 <copy_poly+0x2c>
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	441a      	add	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	440b      	add	r3, r1
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	ddef      	ble.n	800149a <copy_poly+0x12>
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <zero_poly>:
  for (i = 0; i < MAXDEG; i++) poly[i] = gmult(driver, k, poly[i]);
}


void zero_poly (__attribute__((unused)) struct rscode_driver * driver, int poly[]) 
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < MAXDEG; i++) poly[i] = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e008      	b.n	80014e8 <zero_poly+0x22>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	ddf3      	ble.n	80014d6 <zero_poly+0x10>
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <mult_polys>:
}

/* polynomial multiplication */
void
mult_polys (struct rscode_driver * driver, int dst[], int p1[], int p2[])
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b0a6      	sub	sp, #152	; 0x98
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	603b      	str	r3, [r7, #0]
  int i, j;
  int tmp1[MAXDEG*2];
  
  for (i=0; i < (MAXDEG*2); i++) dst[i] = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800150e:	e00b      	b.n	8001528 <mult_polys+0x2e>
 8001510:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	4413      	add	r3, r2
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001522:	3301      	adds	r3, #1
 8001524:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001528:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800152c:	2b1f      	cmp	r3, #31
 800152e:	ddef      	ble.n	8001510 <mult_polys+0x16>
  
  for (i = 0; i < MAXDEG; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001536:	e096      	b.n	8001666 <mult_polys+0x16c>
    for(j=MAXDEG; j<(MAXDEG*2); j++) tmp1[j]=0;
 8001538:	2310      	movs	r3, #16
 800153a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800153e:	e00c      	b.n	800155a <mult_polys+0x60>
 8001540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	3398      	adds	r3, #152	; 0x98
 8001548:	443b      	add	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	f843 2c88 	str.w	r2, [r3, #-136]
 8001550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001554:	3301      	adds	r3, #1
 8001556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800155a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800155e:	2b1f      	cmp	r3, #31
 8001560:	ddee      	ble.n	8001540 <mult_polys+0x46>
    
    /* scale tmp1 by p1[i] */
    for(j=0; j<MAXDEG; j++) tmp1[j]=gmult(driver, p2[j], p1[i]);
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001568:	e01c      	b.n	80015a4 <mult_polys+0xaa>
 800156a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	4413      	add	r3, r2
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f001 f964 	bl	8002852 <gmult>
 800158a:	4602      	mov	r2, r0
 800158c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	3398      	adds	r3, #152	; 0x98
 8001594:	443b      	add	r3, r7
 8001596:	f843 2c88 	str.w	r2, [r3, #-136]
 800159a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800159e:	3301      	adds	r3, #1
 80015a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	ddde      	ble.n	800156a <mult_polys+0x70>
    /* and mult (shift) tmp1 right by i */
    for (j = (MAXDEG*2)-1; j >= i; j--) tmp1[j] = tmp1[j-i];
 80015ac:	231f      	movs	r3, #31
 80015ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015b2:	e015      	b.n	80015e0 <mult_polys+0xe6>
 80015b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	3398      	adds	r3, #152	; 0x98
 80015c2:	443b      	add	r3, r7
 80015c4:	f853 2c88 	ldr.w	r2, [r3, #-136]
 80015c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3398      	adds	r3, #152	; 0x98
 80015d0:	443b      	add	r3, r7
 80015d2:	f843 2c88 	str.w	r2, [r3, #-136]
 80015d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015da:	3b01      	subs	r3, #1
 80015dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80015e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dae3      	bge.n	80015b4 <mult_polys+0xba>
    for (j = 0; j < i; j++) tmp1[j] = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80015f2:	e00c      	b.n	800160e <mult_polys+0x114>
 80015f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	3398      	adds	r3, #152	; 0x98
 80015fc:	443b      	add	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	f843 2c88 	str.w	r2, [r3, #-136]
 8001604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001608:	3301      	adds	r3, #1
 800160a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800160e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001616:	429a      	cmp	r2, r3
 8001618:	dbec      	blt.n	80015f4 <mult_polys+0xfa>
    
    /* add into partial product */
    for(j=0; j < (MAXDEG*2); j++) dst[j] ^= tmp1[j];
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001620:	e018      	b.n	8001654 <mult_polys+0x15a>
 8001622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	3398      	adds	r3, #152	; 0x98
 8001636:	443b      	add	r3, r7
 8001638:	f853 2c88 	ldr.w	r2, [r3, #-136]
 800163c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	68b8      	ldr	r0, [r7, #8]
 8001644:	4403      	add	r3, r0
 8001646:	404a      	eors	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800164e:	3301      	adds	r3, #1
 8001650:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001658:	2b1f      	cmp	r3, #31
 800165a:	dde2      	ble.n	8001622 <mult_polys+0x128>
  for (i = 0; i < MAXDEG; i++) {
 800165c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001660:	3301      	adds	r3, #1
 8001662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001666:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f77f af64 	ble.w	8001538 <mult_polys+0x3e>
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3798      	adds	r7, #152	; 0x98
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <processCallSign>:
#include "radio.h"
#include "cw.h"
#include "callSign.h"

int processCallSign(struct rscode_driver *rsDriver)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b09c      	sub	sp, #112	; 0x70
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 8001684:	2301      	movs	r3, #1
 8001686:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint16_t len = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint8_t txBuf[MTU_SIZE];
	struct HABPacketCallSignDataType HABPacketCallSignData;

	memset(&HABPacketCallSignData, '\0', sizeof(HABPacketCallSignData));
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2219      	movs	r2, #25
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f006 ff0a 	bl	80084b0 <memset>
	HABPacketCallSignData.packetType      = CW_ID;
 800169c:	2344      	movs	r3, #68	; 0x44
 800169e:	81bb      	strh	r3, [r7, #12]
	HABPacketCallSignData.callSignDataLen = strlen(CALL_SIGN);
 80016a0:	2306      	movs	r3, #6
 80016a2:	73bb      	strb	r3, [r7, #14]
	memcpy(HABPacketCallSignData.callSignData,CALL_SIGN,HABPacketCallSignData.callSignDataLen);
 80016a4:	7bbb      	ldrb	r3, [r7, #14]
 80016a6:	461a      	mov	r2, r3
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	3303      	adds	r3, #3
 80016ae:	4930      	ldr	r1, [pc, #192]	; (8001770 <processCallSign+0xf4>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f006 feef 	bl	8008494 <memcpy>
	len = sizeof(HABPacketCallSignData)-sizeof(HABPacketCallSignData.crc16)-NPAR;
 80016b6:	230f      	movs	r3, #15
 80016b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	HABPacketCallSignData.crc16 = crc_16((unsigned char *)&HABPacketCallSignData,len);
 80016bc:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fd2a 	bl	8002120 <crc_16>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f8a7 301b 	strh.w	r3, [r7, #27]
	rscode_encode(rsDriver, (unsigned char *)&HABPacketCallSignData, sizeof(HABPacketCallSignData)-NPAR, (unsigned char *)&HABPacketCallSignData);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	f107 010c 	add.w	r1, r7, #12
 80016da:	2211      	movs	r2, #17
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 ffcf 	bl	8002680 <rscode_encode>
	memcpy(txBuf,&HABPacketCallSignData,sizeof(HABPacketCallSignData));
 80016e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80016e6:	f107 050c 	add.w	r5, r7, #12
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f2:	c403      	stmia	r4!, {r0, r1}
 80016f4:	7022      	strb	r2, [r4, #0]
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketCallSignData));
 80016f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fa:	2119      	movs	r1, #25
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fced 	bl	80040dc <radioTxData>
 8001702:	4603      	mov	r3, r0
 8001704:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	if(HAL_Status != HAL_OK)
 8001708:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <processCallSign+0x98>
	{
	  status = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	HAL_Status = setCW();
 8001714:	f002 fb04 	bl	8003d20 <setCW>
 8001718:	4603      	mov	r3, r0
 800171a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	if(HAL_Status != HAL_OK)
 800171e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <processCallSign+0xae>
	{
	  status = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	sendCallCW(CALL_SIGN,strlen(CALL_SIGN));
 800172a:	2106      	movs	r1, #6
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <processCallSign+0xf4>)
 800172e:	f000 ff77 	bl	8002620 <sendCallCW>
	HAL_Delay(300);
 8001732:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001736:	f003 fa93 	bl	8004c60 <HAL_Delay>
	HAL_Status = setPreamble();
 800173a:	f002 fb0d 	bl	8003d58 <setPreamble>
 800173e:	4603      	mov	r3, r0
 8001740:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	if(HAL_Status != HAL_OK)
 8001744:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <processCallSign+0xd4>
	{
	  status = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	HAL_Status = setGFSK();
 8001750:	f002 faf4 	bl	8003d3c <setGFSK>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	if(HAL_Status != HAL_OK)
 800175a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <processCallSign+0xea>
	{
	  status = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	66fb      	str	r3, [r7, #108]	; 0x6c
	}
	return status;
 8001766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001768:	4618      	mov	r0, r3
 800176a:	3770      	adds	r7, #112	; 0x70
 800176c:	46bd      	mov	sp, r7
 800176e:	bdb0      	pop	{r4, r5, r7, pc}
 8001770:	080087ec 	.word	0x080087ec

08001774 <resetCam>:
 0x00,//xh
 0x00 //xl
};

CAM_StatusTypeDef resetCam(UART_HandleTypeDef *huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	CAM_StatusTypeDef camStatus  = CAM_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t resetCmd[] = { 0x56, 0x00, 0x26, 0x00 };
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <resetCam+0xa4>)
 8001784:	61bb      	str	r3, [r7, #24]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x26, 0x00 };
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <resetCam+0xa8>)
 8001788:	617b      	str	r3, [r7, #20]
	uint8_t rspBuf[4];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,resetCmd,sizeof(resetCmd),1000);
 800178a:	f107 0118 	add.w	r1, r7, #24
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	2204      	movs	r2, #4
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f006 fbaf 	bl	8007ef8 <HAL_UART_Transmit>
 800179a:	4603      	mov	r3, r0
 800179c:	77fb      	strb	r3, [r7, #31]
	if(HAL_Status != HAL_OK)
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <resetCam+0x38>
	{
		camStatus = CAM_FAIL;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017aa:	e02b      	b.n	8001804 <resetCam+0x90>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 80017ac:	f107 030e 	add.w	r3, r7, #14
 80017b0:	f107 0110 	add.w	r1, r7, #16
 80017b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	2204      	movs	r2, #4
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f006 fc1e 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 80017c2:	4603      	mov	r3, r0
 80017c4:	77fb      	strb	r3, [r7, #31]
	  if(received != sizeof(rspBuf))
 80017c6:	89fb      	ldrh	r3, [r7, #14]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d003      	beq.n	80017d4 <resetCam+0x60>
	  {
		  camStatus = CAM_FAIL;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017d2:	e017      	b.n	8001804 <resetCam+0x90>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	e011      	b.n	80017fe <resetCam+0x8a>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 80017da:	f107 0210 	add.w	r2, r7, #16
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	4413      	add	r3, r2
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	f107 0114 	add.w	r1, r7, #20
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	440b      	add	r3, r1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d002      	beq.n	80017f8 <resetCam+0x84>
			  {
				  camStatus = CAM_FAIL;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  for(int i=0;i<sizeof(rspBuf);i++)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	3301      	adds	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d9ea      	bls.n	80017da <resetCam+0x66>
			  }
		  }
	  }
	}

	HAL_Delay(2000);
 8001804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001808:	f003 fa2a 	bl	8004c60 <HAL_Delay>

  return camStatus;
 800180c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001810:	4618      	mov	r0, r3
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	00260056 	.word	0x00260056
 800181c:	00260076 	.word	0x00260076

08001820 <stopTakingPicture>:

  return camStatus;
}

CAM_StatusTypeDef stopTakingPicture(UART_HandleTypeDef *huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af02      	add	r7, sp, #8
 8001826:	6078      	str	r0, [r7, #4]

	CAM_StatusTypeDef camStatus  = CAM_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_StatusTypeDef HAL_Status;

	uint8_t stopTakingPictureCmd[] = { 0x56, 0x00, 0x36, 0x01, 0x03 };
 800182e:	4a2c      	ldr	r2, [pc, #176]	; (80018e0 <stopTakingPicture+0xc0>)
 8001830:	f107 0320 	add.w	r3, r7, #32
 8001834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001838:	6018      	str	r0, [r3, #0]
 800183a:	3304      	adds	r3, #4
 800183c:	7019      	strb	r1, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x36, 0x00, 0x00 };
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <stopTakingPicture+0xc4>)
 8001840:	f107 0318 	add.w	r3, r7, #24
 8001844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001848:	6018      	str	r0, [r3, #0]
 800184a:	3304      	adds	r3, #4
 800184c:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	totReveived     = 0;
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <stopTakingPicture+0xc8>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

	HAL_Status = HAL_UART_Transmit(huart,stopTakingPictureCmd,sizeof(stopTakingPictureCmd),1000);
 8001854:	f107 0120 	add.w	r1, r7, #32
 8001858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185c:	2205      	movs	r2, #5
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f006 fb4a 	bl	8007ef8 <HAL_UART_Transmit>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 800186a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <stopTakingPicture+0x5a>
	{
		camStatus = CAM_FAIL;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001878:	e02c      	b.n	80018d4 <stopTakingPicture+0xb4>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 800187a:	f107 030e 	add.w	r3, r7, #14
 800187e:	f107 0110 	add.w	r1, r7, #16
 8001882:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001886:	9200      	str	r2, [sp, #0]
 8001888:	2205      	movs	r2, #5
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f006 fbb7 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d003      	beq.n	80018a4 <stopTakingPicture+0x84>
	  {
		camStatus = CAM_FAIL;
 800189c:	2301      	movs	r3, #1
 800189e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80018a2:	e017      	b.n	80018d4 <stopTakingPicture+0xb4>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a8:	e011      	b.n	80018ce <stopTakingPicture+0xae>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 80018aa:	f107 0210 	add.w	r2, r7, #16
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	4413      	add	r3, r2
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	f107 0118 	add.w	r1, r7, #24
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	440b      	add	r3, r1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d002      	beq.n	80018c8 <stopTakingPicture+0xa8>
			  {
				camStatus = CAM_FAIL;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	3301      	adds	r3, #1
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d9ea      	bls.n	80018aa <stopTakingPicture+0x8a>
			  }
		  }
	  }
	}

  return camStatus;
 80018d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3730      	adds	r7, #48	; 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08008804 	.word	0x08008804
 80018e4:	080087fc 	.word	0x080087fc
 80018e8:	20000048 	.word	0x20000048

080018ec <setPhotoSize>:

CAM_StatusTypeDef setPhotoSize(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	; 0x38
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint8_t setPhotoSizeCmd[] = { 0x56, 0x00, 0x31, 0x05, 0x04, 0x01, 0x00, 0x19, 0x00 };
 80018fa:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <setPhotoSize+0xb8>)
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	ca07      	ldmia	r2, {r0, r1, r2}
 8001902:	c303      	stmia	r3!, {r0, r1}
 8001904:	701a      	strb	r2, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x31, 0x00, 0x00 };
 8001906:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <setPhotoSize+0xbc>)
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001910:	6018      	str	r0, [r3, #0]
 8001912:	3304      	adds	r3, #4
 8001914:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,setPhotoSizeCmd,sizeof(setPhotoSizeCmd),1000);
 8001916:	f107 011c 	add.w	r1, r7, #28
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	2209      	movs	r2, #9
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f006 fae9 	bl	8007ef8 <HAL_UART_Transmit>
 8001926:	4603      	mov	r3, r0
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 800192c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <setPhotoSize+0x50>
	{
		camStatus = CAM_FAIL;
 8001934:	2301      	movs	r3, #1
 8001936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800193a:	e02c      	b.n	8001996 <setPhotoSize+0xaa>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 800193c:	f107 030a 	add.w	r3, r7, #10
 8001940:	f107 010c 	add.w	r1, r7, #12
 8001944:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001948:	9200      	str	r2, [sp, #0]
 800194a:	2205      	movs	r2, #5
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f006 fb56 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8001952:	4603      	mov	r3, r0
 8001954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	2b05      	cmp	r3, #5
 800195c:	d003      	beq.n	8001966 <setPhotoSize+0x7a>
	  {
		camStatus = CAM_FAIL;
 800195e:	2301      	movs	r3, #1
 8001960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001964:	e017      	b.n	8001996 <setPhotoSize+0xaa>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
 800196a:	e011      	b.n	8001990 <setPhotoSize+0xa4>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 800196c:	f107 020c 	add.w	r2, r7, #12
 8001970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001972:	4413      	add	r3, r2
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	f107 0114 	add.w	r1, r7, #20
 800197a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197c:	440b      	add	r3, r1
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d002      	beq.n	800198a <setPhotoSize+0x9e>
			  {
				camStatus = CAM_FAIL;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	3301      	adds	r3, #1
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	2b04      	cmp	r3, #4
 8001994:	d9ea      	bls.n	800196c <setPhotoSize+0x80>
			  }
		  }
	  }
	}

	return camStatus;
 8001996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800199a:	4618      	mov	r0, r3
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0800880c 	.word	0x0800880c
 80019a8:	08008818 	.word	0x08008818

080019ac <setCompression>:


CAM_StatusTypeDef setCompression(UART_HandleTypeDef *huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	6078      	str	r0, [r7, #4]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint8_t setCompressionCmd[] = { 0x56, 0x00, 0x31, 0x05, 0x01, 0x01, 0x12, 0x04, 0x36 };
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <setCompression+0xb8>)
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c2:	c303      	stmia	r3!, {r0, r1}
 80019c4:	701a      	strb	r2, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x31, 0x00, 0x00 };
 80019c6:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <setCompression+0xbc>)
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d0:	6018      	str	r0, [r3, #0]
 80019d2:	3304      	adds	r3, #4
 80019d4:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,setCompressionCmd,sizeof(setCompressionCmd),1000);
 80019d6:	f107 011c 	add.w	r1, r7, #28
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	2209      	movs	r2, #9
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f006 fa89 	bl	8007ef8 <HAL_UART_Transmit>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 80019ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <setCompression+0x50>
	{
		camStatus = CAM_FAIL;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80019fa:	e02c      	b.n	8001a56 <setCompression+0xaa>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 80019fc:	f107 030a 	add.w	r3, r7, #10
 8001a00:	f107 010c 	add.w	r1, r7, #12
 8001a04:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	2205      	movs	r2, #5
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f006 faf6 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 8001a18:	897b      	ldrh	r3, [r7, #10]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d003      	beq.n	8001a26 <setCompression+0x7a>
	  {
		camStatus = CAM_FAIL;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a24:	e017      	b.n	8001a56 <setCompression+0xaa>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a2a:	e011      	b.n	8001a50 <setCompression+0xa4>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 8001a2c:	f107 020c 	add.w	r2, r7, #12
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	4413      	add	r3, r2
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	f107 0114 	add.w	r1, r7, #20
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	440b      	add	r3, r1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d002      	beq.n	8001a4a <setCompression+0x9e>
			  {
				camStatus = CAM_FAIL;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d9ea      	bls.n	8001a2c <setCompression+0x80>
			  }
		  }
	  }
	}

	return camStatus;
 8001a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3730      	adds	r7, #48	; 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	08008820 	.word	0x08008820
 8001a68:	08008818 	.word	0x08008818

08001a6c <getLenOfPhoto>:

CAM_StatusTypeDef getLenOfPhoto(UART_HandleTypeDef *huart, uint16_t *len)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b090      	sub	sp, #64	; 0x40
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_StatusTypeDef HAL_Status;

	uint16_t rtnLen;
	uint16_t picLen   = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t rem      = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t wholeNum = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	857b      	strh	r3, [r7, #42]	; 0x2a

	uint8_t getLenOfPhotoCmd[] = { 0x56, 0x00, 0x34, 0x01, 0x00};
 8001a88:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <getLenOfPhoto+0x13c>)
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a92:	6018      	str	r0, [r3, #0]
 8001a94:	3304      	adds	r3, #4
 8001a96:	7019      	strb	r1, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x34, 0x00, 0x04, 0x00, 0x00};
 8001a98:	4a44      	ldr	r2, [pc, #272]	; (8001bac <getLenOfPhoto+0x140>)
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa2:	6018      	str	r0, [r3, #0]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	8019      	strh	r1, [r3, #0]
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	0c0a      	lsrs	r2, r1, #16
 8001aac:	701a      	strb	r2, [r3, #0]
	uint8_t rspBuf[9];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,getLenOfPhotoCmd,sizeof(getLenOfPhotoCmd),1000);
 8001aae:	f107 0120 	add.w	r1, r7, #32
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	2205      	movs	r2, #5
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f006 fa1d 	bl	8007ef8 <HAL_UART_Transmit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	if(HAL_Status != HAL_OK)
 8001ac4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <getLenOfPhoto+0x68>
	{
		camStatus = CAM_FAIL;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ad2:	e062      	b.n	8001b9a <getLenOfPhoto+0x12e>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 8001ad4:	f107 030a 	add.w	r3, r7, #10
 8001ad8:	f107 010c 	add.w	r1, r7, #12
 8001adc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	2209      	movs	r2, #9
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f006 fa8a 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  if(received != sizeof(rspBuf))
 8001af0:	897b      	ldrh	r3, [r7, #10]
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d003      	beq.n	8001afe <getLenOfPhoto+0x92>
	  {
		 camStatus = CAM_FAIL;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001afc:	e04d      	b.n	8001b9a <getLenOfPhoto+0x12e>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf)-2;i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
 8001b02:	e011      	b.n	8001b28 <getLenOfPhoto+0xbc>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	f107 0118 	add.w	r1, r7, #24
 8001b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b14:	440b      	add	r3, r1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d002      	beq.n	8001b22 <getLenOfPhoto+0xb6>
			  {
				 camStatus = CAM_FAIL;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  for(int i=0;i<sizeof(rspBuf)-2;i++)
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	3301      	adds	r3, #1
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d9ea      	bls.n	8001b04 <getLenOfPhoto+0x98>
			  }
		  }

		  if(camStatus == CAM_OK)
 8001b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d131      	bne.n	8001b9a <getLenOfPhoto+0x12e>
		  {
			  rtnLen = (uint16_t)(rspBuf[sizeof(rspBuf)-2] << 8 | rspBuf[sizeof(rspBuf)-1]);
 8001b36:	7cfb      	ldrb	r3, [r7, #19]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	7d3b      	ldrb	r3, [r7, #20]
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	84fb      	strh	r3, [r7, #38]	; 0x26

			  if( (rtnLen % IMG_BUF_DATA_SIZE) != 0 )
 8001b46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b48:	08d3      	lsrs	r3, r2, #3
 8001b4a:	4919      	ldr	r1, [pc, #100]	; (8001bb0 <getLenOfPhoto+0x144>)
 8001b4c:	fba1 3103 	umull	r3, r1, r1, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	1a5b      	subs	r3, r3, r1
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d019      	beq.n	8001b94 <getLenOfPhoto+0x128>
			  {
					wholeNum = rtnLen/IMG_BUF_DATA_SIZE;
 8001b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <getLenOfPhoto+0x144>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	857b      	strh	r3, [r7, #42]	; 0x2a
					wholeNum++;
 8001b6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b6e:	3301      	adds	r3, #1
 8001b70:	857b      	strh	r3, [r7, #42]	; 0x2a
					rem = ( wholeNum * IMG_BUF_DATA_SIZE) - rtnLen;
 8001b72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b74:	461a      	mov	r2, r3
 8001b76:	00d2      	lsls	r2, r2, #3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	85bb      	strh	r3, [r7, #44]	; 0x2c
					picLen = rtnLen + rem;
 8001b84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b88:	4413      	add	r3, r2
 8001b8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
					*len = picLen;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	e002      	b.n	8001b9a <getLenOfPhoto+0x12e>

			  }
			  else
			  {
				  *len = rtnLen;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b98:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	}

	return camStatus;
 8001b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	0800882c 	.word	0x0800882c
 8001bac:	08008834 	.word	0x08008834
 8001bb0:	24924925 	.word	0x24924925

08001bb4 <takePhoto>:

CAM_StatusTypeDef takePhoto(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
	CAM_StatusTypeDef camStatus  = CAM_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint8_t takePhotoCmd[] = { 0x56, 0x00, 0x36, 0x01, 0x00 };
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <takePhoto+0xbc>)
 8001bc4:	f107 0320 	add.w	r3, r7, #32
 8001bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bcc:	6018      	str	r0, [r3, #0]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	7019      	strb	r1, [r3, #0]
	uint8_t expectedRsp[] = {0x76, 0x00, 0x36, 0x00, 0x00 };
 8001bd2:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <takePhoto+0xc0>)
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bdc:	6018      	str	r0, [r3, #0]
 8001bde:	3304      	adds	r3, #4
 8001be0:	7019      	strb	r1, [r3, #0]
	uint8_t rspBuf[5];
	uint16_t received;

	HAL_Status = HAL_UART_Transmit(huart,takePhotoCmd,sizeof(takePhotoCmd),1000);
 8001be2:	f107 0120 	add.w	r1, r7, #32
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	2205      	movs	r2, #5
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f006 f983 	bl	8007ef8 <HAL_UART_Transmit>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(HAL_Status != HAL_OK)
 8001bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <takePhoto+0x54>
	{
		camStatus = CAM_FAIL;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c06:	e02c      	b.n	8001c62 <takePhoto+0xae>
	}
	else
	{
	  HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 8001c08:	f107 030e 	add.w	r3, r7, #14
 8001c0c:	f107 0110 	add.w	r1, r7, #16
 8001c10:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c14:	9200      	str	r2, [sp, #0]
 8001c16:	2205      	movs	r2, #5
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f006 f9f0 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(received != sizeof(rspBuf))
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d003      	beq.n	8001c32 <takePhoto+0x7e>
	  {
		  camStatus = CAM_FAIL;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c30:	e017      	b.n	8001c62 <takePhoto+0xae>
	  }
	  else
	  {
		  for(int i=0;i<sizeof(rspBuf);i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c36:	e011      	b.n	8001c5c <takePhoto+0xa8>
		  {
			  if(rspBuf[i] != expectedRsp[i])
 8001c38:	f107 0210 	add.w	r2, r7, #16
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	4413      	add	r3, r2
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	f107 0118 	add.w	r1, r7, #24
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	440b      	add	r3, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d002      	beq.n	8001c56 <takePhoto+0xa2>
			  {
				  camStatus = CAM_FAIL;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  for(int i=0;i<sizeof(rspBuf);i++)
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	3301      	adds	r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d9ea      	bls.n	8001c38 <takePhoto+0x84>
			  }
		  }
	  }
	}

  return camStatus;
 8001c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	0800883c 	.word	0x0800883c
 8001c74:	080087fc 	.word	0x080087fc

08001c78 <readData>:

CAM_StatusTypeDef readData(UART_HandleTypeDef *huart, uint8_t camDataBuf[], uint16_t *len )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	; 0x38
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
	CAM_StatusTypeDef status = CAM_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef HAL_Status;

	uint16_t received;

	uint16_t k = CAM_DATA_LEN; // packet size
 8001c8a:	2338      	movs	r3, #56	; 0x38
 8001c8c:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t x = 0; //interval time xx xx * 0.01m[sec]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	843b      	strh	r3, [r7, #32]
	uint8_t adrMSB;
	uint8_t adrLSB;
	uint8_t intervalMSB;
	uint8_t intervalLSB;

	adrMSB = totReveived >> 8;
 8001c92:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <readData+0x164>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	121b      	asrs	r3, r3, #8
 8001c98:	77fb      	strb	r3, [r7, #31]
	adrLSB = (uint8_t)totReveived;
 8001c9a:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <readData+0x164>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	77bb      	strb	r3, [r7, #30]
	readDataCmd[8] = adrMSB;
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <readData+0x168>)
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
 8001ca4:	7213      	strb	r3, [r2, #8]
	readDataCmd[9] = adrLSB;
 8001ca6:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <readData+0x168>)
 8001ca8:	7fbb      	ldrb	r3, [r7, #30]
 8001caa:	7253      	strb	r3, [r2, #9]

	lenMSB = k >> 8;
 8001cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	777b      	strb	r3, [r7, #29]
	lenLSB = (uint8_t)k;
 8001cb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cb6:	773b      	strb	r3, [r7, #28]
	readDataCmd[12] = lenMSB;
 8001cb8:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <readData+0x168>)
 8001cba:	7f7b      	ldrb	r3, [r7, #29]
 8001cbc:	7313      	strb	r3, [r2, #12]
	readDataCmd[13] = lenLSB;
 8001cbe:	4a48      	ldr	r2, [pc, #288]	; (8001de0 <readData+0x168>)
 8001cc0:	7f3b      	ldrb	r3, [r7, #28]
 8001cc2:	7353      	strb	r3, [r2, #13]

	intervalMSB = x >> 8;
 8001cc4:	8c3b      	ldrh	r3, [r7, #32]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	76fb      	strb	r3, [r7, #27]
	intervalLSB = (uint8_t)x;
 8001ccc:	8c3b      	ldrh	r3, [r7, #32]
 8001cce:	76bb      	strb	r3, [r7, #26]
	readDataCmd[14] = intervalMSB;
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <readData+0x168>)
 8001cd2:	7efb      	ldrb	r3, [r7, #27]
 8001cd4:	7393      	strb	r3, [r2, #14]
	readDataCmd[15] = intervalLSB;
 8001cd6:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <readData+0x168>)
 8001cd8:	7ebb      	ldrb	r3, [r7, #26]
 8001cda:	73d3      	strb	r3, [r2, #15]

	status = CAM_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	HAL_Status = HAL_UART_Transmit(huart,readDataCmd,sizeof(readDataCmd),1000);
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	493d      	ldr	r1, [pc, #244]	; (8001de0 <readData+0x168>)
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f006 f904 	bl	8007ef8 <HAL_UART_Transmit>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	767b      	strb	r3, [r7, #25]
	if(HAL_Status != HAL_OK)
 8001cf4:	7e7b      	ldrb	r3, [r7, #25]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <readData+0x8a>
	{
		status = CAM_FAIL;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d00:	e028      	b.n	8001d54 <readData+0xdc>
	}
	else
	{
		HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, header, sizeof(header), &received, 3000);
 8001d02:	f107 0316 	add.w	r3, r7, #22
 8001d06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d0a:	9200      	str	r2, [sp, #0]
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	4935      	ldr	r1, [pc, #212]	; (8001de4 <readData+0x16c>)
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f006 f974 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8001d16:	4603      	mov	r3, r0
 8001d18:	767b      	strb	r3, [r7, #25]
		if(received != sizeof(header))
 8001d1a:	8afb      	ldrh	r3, [r7, #22]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d003      	beq.n	8001d28 <readData+0xb0>
		{
			 status = CAM_FAIL;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d26:	e015      	b.n	8001d54 <readData+0xdc>
		}
		else
		{
			for(int i=0;i<sizeof(header);i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2c:	e00f      	b.n	8001d4e <readData+0xd6>
			{
				if(header[i] != headerRsp[i])
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <readData+0x16c>)
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	4413      	add	r3, r2
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	492c      	ldr	r1, [pc, #176]	; (8001de8 <readData+0x170>)
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	440b      	add	r3, r1
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d002      	beq.n	8001d48 <readData+0xd0>
				{
					status = CAM_FAIL;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(int i=0;i<sizeof(header);i++)
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d9ec      	bls.n	8001d2e <readData+0xb6>
				}
			}
		}
	}

	if(status == CAM_OK)
 8001d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d138      	bne.n	8001dce <readData+0x156>
	{
		HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, camDataBuf, CAM_DATA_LEN, &received, 3000);
 8001d5c:	f107 0316 	add.w	r3, r7, #22
 8001d60:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	2238      	movs	r2, #56	; 0x38
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f006 f947 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8001d70:	4603      	mov	r3, r0
 8001d72:	767b      	strb	r3, [r7, #25]
		if(received != CAM_DATA_LEN)
 8001d74:	8afb      	ldrh	r3, [r7, #22]
 8001d76:	2b38      	cmp	r3, #56	; 0x38
 8001d78:	d003      	beq.n	8001d82 <readData+0x10a>
		{
		  status = CAM_FAIL;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d80:	e025      	b.n	8001dce <readData+0x156>
		}
		else
		{
			*len = received;
 8001d82:	8afa      	ldrh	r2, [r7, #22]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	801a      	strh	r2, [r3, #0]
			totReveived = totReveived + received;
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <readData+0x164>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <readData+0x164>)
 8001d94:	6013      	str	r3, [r2, #0]
			for(int i=0;i<received;i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	e013      	b.n	8001dc4 <readData+0x14c>
			{
				if((camDataBuf[i-1] == 0xff) && (camDataBuf[i-0] == 0xD9))
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2bff      	cmp	r3, #255	; 0xff
 8001da8:	d109      	bne.n	8001dbe <readData+0x146>
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2bd9      	cmp	r3, #217	; 0xd9
 8001db4:	d103      	bne.n	8001dbe <readData+0x146>
				{
					status = CAM_END;
 8001db6:	2302      	movs	r3, #2
 8001db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 8001dbc:	e007      	b.n	8001dce <readData+0x156>
			for(int i=0;i<received;i++)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	8afb      	ldrh	r3, [r7, #22]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	dbe6      	blt.n	8001d9c <readData+0x124>
				}
			}
		}
	}

	return status;
 8001dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3730      	adds	r7, #48	; 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000048 	.word	0x20000048
 8001de0:	20000008 	.word	0x20000008
 8001de4:	200000b0 	.word	0x200000b0
 8001de8:	20000000 	.word	0x20000000

08001dec <processCAM>:

CAM_StatusTypeDef processCAM(UART_HandleTypeDef *huart,struct rscode_driver *rsDriver)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b0a4      	sub	sp, #144	; 0x90
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef HAL_Status;
	CAM_StatusTypeDef camStatus  = CAM_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint16_t imageLen     = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint16_t imageXferLen = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    uint16_t len          = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	static uint16_t  imageSeqnum = 0;

	uint8_t txBuf[MTU_SIZE];
	uint8_t camDataBuf[CAM_DATA_LEN];

	switch(CAM_State)
 8001e0e:	4bbd      	ldr	r3, [pc, #756]	; (8002104 <processCAM+0x318>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	f200 816f 	bhi.w	80020f6 <processCAM+0x30a>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <processCAM+0x34>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e31 	.word	0x08001e31
 8001e24:	08001e61 	.word	0x08001e61
 8001e28:	08001f69 	.word	0x08001f69
 8001e2c:	0800205d 	.word	0x0800205d
	{
		case CAM_SETUP:
		{
			camStatus = setPhotoSize(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff fd5b 	bl	80018ec <setPhotoSize>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			camStatus = resetCam(huart);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fc99 	bl	8001774 <resetCam>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(camStatus == CAM_OK)
 8001e48:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d103      	bne.n	8001e58 <processCAM+0x6c>
			{
				CAM_State = CAM_TAKE_PIC;
 8001e50:	4bac      	ldr	r3, [pc, #688]	; (8002104 <processCAM+0x318>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				CAM_State = CAM_SETUP;
			}
			break;
 8001e56:	e14e      	b.n	80020f6 <processCAM+0x30a>
				CAM_State = CAM_SETUP;
 8001e58:	4baa      	ldr	r3, [pc, #680]	; (8002104 <processCAM+0x318>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
			break;
 8001e5e:	e14a      	b.n	80020f6 <processCAM+0x30a>
		}
		case CAM_TAKE_PIC:
		{
			camStatus = stopTakingPicture(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fcdd 	bl	8001820 <stopTakingPicture>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			HAL_Delay(500);
 8001e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e70:	f002 fef6 	bl	8004c60 <HAL_Delay>
			camStatus =  setCompression(huart);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fd99 	bl	80019ac <setCompression>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(camStatus == CAM_OK)
 8001e80:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f040 8133 	bne.w	80020f0 <processCAM+0x304>
			{
				camStatus = takePhoto(huart);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe92 	bl	8001bb4 <takePhoto>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				if(camStatus == CAM_OK)
 8001e96:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d160      	bne.n	8001f60 <processCAM+0x174>
				{
					camStatus = getLenOfPhoto(huart, &imageLen);
 8001e9e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fde1 	bl	8001a6c <getLenOfPhoto>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if(camStatus == CAM_OK)
 8001eb0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d14f      	bne.n	8001f58 <processCAM+0x16c>
					{
						imageSeqnum = 0;
 8001eb8:	4b93      	ldr	r3, [pc, #588]	; (8002108 <processCAM+0x31c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
						memset(&HABPacketImageStart,'\0',sizeof(HABPacketImageStart));
 8001ebe:	2211      	movs	r2, #17
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4892      	ldr	r0, [pc, #584]	; (800210c <processCAM+0x320>)
 8001ec4:	f006 faf4 	bl	80084b0 <memset>
						HABPacketImageStart.packetType  = START_IMAGE;
 8001ec8:	4b90      	ldr	r3, [pc, #576]	; (800210c <processCAM+0x320>)
 8001eca:	22ff      	movs	r2, #255	; 0xff
 8001ecc:	801a      	strh	r2, [r3, #0]
						HABPacketImageStart.imageFileID = imageFileID;
 8001ece:	4b90      	ldr	r3, [pc, #576]	; (8002110 <processCAM+0x324>)
 8001ed0:	781a      	ldrb	r2, [r3, #0]
 8001ed2:	4b8e      	ldr	r3, [pc, #568]	; (800210c <processCAM+0x320>)
 8001ed4:	709a      	strb	r2, [r3, #2]
						HABPacketImageStart.fileSize    = imageLen;
 8001ed6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b8b      	ldr	r3, [pc, #556]	; (800210c <processCAM+0x320>)
 8001ede:	f8c3 2003 	str.w	r2, [r3, #3]
						len = sizeof(HABPacketImageStart)-sizeof(HABPacketImageStart.crc16)-NPAR;
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
						HABPacketImageStart.crc16 = crc_16((unsigned char *)&HABPacketImageStart,len);
 8001ee8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001eec:	4619      	mov	r1, r3
 8001eee:	4887      	ldr	r0, [pc, #540]	; (800210c <processCAM+0x320>)
 8001ef0:	f000 f916 	bl	8002120 <crc_16>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b84      	ldr	r3, [pc, #528]	; (800210c <processCAM+0x320>)
 8001efa:	f8a3 2007 	strh.w	r2, [r3, #7]
						rscode_encode(rsDriver, (unsigned char *)&HABPacketImageStart, sizeof(HABPacketImageStart)-NPAR, (unsigned char *)&HABPacketImageStart);
 8001efe:	4b83      	ldr	r3, [pc, #524]	; (800210c <processCAM+0x320>)
 8001f00:	2209      	movs	r2, #9
 8001f02:	4982      	ldr	r1, [pc, #520]	; (800210c <processCAM+0x320>)
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f000 fbbb 	bl	8002680 <rscode_encode>

						memset(&txBuf,'\0',sizeof(txBuf));
 8001f0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f006 facc 	bl	80084b0 <memset>
						memcpy(txBuf,&HABPacketImageStart,sizeof(HABPacketImageStart));
 8001f18:	4b7c      	ldr	r3, [pc, #496]	; (800210c <processCAM+0x320>)
 8001f1a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001f1e:	461d      	mov	r5, r3
 8001f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f24:	682b      	ldr	r3, [r5, #0]
 8001f26:	7023      	strb	r3, [r4, #0]
						HAL_Status =  radioTxData(txBuf,sizeof(HABPacketImageStart));
 8001f28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f2c:	2111      	movs	r1, #17
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 f8d4 	bl	80040dc <radioTxData>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
						HAL_Delay(500);
 8001f3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3e:	f002 fe8f 	bl	8004c60 <HAL_Delay>
						if(HAL_Status != HAL_OK)
 8001f42:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <processCAM+0x164>
						{
							CAM_State = CAM_SETUP;
 8001f4a:	4b6e      	ldr	r3, [pc, #440]	; (8002104 <processCAM+0x318>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
						}
						CAM_State = CAM_DATA_XFER;
 8001f50:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <processCAM+0x318>)
 8001f52:	2202      	movs	r2, #2
 8001f54:	701a      	strb	r2, [r3, #0]
				else
				{
					CAM_State = CAM_TAKE_PIC;
				}
			}
			break;
 8001f56:	e0cb      	b.n	80020f0 <processCAM+0x304>
						CAM_State = CAM_SETUP;
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <processCAM+0x318>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
			break;
 8001f5e:	e0c7      	b.n	80020f0 <processCAM+0x304>
					CAM_State = CAM_TAKE_PIC;
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <processCAM+0x318>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
			break;
 8001f66:	e0c3      	b.n	80020f0 <processCAM+0x304>
		}
		case CAM_DATA_XFER:
		{
			camStatus =  readData(huart, camDataBuf, &imageXferLen);
 8001f68:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fe80 	bl	8001c78 <readData>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			switch(camStatus)
 8001f7e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d007      	beq.n	8001f96 <processCAM+0x1aa>
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	f300 80b4 	bgt.w	80020f4 <processCAM+0x308>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <processCAM+0x1aa>
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d05e      	beq.n	8002052 <processCAM+0x266>
				{
					CAM_State = CAM_TAKE_PIC;
					break;
				}
			}
			break;
 8001f94:	e0ae      	b.n	80020f4 <processCAM+0x308>
					HABPacketImageData.packetType = IMAGE_DATA;
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <processCAM+0x328>)
 8001f98:	22ee      	movs	r2, #238	; 0xee
 8001f9a:	801a      	strh	r2, [r3, #0]
					HABPacketImageData.imageFileID = imageFileID;
 8001f9c:	4b5c      	ldr	r3, [pc, #368]	; (8002110 <processCAM+0x324>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <processCAM+0x328>)
 8001fa2:	709a      	strb	r2, [r3, #2]
					HABPacketImageData.imageSeqnum = imageSeqnum;
 8001fa4:	4b58      	ldr	r3, [pc, #352]	; (8002108 <processCAM+0x31c>)
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <processCAM+0x328>)
 8001faa:	f8a3 2003 	strh.w	r2, [r3, #3]
					HABPacketImageData.imageDataLen = imageXferLen;
 8001fae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b57      	ldr	r3, [pc, #348]	; (8002114 <processCAM+0x328>)
 8001fb6:	715a      	strb	r2, [r3, #5]
					memcpy(&HABPacketImageData.imageData,&camDataBuf,HABPacketImageData.imageDataLen);
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <processCAM+0x328>)
 8001fba:	795b      	ldrb	r3, [r3, #5]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4854      	ldr	r0, [pc, #336]	; (8002118 <processCAM+0x32c>)
 8001fc6:	f006 fa65 	bl	8008494 <memcpy>
					len = sizeof(HABPacketImageData)-sizeof(HABPacketImageData.crc16);
 8001fca:	233e      	movs	r3, #62	; 0x3e
 8001fcc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
					HABPacketImageData.crc16 = crc_16((unsigned char *)&HABPacketImageData,len);
 8001fd0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	484f      	ldr	r0, [pc, #316]	; (8002114 <processCAM+0x328>)
 8001fd8:	f000 f8a2 	bl	8002120 <crc_16>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <processCAM+0x328>)
 8001fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
					memset(&txBuf,'\0',sizeof(txBuf));
 8001fe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f006 fa5f 	bl	80084b0 <memset>
					memcpy(txBuf,&HABPacketImageData,sizeof(HABPacketImageData));
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <processCAM+0x328>)
 8001ff4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002006:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800200a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					HAL_Status =  radioTxData(txBuf,sizeof(HABPacketImageData));
 800200e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002012:	2140      	movs	r1, #64	; 0x40
 8002014:	4618      	mov	r0, r3
 8002016:	f002 f861 	bl	80040dc <radioTxData>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
					HAL_Delay(15);
 8002020:	200f      	movs	r0, #15
 8002022:	f002 fe1d 	bl	8004c60 <HAL_Delay>
					if(HAL_Status != HAL_OK)
 8002026:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <processCAM+0x24a>
						CAM_State = CAM_SETUP;
 800202e:	4b35      	ldr	r3, [pc, #212]	; (8002104 <processCAM+0x318>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e006      	b.n	8002044 <processCAM+0x258>
						if(camStatus == CAM_END)
 8002036:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800203a:	2b02      	cmp	r3, #2
 800203c:	d102      	bne.n	8002044 <processCAM+0x258>
							CAM_State = CAM_END_XFER;
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <processCAM+0x318>)
 8002040:	2203      	movs	r2, #3
 8002042:	701a      	strb	r2, [r3, #0]
					imageSeqnum = imageSeqnum + 1;
 8002044:	4b30      	ldr	r3, [pc, #192]	; (8002108 <processCAM+0x31c>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <processCAM+0x31c>)
 800204e:	801a      	strh	r2, [r3, #0]
					break;
 8002050:	e003      	b.n	800205a <processCAM+0x26e>
					CAM_State = CAM_TAKE_PIC;
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <processCAM+0x318>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
					break;
 8002058:	bf00      	nop
			break;
 800205a:	e04b      	b.n	80020f4 <processCAM+0x308>
		}
		case CAM_END_XFER:
		{

			HABPacketImageEnd.packetType    = END_IMAGE;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <processCAM+0x330>)
 800205e:	22dd      	movs	r2, #221	; 0xdd
 8002060:	801a      	strh	r2, [r3, #0]
			HABPacketImageEnd.imageFileID   = imageFileID;
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <processCAM+0x324>)
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <processCAM+0x330>)
 8002068:	709a      	strb	r2, [r3, #2]
			len = sizeof(HABPacketImageEnd)-sizeof(HABPacketImageEnd.crc16)-NPAR;
 800206a:	2303      	movs	r3, #3
 800206c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			HABPacketImageEnd.crc16 = crc_16((unsigned char *)&HABPacketImageEnd,len);
 8002070:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002074:	4619      	mov	r1, r3
 8002076:	4829      	ldr	r0, [pc, #164]	; (800211c <processCAM+0x330>)
 8002078:	f000 f852 	bl	8002120 <crc_16>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <processCAM+0x330>)
 8002082:	f8a3 2003 	strh.w	r2, [r3, #3]
			rscode_encode(rsDriver, (unsigned char *)&HABPacketImageEnd, sizeof(HABPacketImageEnd)-NPAR, (unsigned char *)&HABPacketImageEnd);
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <processCAM+0x330>)
 8002088:	2205      	movs	r2, #5
 800208a:	4924      	ldr	r1, [pc, #144]	; (800211c <processCAM+0x330>)
 800208c:	6838      	ldr	r0, [r7, #0]
 800208e:	f000 faf7 	bl	8002680 <rscode_encode>
			memset(&txBuf,'\0',sizeof(txBuf));
 8002092:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002096:	2240      	movs	r2, #64	; 0x40
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f006 fa08 	bl	80084b0 <memset>
			memcpy(txBuf,&HABPacketImageEnd,sizeof(HABPacketImageEnd));
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <processCAM+0x330>)
 80020a2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80020a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a8:	c407      	stmia	r4!, {r0, r1, r2}
 80020aa:	7023      	strb	r3, [r4, #0]
			HAL_Delay(PROTOCOL_DELAY);
 80020ac:	2064      	movs	r0, #100	; 0x64
 80020ae:	f002 fdd7 	bl	8004c60 <HAL_Delay>
			HAL_Status =  radioTxData(txBuf,sizeof(HABPacketImageEnd));
 80020b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020b6:	210d      	movs	r1, #13
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 f80f 	bl	80040dc <radioTxData>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			HAL_Delay(1000);
 80020c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020c8:	f002 fdca 	bl	8004c60 <HAL_Delay>
			if(HAL_Status == HAL_OK)
 80020cc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <processCAM+0x2fc>
			{
				CAM_State = CAM_TAKE_PIC;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <processCAM+0x318>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
				imageFileID = imageFileID +1;
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <processCAM+0x324>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <processCAM+0x324>)
 80020e4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				CAM_State = CAM_TAKE_PIC;
			}
			break;
 80020e6:	e006      	b.n	80020f6 <processCAM+0x30a>
				CAM_State = CAM_TAKE_PIC;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <processCAM+0x318>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
			break;
 80020ee:	e002      	b.n	80020f6 <processCAM+0x30a>
			break;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <processCAM+0x30a>
			break;
 80020f4:	bf00      	nop
		}
	}

	return camStatus;
 80020f6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
};
 80020fa:	4618      	mov	r0, r3
 80020fc:	3790      	adds	r7, #144	; 0x90
 80020fe:	46bd      	mov	sp, r7
 8002100:	bdb0      	pop	{r4, r5, r7, pc}
 8002102:	bf00      	nop
 8002104:	200000b5 	.word	0x200000b5
 8002108:	200000b6 	.word	0x200000b6
 800210c:	2000008c 	.word	0x2000008c
 8002110:	200000b8 	.word	0x200000b8
 8002114:	2000004c 	.word	0x2000004c
 8002118:	20000052 	.word	0x20000052
 800211c:	200000a0 	.word	0x200000a0

08002120 <crc_16>:
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 */

uint16_t crc_16(unsigned char *input_str, size_t num_bytes )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <crc_16+0x68>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <crc_16+0x1c>
 8002138:	f000 f82a 	bl	8002190 <init_crc16_tab>

	crc = CRC_START_16;
 800213c:	2300      	movs	r3, #0
 800213e:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d018      	beq.n	800217c <crc_16+0x5c>
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e011      	b.n	8002174 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8002150:	8afb      	ldrh	r3, [r7, #22]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	b29a      	uxth	r2, r3
 8002156:	8af9      	ldrh	r1, [r7, #22]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1c58      	adds	r0, r3, #1
 800215c:	6138      	str	r0, [r7, #16]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	404b      	eors	r3, r1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <crc_16+0x6c>)
 8002166:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800216a:	4053      	eors	r3, r2
 800216c:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d3e9      	bcc.n	8002150 <crc_16+0x30>
	}

	return crc;
 800217c:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200000b9 	.word	0x200000b9
 800218c:	200000bc 	.word	0x200000bc

08002190 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8002196:	2300      	movs	r3, #0
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	e029      	b.n	80021f0 <init_crc16_tab+0x60>

		crc = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	807b      	strh	r3, [r7, #2]
		c   = i;
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 80021a4:	2300      	movs	r3, #0
 80021a6:	80bb      	strh	r3, [r7, #4]
 80021a8:	e017      	b.n	80021da <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	883b      	ldrh	r3, [r7, #0]
 80021ae:	4053      	eors	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <init_crc16_tab+0x38>
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <init_crc16_tab+0x78>)
 80021c2:	4053      	eors	r3, r2
 80021c4:	807b      	strh	r3, [r7, #2]
 80021c6:	e002      	b.n	80021ce <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 80021ce:	883b      	ldrh	r3, [r7, #0]
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 80021d4:	88bb      	ldrh	r3, [r7, #4]
 80021d6:	3301      	adds	r3, #1
 80021d8:	80bb      	strh	r3, [r7, #4]
 80021da:	88bb      	ldrh	r3, [r7, #4]
 80021dc:	2b07      	cmp	r3, #7
 80021de:	d9e4      	bls.n	80021aa <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	490a      	ldr	r1, [pc, #40]	; (800220c <init_crc16_tab+0x7c>)
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	3301      	adds	r3, #1
 80021ee:	80fb      	strh	r3, [r7, #6]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	2bff      	cmp	r3, #255	; 0xff
 80021f4:	d9d2      	bls.n	800219c <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <init_crc16_tab+0x80>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	ffffa001 	.word	0xffffa001
 800220c:	200000bc 	.word	0x200000bc
 8002210:	200000b9 	.word	0x200000b9

08002214 <space>:
HAL_StatusTypeDef HAL_Status;
int spaceDelay  = 20;
uint8_t txBuf[] = {0};

void space()
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    HAL_Delay(spaceDelay);
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <space+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fd1f 	bl	8004c60 <HAL_Delay>
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000018 	.word	0x20000018

0800222c <characterSpace>:

void characterSpace()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	HAL_Delay(spaceDelay*9);
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <characterSpace+0x18>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fd10 	bl	8004c60 <HAL_Delay>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000018 	.word	0x20000018

08002248 <dit>:

void dit()
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	HAL_Status = radio_write_register(0x34, 0x60);
 800224c:	2160      	movs	r1, #96	; 0x60
 800224e:	2034      	movs	r0, #52	; 0x34
 8002250:	f001 fdd0 	bl	8003df4 <radio_write_register>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <dit+0x2c>)
 800225a:	701a      	strb	r2, [r3, #0]
	HAL_Status =  radioTxData(txBuf,sizeof(txBuf));
 800225c:	2101      	movs	r1, #1
 800225e:	4806      	ldr	r0, [pc, #24]	; (8002278 <dit+0x30>)
 8002260:	f001 ff3c 	bl	80040dc <radioTxData>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <dit+0x2c>)
 800226a:	701a      	strb	r2, [r3, #0]
	space();
 800226c:	f7ff ffd2 	bl	8002214 <space>
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200002bc 	.word	0x200002bc
 8002278:	200002c0 	.word	0x200002c0

0800227c <dah>:

void dah()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	HAL_Status = radio_write_register(0x34, 0xff);
 8002280:	21ff      	movs	r1, #255	; 0xff
 8002282:	2034      	movs	r0, #52	; 0x34
 8002284:	f001 fdb6 	bl	8003df4 <radio_write_register>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <dah+0x2c>)
 800228e:	701a      	strb	r2, [r3, #0]
	HAL_Status =  radioTxData(txBuf,sizeof(txBuf));
 8002290:	2101      	movs	r1, #1
 8002292:	4806      	ldr	r0, [pc, #24]	; (80022ac <dah+0x30>)
 8002294:	f001 ff22 	bl	80040dc <radioTxData>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <dah+0x2c>)
 800229e:	701a      	strb	r2, [r3, #0]
	space();
 80022a0:	f7ff ffb8 	bl	8002214 <space>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200002bc 	.word	0x200002bc
 80022ac:	200002c0 	.word	0x200002c0

080022b0 <sendCharacter>:

void sendCharacter(char c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
	switch(c)
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	3b20      	subs	r3, #32
 80022be:	2b3a      	cmp	r3, #58	; 0x3a
 80022c0:	f200 81a8 	bhi.w	8002614 <sendCharacter+0x364>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <sendCharacter+0x1c>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	0800260f 	.word	0x0800260f
 80022d0:	08002615 	.word	0x08002615
 80022d4:	08002615 	.word	0x08002615
 80022d8:	08002615 	.word	0x08002615
 80022dc:	08002615 	.word	0x08002615
 80022e0:	08002615 	.word	0x08002615
 80022e4:	08002615 	.word	0x08002615
 80022e8:	08002615 	.word	0x08002615
 80022ec:	08002615 	.word	0x08002615
 80022f0:	08002615 	.word	0x08002615
 80022f4:	08002615 	.word	0x08002615
 80022f8:	08002615 	.word	0x08002615
 80022fc:	08002615 	.word	0x08002615
 8002300:	08002615 	.word	0x08002615
 8002304:	08002615 	.word	0x08002615
 8002308:	08002615 	.word	0x08002615
 800230c:	080025f9 	.word	0x080025f9
 8002310:	08002533 	.word	0x08002533
 8002314:	08002549 	.word	0x08002549
 8002318:	0800255f 	.word	0x0800255f
 800231c:	08002575 	.word	0x08002575
 8002320:	0800258b 	.word	0x0800258b
 8002324:	080025a1 	.word	0x080025a1
 8002328:	080025b7 	.word	0x080025b7
 800232c:	080025cd 	.word	0x080025cd
 8002330:	080025e3 	.word	0x080025e3
 8002334:	08002615 	.word	0x08002615
 8002338:	08002615 	.word	0x08002615
 800233c:	08002615 	.word	0x08002615
 8002340:	08002615 	.word	0x08002615
 8002344:	08002615 	.word	0x08002615
 8002348:	08002615 	.word	0x08002615
 800234c:	08002615 	.word	0x08002615
 8002350:	080023b9 	.word	0x080023b9
 8002354:	080023c3 	.word	0x080023c3
 8002358:	080023d5 	.word	0x080023d5
 800235c:	080023e7 	.word	0x080023e7
 8002360:	080023f5 	.word	0x080023f5
 8002364:	080023fb 	.word	0x080023fb
 8002368:	0800240b 	.word	0x0800240b
 800236c:	08002419 	.word	0x08002419
 8002370:	0800242b 	.word	0x0800242b
 8002374:	08002435 	.word	0x08002435
 8002378:	08002447 	.word	0x08002447
 800237c:	08002455 	.word	0x08002455
 8002380:	08002467 	.word	0x08002467
 8002384:	08002471 	.word	0x08002471
 8002388:	0800247b 	.word	0x0800247b
 800238c:	08002489 	.word	0x08002489
 8002390:	0800249b 	.word	0x0800249b
 8002394:	080024ad 	.word	0x080024ad
 8002398:	080024bb 	.word	0x080024bb
 800239c:	080024c9 	.word	0x080024c9
 80023a0:	080024cf 	.word	0x080024cf
 80023a4:	080024dd 	.word	0x080024dd
 80023a8:	080024ef 	.word	0x080024ef
 80023ac:	080024fd 	.word	0x080024fd
 80023b0:	0800250f 	.word	0x0800250f
 80023b4:	08002521 	.word	0x08002521
	{
		case 'A':
			dit();
 80023b8:	f7ff ff46 	bl	8002248 <dit>
			dah();
 80023bc:	f7ff ff5e 	bl	800227c <dah>
			break;
 80023c0:	e128      	b.n	8002614 <sendCharacter+0x364>
		case 'B':
			dah();
 80023c2:	f7ff ff5b 	bl	800227c <dah>
			dit();
 80023c6:	f7ff ff3f 	bl	8002248 <dit>
			dit();
 80023ca:	f7ff ff3d 	bl	8002248 <dit>
			dit();
 80023ce:	f7ff ff3b 	bl	8002248 <dit>
			break;
 80023d2:	e11f      	b.n	8002614 <sendCharacter+0x364>
		case 'C':
			dah();
 80023d4:	f7ff ff52 	bl	800227c <dah>
			dit();
 80023d8:	f7ff ff36 	bl	8002248 <dit>
			dah();
 80023dc:	f7ff ff4e 	bl	800227c <dah>
			dit();
 80023e0:	f7ff ff32 	bl	8002248 <dit>
			break;
 80023e4:	e116      	b.n	8002614 <sendCharacter+0x364>
		case 'D':
			dah();
 80023e6:	f7ff ff49 	bl	800227c <dah>
			dit();
 80023ea:	f7ff ff2d 	bl	8002248 <dit>
			dit();
 80023ee:	f7ff ff2b 	bl	8002248 <dit>
			break;
 80023f2:	e10f      	b.n	8002614 <sendCharacter+0x364>
		case 'E':
			dit();
 80023f4:	f7ff ff28 	bl	8002248 <dit>
			break;
 80023f8:	e10c      	b.n	8002614 <sendCharacter+0x364>
		case 'F':
			dit();
 80023fa:	f7ff ff25 	bl	8002248 <dit>
			dit();
 80023fe:	f7ff ff23 	bl	8002248 <dit>
			dah();
 8002402:	f7ff ff3b 	bl	800227c <dah>
			dit();
 8002406:	f7ff ff1f 	bl	8002248 <dit>
		case 'G':
			dah();
 800240a:	f7ff ff37 	bl	800227c <dah>
			dah();
 800240e:	f7ff ff35 	bl	800227c <dah>
			dit();
 8002412:	f7ff ff19 	bl	8002248 <dit>
			break;
 8002416:	e0fd      	b.n	8002614 <sendCharacter+0x364>
		case 'H':
			dit();
 8002418:	f7ff ff16 	bl	8002248 <dit>
			dit();
 800241c:	f7ff ff14 	bl	8002248 <dit>
			dit();
 8002420:	f7ff ff12 	bl	8002248 <dit>
			dit();
 8002424:	f7ff ff10 	bl	8002248 <dit>
			break;
 8002428:	e0f4      	b.n	8002614 <sendCharacter+0x364>
		case 'I':
			dit();
 800242a:	f7ff ff0d 	bl	8002248 <dit>
			dit();
 800242e:	f7ff ff0b 	bl	8002248 <dit>
			break;
 8002432:	e0ef      	b.n	8002614 <sendCharacter+0x364>
		case 'J':
			dit();
 8002434:	f7ff ff08 	bl	8002248 <dit>
			dah();
 8002438:	f7ff ff20 	bl	800227c <dah>
			dah();
 800243c:	f7ff ff1e 	bl	800227c <dah>
			dah();
 8002440:	f7ff ff1c 	bl	800227c <dah>
			break;
 8002444:	e0e6      	b.n	8002614 <sendCharacter+0x364>
		case 'K':
			dah();
 8002446:	f7ff ff19 	bl	800227c <dah>
			dit();
 800244a:	f7ff fefd 	bl	8002248 <dit>
			dah();
 800244e:	f7ff ff15 	bl	800227c <dah>
			break;
 8002452:	e0df      	b.n	8002614 <sendCharacter+0x364>
		case 'L':
			dit();
 8002454:	f7ff fef8 	bl	8002248 <dit>
			dah();
 8002458:	f7ff ff10 	bl	800227c <dah>
			dit();
 800245c:	f7ff fef4 	bl	8002248 <dit>
			dit();
 8002460:	f7ff fef2 	bl	8002248 <dit>
			break;
 8002464:	e0d6      	b.n	8002614 <sendCharacter+0x364>
		case 'M':
			dah();
 8002466:	f7ff ff09 	bl	800227c <dah>
			dah();
 800246a:	f7ff ff07 	bl	800227c <dah>
			break;
 800246e:	e0d1      	b.n	8002614 <sendCharacter+0x364>
		case 'N':
			dah();
 8002470:	f7ff ff04 	bl	800227c <dah>
			dit();
 8002474:	f7ff fee8 	bl	8002248 <dit>
			break;
 8002478:	e0cc      	b.n	8002614 <sendCharacter+0x364>
		case 'O':
			dah();
 800247a:	f7ff feff 	bl	800227c <dah>
			dah();
 800247e:	f7ff fefd 	bl	800227c <dah>
			dah();
 8002482:	f7ff fefb 	bl	800227c <dah>
			break;
 8002486:	e0c5      	b.n	8002614 <sendCharacter+0x364>
		case 'P':
			dit();
 8002488:	f7ff fede 	bl	8002248 <dit>
			dah();
 800248c:	f7ff fef6 	bl	800227c <dah>
			dah();
 8002490:	f7ff fef4 	bl	800227c <dah>
			dit();
 8002494:	f7ff fed8 	bl	8002248 <dit>
			break;
 8002498:	e0bc      	b.n	8002614 <sendCharacter+0x364>
		case 'Q':
			dah();
 800249a:	f7ff feef 	bl	800227c <dah>
			dah();
 800249e:	f7ff feed 	bl	800227c <dah>
			dit();
 80024a2:	f7ff fed1 	bl	8002248 <dit>
			dah();
 80024a6:	f7ff fee9 	bl	800227c <dah>
			break;
 80024aa:	e0b3      	b.n	8002614 <sendCharacter+0x364>
		case 'R':
			dit();
 80024ac:	f7ff fecc 	bl	8002248 <dit>
			dah();
 80024b0:	f7ff fee4 	bl	800227c <dah>
			dit();
 80024b4:	f7ff fec8 	bl	8002248 <dit>
			break;
 80024b8:	e0ac      	b.n	8002614 <sendCharacter+0x364>
		case 'S':
			dit();
 80024ba:	f7ff fec5 	bl	8002248 <dit>
			dit();
 80024be:	f7ff fec3 	bl	8002248 <dit>
			dit();
 80024c2:	f7ff fec1 	bl	8002248 <dit>
			break;
 80024c6:	e0a5      	b.n	8002614 <sendCharacter+0x364>
		case 'T':
			dah();
 80024c8:	f7ff fed8 	bl	800227c <dah>
			break;
 80024cc:	e0a2      	b.n	8002614 <sendCharacter+0x364>
		case 'U':
			dit();
 80024ce:	f7ff febb 	bl	8002248 <dit>
			dit();
 80024d2:	f7ff feb9 	bl	8002248 <dit>
			dah();
 80024d6:	f7ff fed1 	bl	800227c <dah>
			break;
 80024da:	e09b      	b.n	8002614 <sendCharacter+0x364>
		case 'V':
			dit();
 80024dc:	f7ff feb4 	bl	8002248 <dit>
			dit();
 80024e0:	f7ff feb2 	bl	8002248 <dit>
			dit();
 80024e4:	f7ff feb0 	bl	8002248 <dit>
			dah();
 80024e8:	f7ff fec8 	bl	800227c <dah>
			break;
 80024ec:	e092      	b.n	8002614 <sendCharacter+0x364>
		case 'W':
			dit();
 80024ee:	f7ff feab 	bl	8002248 <dit>
			dah();
 80024f2:	f7ff fec3 	bl	800227c <dah>
			dah();
 80024f6:	f7ff fec1 	bl	800227c <dah>
			break;
 80024fa:	e08b      	b.n	8002614 <sendCharacter+0x364>
		case 'X':
			dah();
 80024fc:	f7ff febe 	bl	800227c <dah>
			dit();
 8002500:	f7ff fea2 	bl	8002248 <dit>
			dit();
 8002504:	f7ff fea0 	bl	8002248 <dit>
			dah();
 8002508:	f7ff feb8 	bl	800227c <dah>
			break;
 800250c:	e082      	b.n	8002614 <sendCharacter+0x364>
		case 'Y':
			dah();
 800250e:	f7ff feb5 	bl	800227c <dah>
			dit();
 8002512:	f7ff fe99 	bl	8002248 <dit>
			dah();
 8002516:	f7ff feb1 	bl	800227c <dah>
			dah();
 800251a:	f7ff feaf 	bl	800227c <dah>
			break;
 800251e:	e079      	b.n	8002614 <sendCharacter+0x364>
		case 'Z':
			dah();
 8002520:	f7ff feac 	bl	800227c <dah>
			dah();
 8002524:	f7ff feaa 	bl	800227c <dah>
			dit();
 8002528:	f7ff fe8e 	bl	8002248 <dit>
			dit();
 800252c:	f7ff fe8c 	bl	8002248 <dit>
			break;
 8002530:	e070      	b.n	8002614 <sendCharacter+0x364>
		case '1':
			dit();
 8002532:	f7ff fe89 	bl	8002248 <dit>
			dah();
 8002536:	f7ff fea1 	bl	800227c <dah>
			dah();
 800253a:	f7ff fe9f 	bl	800227c <dah>
			dah();
 800253e:	f7ff fe9d 	bl	800227c <dah>
			dah();
 8002542:	f7ff fe9b 	bl	800227c <dah>
			break;
 8002546:	e065      	b.n	8002614 <sendCharacter+0x364>
		case '2':
			dit();
 8002548:	f7ff fe7e 	bl	8002248 <dit>
			dit();
 800254c:	f7ff fe7c 	bl	8002248 <dit>
			dah();
 8002550:	f7ff fe94 	bl	800227c <dah>
			dah();
 8002554:	f7ff fe92 	bl	800227c <dah>
			dah();
 8002558:	f7ff fe90 	bl	800227c <dah>
			break;
 800255c:	e05a      	b.n	8002614 <sendCharacter+0x364>
		case '3':
			dit();
 800255e:	f7ff fe73 	bl	8002248 <dit>
			dit();
 8002562:	f7ff fe71 	bl	8002248 <dit>
			dit();
 8002566:	f7ff fe6f 	bl	8002248 <dit>
			dah();
 800256a:	f7ff fe87 	bl	800227c <dah>
			dah();
 800256e:	f7ff fe85 	bl	800227c <dah>

			break;
 8002572:	e04f      	b.n	8002614 <sendCharacter+0x364>
		case '4':
			dit();
 8002574:	f7ff fe68 	bl	8002248 <dit>
			dit();
 8002578:	f7ff fe66 	bl	8002248 <dit>
			dit();
 800257c:	f7ff fe64 	bl	8002248 <dit>
			dit();
 8002580:	f7ff fe62 	bl	8002248 <dit>
			dah();
 8002584:	f7ff fe7a 	bl	800227c <dah>
			break;
 8002588:	e044      	b.n	8002614 <sendCharacter+0x364>
		case '5':
			dit();
 800258a:	f7ff fe5d 	bl	8002248 <dit>
			dit();
 800258e:	f7ff fe5b 	bl	8002248 <dit>
			dit();
 8002592:	f7ff fe59 	bl	8002248 <dit>
			dit();
 8002596:	f7ff fe57 	bl	8002248 <dit>
			dit();
 800259a:	f7ff fe55 	bl	8002248 <dit>
			break;
 800259e:	e039      	b.n	8002614 <sendCharacter+0x364>
		case '6':
			dah();
 80025a0:	f7ff fe6c 	bl	800227c <dah>
			dit();
 80025a4:	f7ff fe50 	bl	8002248 <dit>
			dit();
 80025a8:	f7ff fe4e 	bl	8002248 <dit>
			dit();
 80025ac:	f7ff fe4c 	bl	8002248 <dit>
			dit();
 80025b0:	f7ff fe4a 	bl	8002248 <dit>
			break;
 80025b4:	e02e      	b.n	8002614 <sendCharacter+0x364>
		case '7':
			dah();
 80025b6:	f7ff fe61 	bl	800227c <dah>
			dah();
 80025ba:	f7ff fe5f 	bl	800227c <dah>
			dit();
 80025be:	f7ff fe43 	bl	8002248 <dit>
			dit();
 80025c2:	f7ff fe41 	bl	8002248 <dit>
			dit();
 80025c6:	f7ff fe3f 	bl	8002248 <dit>
			break;
 80025ca:	e023      	b.n	8002614 <sendCharacter+0x364>
		case '8':
			dah();
 80025cc:	f7ff fe56 	bl	800227c <dah>
			dah();
 80025d0:	f7ff fe54 	bl	800227c <dah>
			dah();
 80025d4:	f7ff fe52 	bl	800227c <dah>
			dit();
 80025d8:	f7ff fe36 	bl	8002248 <dit>
			dit();
 80025dc:	f7ff fe34 	bl	8002248 <dit>
			break;
 80025e0:	e018      	b.n	8002614 <sendCharacter+0x364>
		case '9':
			dah();
 80025e2:	f7ff fe4b 	bl	800227c <dah>
			dah();
 80025e6:	f7ff fe49 	bl	800227c <dah>
			dah();
 80025ea:	f7ff fe47 	bl	800227c <dah>
			dah();
 80025ee:	f7ff fe45 	bl	800227c <dah>
			dit();
 80025f2:	f7ff fe29 	bl	8002248 <dit>
			break;
 80025f6:	e00d      	b.n	8002614 <sendCharacter+0x364>
		case '0':
			dah();
 80025f8:	f7ff fe40 	bl	800227c <dah>
			dah();
 80025fc:	f7ff fe3e 	bl	800227c <dah>
			dah();
 8002600:	f7ff fe3c 	bl	800227c <dah>
			dah();
 8002604:	f7ff fe3a 	bl	800227c <dah>
			dah();
 8002608:	f7ff fe38 	bl	800227c <dah>
			break;
 800260c:	e002      	b.n	8002614 <sendCharacter+0x364>
		case ' ':
			characterSpace();
 800260e:	f7ff fe0d 	bl	800222c <characterSpace>
			break;
 8002612:	bf00      	nop
	}

	characterSpace();
 8002614:	f7ff fe0a 	bl	800222c <characterSpace>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <sendCallCW>:

void sendCallCW(char * call, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
	int i;;

	characterSpace();
 800262a:	f7ff fdff 	bl	800222c <characterSpace>
	characterSpace();
 800262e:	f7ff fdfd 	bl	800222c <characterSpace>

	for(i=0;i< len;i++)
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e009      	b.n	800264c <sendCallCW+0x2c>
		sendCharacter(call[i]);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fe35 	bl	80022b0 <sendCharacter>
	for(i=0;i< len;i++)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbf1      	blt.n	8002638 <sendCallCW+0x18>
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <rscode_init>:
#include "ecc.h"
#include "rs.h"
#include "berlekamp.h"

void rscode_init(struct rscode_driver * driver)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  zero_fill_from ((unsigned char *)driver,0,sizeof(struct rscode_driver));
 8002666:	f640 1288 	movw	r2, #2440	; 0x988
 800266a:	2100      	movs	r1, #0
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f001 fda1 	bl	80041b4 <zero_fill_from>
  initialize_ecc (driver);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f001 fd90 	bl	8004198 <initialize_ecc>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <rscode_encode>:

void rscode_encode(struct rscode_driver * driver, unsigned char *msg, int nbytes, unsigned char *dst)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  encode_data (driver, msg, nbytes,dst);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f001 fe57 	bl	8004348 <encode_data>
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	0000      	movs	r0, r0
 80026a4:	0000      	movs	r0, r0
	...

080026a8 <processExternalTemp>:
#include "stm32f1xx_hal.h"
#include "config.h"
#include "main.h"

int processExternalTemp(struct rscode_driver *rsDriver,float frequency)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b09d      	sub	sp, #116	; 0x74
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint16_t len = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint8_t txBuf[MTU_SIZE];

	float tempc = 0.0;
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	667b      	str	r3, [r7, #100]	; 0x64
	float tempf = 0.0;
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	663b      	str	r3, [r7, #96]	; 0x60

	struct HABPacketExtTempInfoDataType HABPacketExtTempInfoData;

	memset(&HABPacketExtTempInfoData, '\0', sizeof(HABPacketExtTempInfoData));
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	2210      	movs	r2, #16
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f005 feed 	bl	80084b0 <memset>

	tempc = (REFFREQ - frequency)/DIVISION;
 80026d6:	6839      	ldr	r1, [r7, #0]
 80026d8:	482d      	ldr	r0, [pc, #180]	; (8002790 <processExternalTemp+0xe8>)
 80026da:	f7fe f9c3 	bl	8000a64 <__aeabi_fsub>
 80026de:	4603      	mov	r3, r0
 80026e0:	492c      	ldr	r1, [pc, #176]	; (8002794 <processExternalTemp+0xec>)
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fb7c 	bl	8000de0 <__aeabi_fdiv>
 80026e8:	4603      	mov	r3, r0
 80026ea:	667b      	str	r3, [r7, #100]	; 0x64
	tempf = (tempc * 1.8) + 32;
 80026ec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80026ee:	f7fd fefb 	bl	80004e8 <__aeabi_f2d>
 80026f2:	a325      	add	r3, pc, #148	; (adr r3, 8002788 <processExternalTemp+0xe0>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd ff4e 	bl	8000598 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <processExternalTemp+0xf0>)
 800270a:	f7fd fd8f 	bl	800022c <__adddf3>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f7fe f951 	bl	80009bc <__aeabi_d2f>
 800271a:	4603      	mov	r3, r0
 800271c:	663b      	str	r3, [r7, #96]	; 0x60

	HABPacketExtTempInfoData.packetType  		= EXT_TEMP;
 800271e:	2399      	movs	r3, #153	; 0x99
 8002720:	81bb      	strh	r3, [r7, #12]
	HABPacketExtTempInfoData.extTempInfoData  	= tempf;
 8002722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002724:	f8c7 300e 	str.w	r3, [r7, #14]

	len = sizeof(HABPacketExtTempInfoData)-sizeof(HABPacketExtTempInfoData.crc16)-NPAR;
 8002728:	2306      	movs	r3, #6
 800272a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	HABPacketExtTempInfoData.crc16 = crc_16((unsigned char *)&HABPacketExtTempInfoData,len);
 800272e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fcf1 	bl	8002120 <crc_16>
 800273e:	4603      	mov	r3, r0
 8002740:	827b      	strh	r3, [r7, #18]
	rscode_encode(rsDriver, (unsigned char *)&HABPacketExtTempInfoData, sizeof(HABPacketExtTempInfoData)-NPAR, (unsigned char *)&HABPacketExtTempInfoData);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	f107 010c 	add.w	r1, r7, #12
 800274a:	2208      	movs	r2, #8
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff97 	bl	8002680 <rscode_encode>
	memcpy(txBuf,&HABPacketExtTempInfoData,sizeof(HABPacketExtTempInfoData));;
 8002752:	f107 041c 	add.w	r4, r7, #28
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800275c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketExtTempInfoData));
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	2110      	movs	r1, #16
 8002766:	4618      	mov	r0, r3
 8002768:	f001 fcb8 	bl	80040dc <radioTxData>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_Delay(PROTOCOL_DELAY);
 8002772:	2064      	movs	r0, #100	; 0x64
 8002774:	f002 fa74 	bl	8004c60 <HAL_Delay>
	if(HAL_Status != HAL_OK)
	{

	}

	return status;
 8002778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800277a:	4618      	mov	r0, r3
 800277c:	3774      	adds	r7, #116	; 0x74
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop
 8002784:	f3af 8000 	nop.w
 8002788:	cccccccd 	.word	0xcccccccd
 800278c:	3ffccccc 	.word	0x3ffccccc
 8002790:	47837200 	.word	0x47837200
 8002794:	435c0000 	.word	0x435c0000
 8002798:	40400000 	.word	0x40400000

0800279c <gexp>:

#define PRIM_POLY 0435
#define NWM1 ((1 << 8)-1)

int gexp(__attribute__((unused)) struct rscode_driver * driver, int z)
{
 800279c:	b480      	push	{r7}
 800279e:	b08f      	sub	sp, #60	; 0x3c
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  int i;
  int pinit,p1,p2,p3,p4,p5,p6,p7,p8;
  int ret = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	613b      	str	r3, [r7, #16]

  pinit = p2 = p3 = p4 = p5 = p6 = p7 = p8 = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	60fb      	str	r3, [r7, #12]
  p1 = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  
  if(z!=0) {
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d038      	beq.n	8002846 <gexp+0xaa>
    for (i = 1; i <= z; i++) {
 80027d4:	2301      	movs	r3, #1
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
 80027d8:	e01a      	b.n	8002810 <gexp+0x74>
      pinit = p8;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	60fb      	str	r3, [r7, #12]
      p8 = p7;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	617b      	str	r3, [r7, #20]
      p7 = p6;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	61bb      	str	r3, [r7, #24]
      p6 = p5;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	61fb      	str	r3, [r7, #28]
      p5 = p4 ^ pinit;
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4053      	eors	r3, r2
 80027f0:	623b      	str	r3, [r7, #32]
      p4 = p3 ^ pinit;
 80027f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4053      	eors	r3, r2
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
      p3 = p2 ^ pinit;
 80027fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4053      	eors	r3, r2
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
      p2 = p1;
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
      p1 = pinit;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
    for (i = 1; i <= z; i++) {
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	3301      	adds	r3, #1
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
 8002810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	dde0      	ble.n	80027da <gexp+0x3e>
    }
    ret = p1 + (p2<<1) + (p3<<2) + (p4<<3) + (p5<<4) + (p6<<5) + (p7<<6) + (p8<<7);
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	005a      	lsls	r2, r3, #1
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	441a      	add	r2, r3
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	441a      	add	r2, r3
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	441a      	add	r2, r3
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	015b      	lsls	r3, r3, #5
 8002836:	441a      	add	r2, r3
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	019b      	lsls	r3, r3, #6
 800283c:	441a      	add	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	01db      	lsls	r3, r3, #7
 8002842:	4413      	add	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
  }
  return ret;
 8002846:	693b      	ldr	r3, [r7, #16]
}
 8002848:	4618      	mov	r0, r3
 800284a:	373c      	adds	r7, #60	; 0x3c
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <gmult>:

int gmult(__attribute__((unused)) struct rscode_driver * driver, int x, int y)
{
 8002852:	b480      	push	{r7}
 8002854:	b093      	sub	sp, #76	; 0x4c
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  int prod;
  int i, j, ind;
  int k;
  int scratch[8];
  int w;
  if (x==0 || y == 0) return (0);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <gmult+0x18>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <gmult+0x1c>
 800286a:	2300      	movs	r3, #0
 800286c:	e05a      	b.n	8002924 <gmult+0xd2>
  w = 8;
 800286e:	2308      	movs	r3, #8
 8002870:	637b      	str	r3, [r7, #52]	; 0x34

  prod = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < w; i++) {
 8002876:	2300      	movs	r3, #0
 8002878:	643b      	str	r3, [r7, #64]	; 0x40
 800287a:	e020      	b.n	80028be <gmult+0x6c>
    scratch[i] = y;
 800287c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	3348      	adds	r3, #72	; 0x48
 8002882:	443b      	add	r3, r7
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	f843 2c38 	str.w	r2, [r3, #-56]
    if (y & (1 << (w-1))) {
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	3b01      	subs	r3, #1
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	fa42 f303 	asr.w	r3, r2, r3
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <gmult+0x60>
      y = y << 1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	607b      	str	r3, [r7, #4]
      y = (y ^ PRIM_POLY) & NWM1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f483 738e 	eor.w	r3, r3, #284	; 0x11c
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	e002      	b.n	80028b8 <gmult+0x66>
    } else {
      y = y << 1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	607b      	str	r3, [r7, #4]
  for (i = 0; i < w; i++) {
 80028b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ba:	3301      	adds	r3, #1
 80028bc:	643b      	str	r3, [r7, #64]	; 0x40
 80028be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	429a      	cmp	r2, r3
 80028c4:	dbda      	blt.n	800287c <gmult+0x2a>
    }
  }
  for (i = 0; i < w; i++) {
 80028c6:	2300      	movs	r3, #0
 80028c8:	643b      	str	r3, [r7, #64]	; 0x40
 80028ca:	e026      	b.n	800291a <gmult+0xc8>
    ind = (1 << i);
 80028cc:	2201      	movs	r2, #1
 80028ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (ind & x) {
 80028d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d019      	beq.n	8002914 <gmult+0xc2>
      j = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (k = 0; k < w; k++) {
 80028e4:	2300      	movs	r3, #0
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028e8:	e010      	b.n	800290c <gmult+0xba>
        prod = prod ^ (j & scratch[i]);
 80028ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	3348      	adds	r3, #72	; 0x48
 80028f0:	443b      	add	r3, r7
 80028f2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80028f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f8:	4013      	ands	r3, r2
 80028fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fc:	4053      	eors	r3, r2
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
        j = (j << 1);
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
      for (k = 0; k < w; k++) {
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	3301      	adds	r3, #1
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	429a      	cmp	r2, r3
 8002912:	dbea      	blt.n	80028ea <gmult+0x98>
  for (i = 0; i < w; i++) {
 8002914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002916:	3301      	adds	r3, #1
 8002918:	643b      	str	r3, [r7, #64]	; 0x40
 800291a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291e:	429a      	cmp	r2, r3
 8002920:	dbd4      	blt.n	80028cc <gmult+0x7a>
      }
    }
  }
  return prod;
 8002922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}	
 8002924:	4618      	mov	r0, r3
 8002926:	374c      	adds	r7, #76	; 0x4c
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
	...

08002930 <processGPS>:
#include "config.h"
#include "gps.h"
#include "packetDefs.h"

GPS_StatusTypeDef processGPS(UART_HandleTypeDef *huart)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8002936:	af02      	add	r7, sp, #8
 8002938:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800293c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002940:	6018      	str	r0, [r3, #0]
	HAL_StatusTypeDef HAL_Status;
	GPS_StatusTypeDef gpsStatus  = GPS_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	uint16_t uartRxLen;
	int indx = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	static uint8_t GPGGASentence[GPS_UART_BUF_DATA_SIZE];
	static uint8_t GPRMCSentence[GPS_UART_BUF_DATA_SIZE];
	struct HABPacketGPSDataType HABPacketGPSData;


	HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, (uint8_t *)&gpsUARTBuf, UART_DATA_SIZE, &uartRxLen, 3000);
 800294e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8002952:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002956:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800295a:	f5a2 7003 	sub.w	r0, r2, #524	; 0x20c
 800295e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002968:	6800      	ldr	r0, [r0, #0]
 800296a:	f005 fb48 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
	HAL_Delay(100);
 8002974:	2064      	movs	r0, #100	; 0x64
 8002976:	f002 f973 	bl	8004c60 <HAL_Delay>
	if(HAL_Status == HAL_OK)
 800297a:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
 800297e:	2b00      	cmp	r3, #0
 8002980:	d179      	bne.n	8002a76 <processGPS+0x146>
	{
	  for(int i=0;i<uartRxLen;i++)
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8002988:	e06d      	b.n	8002a66 <processGPS+0x136>
	  {
		gpsSentence[indx] = gpsUARTBuf[i];
 800298a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800298e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8002992:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002996:	4413      	add	r3, r2
 8002998:	7819      	ldrb	r1, [r3, #0]
 800299a:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800299e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80029a2:	4413      	add	r3, r2
 80029a4:	460a      	mov	r2, r1
 80029a6:	701a      	strb	r2, [r3, #0]
		indx++;
 80029a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80029ac:	3301      	adds	r3, #1
 80029ae:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		if( (gpsUARTBuf[i] == '\n') | (indx > GPS_UART_BUF_DATA_SIZE-1) )
 80029b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80029b6:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 80029ba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b0a      	cmp	r3, #10
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80029d0:	2b4f      	cmp	r3, #79	; 0x4f
 80029d2:	bfcc      	ite	gt
 80029d4:	2301      	movgt	r3, #1
 80029d6:	2300      	movle	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03c      	beq.n	8002a5c <processGPS+0x12c>
		{
		  if(gpsSentence[0] == '$')
 80029e2:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80029e6:	2b24      	cmp	r3, #36	; 0x24
 80029e8:	d135      	bne.n	8002a56 <processGPS+0x126>
		  {
			if(strncmp("GGA",(const char *)&gpsSentence[3],3) == 0)
 80029ea:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80029ee:	3303      	adds	r3, #3
 80029f0:	2203      	movs	r2, #3
 80029f2:	4619      	mov	r1, r3
 80029f4:	488e      	ldr	r0, [pc, #568]	; (8002c30 <processGPS+0x300>)
 80029f6:	f005 fd63 	bl	80084c0 <strncmp>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10f      	bne.n	8002a20 <processGPS+0xf0>
			{
			  memset(GPGGASentence, '\0', GPS_UART_BUF_DATA_SIZE);
 8002a00:	2250      	movs	r2, #80	; 0x50
 8002a02:	2100      	movs	r1, #0
 8002a04:	488b      	ldr	r0, [pc, #556]	; (8002c34 <processGPS+0x304>)
 8002a06:	f005 fd53 	bl	80084b0 <memset>
			  memcpy(GPGGASentence,gpsSentence,indx);
 8002a0a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002a0e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002a12:	4619      	mov	r1, r3
 8002a14:	4887      	ldr	r0, [pc, #540]	; (8002c34 <processGPS+0x304>)
 8002a16:	f005 fd3d 	bl	8008494 <memcpy>
			  sendGGA = 1;
 8002a1a:	4b87      	ldr	r3, [pc, #540]	; (8002c38 <processGPS+0x308>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
				 //if(sscanf(&GPGGASentence, "GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c,%f", &time, &latitude, &ns, &longitude, &ew, &lock, &sats, &hdop, &alt, &unit, &geoid) >= 1)
			 }
			 if(strncmp("RMC",(const char *)&gpsSentence[3],3) == 0)
 8002a20:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002a24:	3303      	adds	r3, #3
 8002a26:	2203      	movs	r2, #3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4884      	ldr	r0, [pc, #528]	; (8002c3c <processGPS+0x30c>)
 8002a2c:	f005 fd48 	bl	80084c0 <strncmp>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <processGPS+0x126>
			 {
				 memset(GPRMCSentence, '\0', GPS_UART_BUF_DATA_SIZE);
 8002a36:	2250      	movs	r2, #80	; 0x50
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4881      	ldr	r0, [pc, #516]	; (8002c40 <processGPS+0x310>)
 8002a3c:	f005 fd38 	bl	80084b0 <memset>
				 memcpy(GPRMCSentence,gpsSentence,indx);
 8002a40:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002a44:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	487d      	ldr	r0, [pc, #500]	; (8002c40 <processGPS+0x310>)
 8002a4c:	f005 fd22 	bl	8008494 <memcpy>
				 sendRMC = 1;
 8002a50:	4b7c      	ldr	r3, [pc, #496]	; (8002c44 <processGPS+0x314>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
			 }
		 }
		 indx = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	  for(int i=0;i<uartRxLen;i++)
 8002a5c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002a60:	3301      	adds	r3, #1
 8002a62:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8002a66:	f8b7 3204 	ldrh.w	r3, [r7, #516]	; 0x204
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002a70:	4293      	cmp	r3, r2
 8002a72:	db8a      	blt.n	800298a <processGPS+0x5a>
 8002a74:	e002      	b.n	8002a7c <processGPS+0x14c>
		}
	  }
	}
	else
	{
	  HAL_Delay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f002 f8f2 	bl	8004c60 <HAL_Delay>
	}

	if(sendGGA == 1 && sendRMC ==1)
 8002a7c:	4b6e      	ldr	r3, [pc, #440]	; (8002c38 <processGPS+0x308>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f040 817e 	bne.w	8002d82 <processGPS+0x452>
 8002a86:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <processGPS+0x314>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	f040 8179 	bne.w	8002d82 <processGPS+0x452>
	{
		rmcLen = strlen((const char *)GPRMCSentence);
 8002a90:	486b      	ldr	r0, [pc, #428]	; (8002c40 <processGPS+0x310>)
 8002a92:	f7fd fbbd 	bl	8000210 <strlen>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b6b      	ldr	r3, [pc, #428]	; (8002c48 <processGPS+0x318>)
 8002a9c:	801a      	strh	r2, [r3, #0]
		ggaLen = strlen((const char *)GPGGASentence);
 8002a9e:	4865      	ldr	r0, [pc, #404]	; (8002c34 <processGPS+0x304>)
 8002aa0:	f7fd fbb6 	bl	8000210 <strlen>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <processGPS+0x31c>)
 8002aaa:	801a      	strh	r2, [r3, #0]

		memset(&HABPacketGPSData, '\0', sizeof(HABPacketGPSData));
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	2240      	movs	r2, #64	; 0x40
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 fcfb 	bl	80084b0 <memset>
		if(ggaLen > GPS_BUF_DATA_SIZE+1)
 8002aba:	4b64      	ldr	r3, [pc, #400]	; (8002c4c <processGPS+0x31c>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	2b3e      	cmp	r3, #62	; 0x3e
 8002ac0:	d90c      	bls.n	8002adc <processGPS+0x1ac>
		{
			HABPacketGPSData.packetType = GPS_GGA_1;
 8002ac2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002ac6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002aca:	22c2      	movs	r2, #194	; 0xc2
 8002acc:	801a      	strh	r2, [r3, #0]
			HABPacketGPSData.gpsDataLen = GPS_BUF_DATA_SIZE;
 8002ace:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002ad2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002ad6:	223d      	movs	r2, #61	; 0x3d
 8002ad8:	709a      	strb	r2, [r3, #2]
 8002ada:	e00d      	b.n	8002af8 <processGPS+0x1c8>
		}
		else
		{
			HABPacketGPSData.packetType = GPS_GGA;
 8002adc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002ae0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002ae4:	22c1      	movs	r2, #193	; 0xc1
 8002ae6:	801a      	strh	r2, [r3, #0]
			HABPacketGPSData.gpsDataLen = ggaLen;
 8002ae8:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <processGPS+0x31c>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002af2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002af6:	709a      	strb	r2, [r3, #2]
		}
		memcpy(HABPacketGPSData.gpsData,GPGGASentence,HABPacketGPSData.gpsDataLen);
 8002af8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002afc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b00:	789b      	ldrb	r3, [r3, #2]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	3303      	adds	r3, #3
 8002b0a:	494a      	ldr	r1, [pc, #296]	; (8002c34 <processGPS+0x304>)
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f005 fcc1 	bl	8008494 <memcpy>
		memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 8002b12:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b16:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8002b1a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b1e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b22:	4614      	mov	r4, r2
 8002b24:	461d      	mov	r5, r3
 8002b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_Status =  radioTxData(txBuf,HABPacketGPSData.gpsDataLen+GPS_HDRF_DATA_SIZE);
 8002b3a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b3e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b42:	789b      	ldrb	r3, [r3, #2]
 8002b44:	3303      	adds	r3, #3
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 fac4 	bl	80040dc <radioTxData>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
		HAL_Delay(PROTOCOL_DELAY);
 8002b5a:	2064      	movs	r0, #100	; 0x64
 8002b5c:	f002 f880 	bl	8004c60 <HAL_Delay>

		if(ggaLen >  GPS_BUF_DATA_SIZE+1)
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <processGPS+0x31c>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	2b3e      	cmp	r3, #62	; 0x3e
 8002b66:	d94a      	bls.n	8002bfe <processGPS+0x2ce>
		{
			memset(&HABPacketGPSData, '\0', sizeof(HABPacketGPSData));
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f005 fc9d 	bl	80084b0 <memset>
			HABPacketGPSData.packetType = GPS_GGA_2;
 8002b76:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b7a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b7e:	22c3      	movs	r2, #195	; 0xc3
 8002b80:	801a      	strh	r2, [r3, #0]
			HABPacketGPSData.gpsDataLen = ggaLen - GPS_BUF_DATA_SIZE;
 8002b82:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <processGPS+0x31c>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3b3d      	subs	r3, #61	; 0x3d
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b90:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b94:	709a      	strb	r2, [r3, #2]
			memcpy(HABPacketGPSData.gpsData,&GPGGASentence[GPS_BUF_DATA_SIZE],HABPacketGPSData.gpsDataLen);
 8002b96:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002b9a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b9e:	789b      	ldrb	r3, [r3, #2]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	3303      	adds	r3, #3
 8002ba8:	4929      	ldr	r1, [pc, #164]	; (8002c50 <processGPS+0x320>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f005 fc72 	bl	8008494 <memcpy>
			memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 8002bb0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002bb4:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8002bb8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002bbc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002bc0:	4614      	mov	r4, r2
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_Status =  radioTxData(txBuf,HABPacketGPSData.gpsDataLen+GPS_HDRF_DATA_SIZE);
 8002bd8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002bdc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002be0:	789b      	ldrb	r3, [r3, #2]
 8002be2:	3303      	adds	r3, #3
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f001 fa75 	bl	80040dc <radioTxData>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
			HAL_Delay(PROTOCOL_DELAY);
 8002bf8:	2064      	movs	r0, #100	; 0x64
 8002bfa:	f002 f831 	bl	8004c60 <HAL_Delay>
		}
		///////////////////////////////////////////

		memset(&HABPacketGPSData, '\0', sizeof(HABPacketGPSData));
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f005 fc52 	bl	80084b0 <memset>
		if(rmcLen >  GPS_BUF_DATA_SIZE+1)
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <processGPS+0x318>)
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	2b3e      	cmp	r3, #62	; 0x3e
 8002c12:	d91f      	bls.n	8002c54 <processGPS+0x324>
		{
			HABPacketGPSData.packetType = GPS_RMC_1;
 8002c14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002c18:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c1c:	22b2      	movs	r2, #178	; 0xb2
 8002c1e:	801a      	strh	r2, [r3, #0]
			HABPacketGPSData.gpsDataLen = GPS_BUF_DATA_SIZE;
 8002c20:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002c24:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c28:	223d      	movs	r2, #61	; 0x3d
 8002c2a:	709a      	strb	r2, [r3, #2]
 8002c2c:	e020      	b.n	8002c70 <processGPS+0x340>
 8002c2e:	bf00      	nop
 8002c30:	08008844 	.word	0x08008844
 8002c34:	200002c4 	.word	0x200002c4
 8002c38:	20000314 	.word	0x20000314
 8002c3c:	08008848 	.word	0x08008848
 8002c40:	20000318 	.word	0x20000318
 8002c44:	20000368 	.word	0x20000368
 8002c48:	2000036c 	.word	0x2000036c
 8002c4c:	2000036e 	.word	0x2000036e
 8002c50:	20000301 	.word	0x20000301
		}
		else
		{
			HABPacketGPSData.packetType = GPS_RMC;
 8002c54:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002c58:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c5c:	22b1      	movs	r2, #177	; 0xb1
 8002c5e:	801a      	strh	r2, [r3, #0]
			HABPacketGPSData.gpsDataLen = rmcLen;
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <processGPS+0x460>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002c6a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c6e:	709a      	strb	r2, [r3, #2]
		}

		memcpy(HABPacketGPSData.gpsData,GPRMCSentence,HABPacketGPSData.gpsDataLen);
 8002c70:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002c74:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c78:	789b      	ldrb	r3, [r3, #2]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	3303      	adds	r3, #3
 8002c82:	4944      	ldr	r1, [pc, #272]	; (8002d94 <processGPS+0x464>)
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fc05 	bl	8008494 <memcpy>
		memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 8002c8a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002c8e:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8002c92:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002c96:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002caa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_Status =  radioTxData(txBuf,HABPacketGPSData.gpsDataLen+GPS_HDRF_DATA_SIZE);
 8002cb2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002cb6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002cba:	789b      	ldrb	r3, [r3, #2]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fa08 	bl	80040dc <radioTxData>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
		HAL_Delay(PROTOCOL_DELAY);
 8002cd2:	2064      	movs	r0, #100	; 0x64
 8002cd4:	f001 ffc4 	bl	8004c60 <HAL_Delay>
		if(ggaLen >  GPS_BUF_DATA_SIZE+1)
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <processGPS+0x468>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8002cde:	d94a      	bls.n	8002d76 <processGPS+0x446>
		{
			memset(&HABPacketGPSData, '\0', sizeof(HABPacketGPSData));
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	2240      	movs	r2, #64	; 0x40
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f005 fbe1 	bl	80084b0 <memset>
			HABPacketGPSData.packetType = GPS_RMC_2;
 8002cee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002cf2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002cf6:	22b3      	movs	r2, #179	; 0xb3
 8002cf8:	801a      	strh	r2, [r3, #0]
			HABPacketGPSData.gpsDataLen = rmcLen - GPS_BUF_DATA_SIZE;
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <processGPS+0x460>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3b3d      	subs	r3, #61	; 0x3d
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002d08:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d0c:	709a      	strb	r2, [r3, #2]
			memcpy(HABPacketGPSData.gpsData,&GPRMCSentence[GPS_BUF_DATA_SIZE],HABPacketGPSData.gpsDataLen);
 8002d0e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002d12:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	3303      	adds	r3, #3
 8002d20:	491e      	ldr	r1, [pc, #120]	; (8002d9c <processGPS+0x46c>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 fbb6 	bl	8008494 <memcpy>
			memcpy(txBuf,&HABPacketGPSData,sizeof(HABPacketGPSData));
 8002d28:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002d2c:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8002d30:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002d34:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d38:	4614      	mov	r4, r2
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_Status =  radioTxData(txBuf,HABPacketGPSData.gpsDataLen+GPS_HDRF_DATA_SIZE);
 8002d50:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002d54:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d58:	789b      	ldrb	r3, [r3, #2]
 8002d5a:	3303      	adds	r3, #3
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f9b9 	bl	80040dc <radioTxData>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
			HAL_Delay(PROTOCOL_DELAY);
 8002d70:	2064      	movs	r0, #100	; 0x64
 8002d72:	f001 ff75 	bl	8004c60 <HAL_Delay>
		}

		sendGGA 		= 0;
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <processGPS+0x470>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
		sendRMC 		= 0;
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <processGPS+0x474>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
	}

	return gpsStatus;
 8002d82:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d90:	2000036c 	.word	0x2000036c
 8002d94:	20000318 	.word	0x20000318
 8002d98:	2000036e 	.word	0x2000036e
 8002d9c:	20000355 	.word	0x20000355
 8002da0:	20000314 	.word	0x20000314
 8002da4:	20000368 	.word	0x20000368

08002da8 <processHumidity>:
#include "radio.h"
#include "packetDefs.h"
#include "stm32f1xx_hal.h"

int processHumidity(struct rscode_driver *rsDriver,float frequency)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b09b      	sub	sp, #108	; 0x6c
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t len = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	uint8_t txBuf[MTU_SIZE];

	float humidity = 0.0;
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c

	struct HABPacketHumidityInfoDataType HABPacketHumidityInfoData;

	memset(&HABPacketHumidityInfoData, '\0', sizeof(HABPacketHumidityInfoData));
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f005 fb70 	bl	80084b0 <memset>

	humidity = (frequency - HUMREFFREQ)/HUMDIVISION;
 8002dd0:	4921      	ldr	r1, [pc, #132]	; (8002e58 <processHumidity+0xb0>)
 8002dd2:	6838      	ldr	r0, [r7, #0]
 8002dd4:	f7fd fe46 	bl	8000a64 <__aeabi_fsub>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4920      	ldr	r1, [pc, #128]	; (8002e5c <processHumidity+0xb4>)
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd ffff 	bl	8000de0 <__aeabi_fdiv>
 8002de2:	4603      	mov	r3, r0
 8002de4:	65fb      	str	r3, [r7, #92]	; 0x5c
	humidity = 100.0 - humidity;
 8002de6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002de8:	481d      	ldr	r0, [pc, #116]	; (8002e60 <processHumidity+0xb8>)
 8002dea:	f7fd fe3b 	bl	8000a64 <__aeabi_fsub>
 8002dee:	4603      	mov	r3, r0
 8002df0:	65fb      	str	r3, [r7, #92]	; 0x5c

	HABPacketHumidityInfoData.packetType  		= HUM_INFO;
 8002df2:	2366      	movs	r3, #102	; 0x66
 8002df4:	813b      	strh	r3, [r7, #8]
	HABPacketHumidityInfoData.humidityInfoData  = humidity;
 8002df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df8:	f8c7 300a 	str.w	r3, [r7, #10]

	len = sizeof(HABPacketHumidityInfoData)-sizeof(HABPacketHumidityInfoData.crc16)-NPAR;
 8002dfc:	2306      	movs	r3, #6
 8002dfe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	HABPacketHumidityInfoData.crc16 = crc_16((unsigned char *)&HABPacketHumidityInfoData,len);
 8002e02:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f987 	bl	8002120 <crc_16>
 8002e12:	4603      	mov	r3, r0
 8002e14:	81fb      	strh	r3, [r7, #14]
	rscode_encode(rsDriver, (unsigned char *)&HABPacketHumidityInfoData, sizeof(HABPacketHumidityInfoData)-NPAR, (unsigned char *)&HABPacketHumidityInfoData);
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	f107 0108 	add.w	r1, r7, #8
 8002e1e:	2208      	movs	r2, #8
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fc2d 	bl	8002680 <rscode_encode>
	memcpy(txBuf,&HABPacketHumidityInfoData,sizeof(HABPacketHumidityInfoData));
 8002e26:	f107 0418 	add.w	r4, r7, #24
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketHumidityInfoData));
 8002e34:	f107 0318 	add.w	r3, r7, #24
 8002e38:	2110      	movs	r1, #16
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 f94e 	bl	80040dc <radioTxData>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	HAL_Delay(PROTOCOL_DELAY);
 8002e46:	2064      	movs	r0, #100	; 0x64
 8002e48:	f001 ff0a 	bl	8004c60 <HAL_Delay>
	if(HAL_Status != HAL_OK)
	{

	}

	return status;
 8002e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	376c      	adds	r7, #108	; 0x6c
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	bf00      	nop
 8002e58:	4729d300 	.word	0x4729d300
 8002e5c:	40d851ec 	.word	0x40d851ec
 8002e60:	42c80000 	.word	0x42c80000

08002e64 <processInfo>:
#include "packetDefs.h"
#include "info.h"
#include "stm32f1xx_hal.h"

int processInfo(struct rscode_driver *rsDriver)
{
 8002e64:	b5b0      	push	{r4, r5, r7, lr}
 8002e66:	b0a0      	sub	sp, #128	; 0x80
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint16_t len = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint8_t txBuf[MTU_SIZE];
	struct HABPacketInfoDataType HABPacketInfoData;

	memset(&HABPacketInfoData, '\0', sizeof(HABPacketInfoData));
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	222d      	movs	r2, #45	; 0x2d
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 fb16 	bl	80084b0 <memset>
	HABPacketInfoData.packetType  = INFO_DATA;
 8002e84:	2355      	movs	r3, #85	; 0x55
 8002e86:	813b      	strh	r3, [r7, #8]
	HABPacketInfoData.infoDataLen = strlen(VERSION_INFO);
 8002e88:	2313      	movs	r3, #19
 8002e8a:	72bb      	strb	r3, [r7, #10]
	memcpy(HABPacketInfoData.infoData,VERSION_INFO,HABPacketInfoData.infoDataLen);
 8002e8c:	7abb      	ldrb	r3, [r7, #10]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f107 0308 	add.w	r3, r7, #8
 8002e94:	3303      	adds	r3, #3
 8002e96:	491e      	ldr	r1, [pc, #120]	; (8002f10 <processInfo+0xac>)
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 fafb 	bl	8008494 <memcpy>
	len = sizeof(HABPacketInfoData)-sizeof(HABPacketInfoData.crc16)-NPAR;
 8002e9e:	2323      	movs	r3, #35	; 0x23
 8002ea0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	HABPacketInfoData.crc16 = crc_16((unsigned char *)&HABPacketInfoData,len);
 8002ea4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f936 	bl	8002120 <crc_16>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f8a7 302b 	strh.w	r3, [r7, #43]	; 0x2b
	rscode_encode(rsDriver, (unsigned char *)&HABPacketInfoData, sizeof(HABPacketInfoData)-NPAR, (unsigned char *)&HABPacketInfoData);
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	f107 0108 	add.w	r1, r7, #8
 8002ec2:	2225      	movs	r2, #37	; 0x25
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fbdb 	bl	8002680 <rscode_encode>
	memcpy(txBuf,&HABPacketInfoData,sizeof(HABPacketInfoData));
 8002eca:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002ece:	f107 0508 	add.w	r5, r7, #8
 8002ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ede:	c407      	stmia	r4!, {r0, r1, r2}
 8002ee0:	7023      	strb	r3, [r4, #0]
	HAL_Status =  radioTxData(txBuf,sizeof(HABPacketInfoData));
 8002ee2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ee6:	212d      	movs	r1, #45	; 0x2d
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 f8f7 	bl	80040dc <radioTxData>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	HAL_Delay(PROTOCOL_DELAY);
 8002ef4:	2064      	movs	r0, #100	; 0x64
 8002ef6:	f001 feb3 	bl	8004c60 <HAL_Delay>
	if(HAL_Status != HAL_OK)
 8002efa:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <processInfo+0xa2>
	{
	  status = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	return status;
 8002f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3780      	adds	r7, #128	; 0x80
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f10:	0800884c 	.word	0x0800884c

08002f14 <processInternalTemp>:
#include "packetDefs.h"
#include "internalTemp.h"
#include "stm32f1xx_hal.h"

int processInternalTemp(struct rscode_driver *rsDriver)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b099      	sub	sp, #100	; 0x64
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	int status   = 1;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint16_t len = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint8_t txBuf[MTU_SIZE];
	uint8_t adcInternalTemperatureVal;

	struct HABPacketIntTempInfoDataType HABPacketIntTempInfoData;

	memset(&HABPacketIntTempInfoData, '\0', sizeof(HABPacketIntTempInfoData));
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	220d      	movs	r2, #13
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 fabe 	bl	80084b0 <memset>

	// Set for Deg F
	HAL_Status = radio_write_register(0x12, ADC_TEMP_CAL_REG12);
 8002f34:	21e0      	movs	r1, #224	; 0xe0
 8002f36:	2012      	movs	r0, #18
 8002f38:	f000 ff5c 	bl	8003df4 <radio_write_register>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	HAL_Status = radio_write_register(0x13, ADC_TEMP_CAL_REG13);
 8002f42:	2109      	movs	r1, #9
 8002f44:	2013      	movs	r0, #19
 8002f46:	f000 ff55 	bl	8003df4 <radio_write_register>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Trigger ADC to capture.
	HAL_Status = radio_write_register(0x0f, 0x80);
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	200f      	movs	r0, #15
 8002f54:	f000 ff4e 	bl	8003df4 <radio_write_register>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	HAL_Delay(100);
 8002f5e:	2064      	movs	r0, #100	; 0x64
 8002f60:	f001 fe7e 	bl	8004c60 <HAL_Delay>

	HAL_Status = radio_read_register(0x11, &adcInternalTemperatureVal);
 8002f64:	f107 0317 	add.w	r3, r7, #23
 8002f68:	4619      	mov	r1, r3
 8002f6a:	2011      	movs	r0, #17
 8002f6c:	f000 ff02 	bl	8003d74 <radio_read_register>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	if(HAL_Status == HAL_OK)
 8002f76:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d12f      	bne.n	8002fde <processInternalTemp+0xca>
	{
	  // Convert ADC value to signed temperature value. Deg F
	  HABPacketIntTempInfoData.intTempInfoData = (int8_t)-60 + (int16_t)adcInternalTemperatureVal;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	3b3c      	subs	r3, #60	; 0x3c
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	72bb      	strb	r3, [r7, #10]
	  HABPacketIntTempInfoData.packetType  = INT_TEMP;
 8002f88:	23aa      	movs	r3, #170	; 0xaa
 8002f8a:	813b      	strh	r3, [r7, #8]
	  len = sizeof(HABPacketIntTempInfoData)-sizeof(HABPacketIntTempInfoData.crc16)-NPAR;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  HABPacketIntTempInfoData.crc16 = crc_16((unsigned char *)&HABPacketIntTempInfoData,len);
 8002f92:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002f96:	f107 0308 	add.w	r3, r7, #8
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff f8bf 	bl	8002120 <crc_16>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f8a7 300b 	strh.w	r3, [r7, #11]
	  rscode_encode(rsDriver, (unsigned char *)&HABPacketIntTempInfoData, sizeof(HABPacketIntTempInfoData)-NPAR, (unsigned char *)&HABPacketIntTempInfoData);
 8002fa8:	f107 0308 	add.w	r3, r7, #8
 8002fac:	f107 0108 	add.w	r1, r7, #8
 8002fb0:	2205      	movs	r2, #5
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fb64 	bl	8002680 <rscode_encode>
	  memcpy(txBuf,&HABPacketIntTempInfoData,sizeof(HABPacketIntTempInfoData));
 8002fb8:	f107 0418 	add.w	r4, r7, #24
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fc2:	c407      	stmia	r4!, {r0, r1, r2}
 8002fc4:	7023      	strb	r3, [r4, #0]
	  HAL_Status =  radioTxData(txBuf,sizeof(HABPacketIntTempInfoData));
 8002fc6:	f107 0318 	add.w	r3, r7, #24
 8002fca:	210d      	movs	r1, #13
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f885 	bl	80040dc <radioTxData>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	  HAL_Delay(PROTOCOL_DELAY);
 8002fd8:	2064      	movs	r0, #100	; 0x64
 8002fda:	f001 fe41 	bl	8004c60 <HAL_Delay>

	}

	return status;
 8002fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3764      	adds	r7, #100	; 0x64
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}

08002fe8 <HAL_TIM_IC_CaptureCallback>:

int pulseCount = 0;
int frequency  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

	pulseCount++;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a03      	ldr	r2, [pc, #12]	; (8003004 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	20000550 	.word	0x20000550

08003008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	f5ad 6d19 	sub.w	sp, sp, #2448	; 0x990
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_StatusTypeDef HAL_Status;

  GPS_StatusTypeDef gpsStatus	   = GPS_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 398e 	strb.w	r3, [r7, #2446]	; 0x98e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003016:	f001 fdfa 	bl	8004c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800301a:	f000 fa23 	bl	8003464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800301e:	f000 fbf3 	bl	8003808 <MX_GPIO_Init>
  MX_SPI2_Init();
 8003022:	f000 fab1 	bl	8003588 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003026:	f000 fb9b 	bl	8003760 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800302a:	f000 fa6f 	bl	800350c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800302e:	f000 fbc1 	bl	80037b4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003032:	f000 fadf 	bl	80035f4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8003036:	f000 fb55 	bl	80036e4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	struct rscode_driver rsDriver;

	HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_RESET);
 800303a:	2200      	movs	r2, #0
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	4855      	ldr	r0, [pc, #340]	; (8003194 <main+0x18c>)
 8003040:	f002 fcb4 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_Delay(4000); // For Cam POR
 8003044:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003048:	f001 fe0a 	bl	8004c60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_SET);
 800304c:	2201      	movs	r2, #1
 800304e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003052:	4850      	ldr	r0, [pc, #320]	; (8003194 <main+0x18c>)
 8003054:	f002 fcaa 	bl	80059ac <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(HUMI_MODE_SELECT_START_GPIO_Port, HUMI_MODE_SELECT_START_Pin, GPIO_PIN_RESET); //Low
 8003058:	2200      	movs	r2, #0
 800305a:	2104      	movs	r1, #4
 800305c:	484e      	ldr	r0, [pc, #312]	; (8003198 <main+0x190>)
 800305e:	f002 fca5 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HUMI_SEL0_GPIO_Port, HUMI_SEL0_Pin, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	2108      	movs	r1, #8
 8003066:	484b      	ldr	r0, [pc, #300]	; (8003194 <main+0x18c>)
 8003068:	f002 fca0 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HUMI_SEL1_GPIO_Port, HUMI_SEL1_Pin, GPIO_PIN_RESET);
 800306c:	2200      	movs	r2, #0
 800306e:	2110      	movs	r1, #16
 8003070:	4848      	ldr	r0, [pc, #288]	; (8003194 <main+0x18c>)
 8003072:	f002 fc9b 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HUMI_SEL2_GPIO_Port, HUMI_SEL2_Pin, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	2120      	movs	r1, #32
 800307a:	4846      	ldr	r0, [pc, #280]	; (8003194 <main+0x18c>)
 800307c:	f002 fc96 	bl	80059ac <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TEMP_MODE_SELECT_START_GPIO_Port, TEMP_MODE_SELECT_START_Pin, GPIO_PIN_RESET); //Low
 8003080:	2200      	movs	r2, #0
 8003082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003086:	4843      	ldr	r0, [pc, #268]	; (8003194 <main+0x18c>)
 8003088:	f002 fc90 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MEAS_SEL0_GPIO_Port, T_MEAS_SEL0_Pin, GPIO_PIN_RESET);
 800308c:	2200      	movs	r2, #0
 800308e:	2108      	movs	r1, #8
 8003090:	4841      	ldr	r0, [pc, #260]	; (8003198 <main+0x190>)
 8003092:	f002 fc8b 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MEAS_SEL_HUMITEMP_GPIO_Port, T_MEAS_SEL_HUMITEMP_Pin, GPIO_PIN_RESET);
 8003096:	2200      	movs	r2, #0
 8003098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800309c:	483f      	ldr	r0, [pc, #252]	; (800319c <main+0x194>)
 800309e:	f002 fc85 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MEAS_SEL_MAINTEMP_GPIO_Port, T_MEAS_SEL_MAINTEMP_Pin, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030a8:	483c      	ldr	r0, [pc, #240]	; (800319c <main+0x194>)
 80030aa:	f002 fc7f 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MEAS_SEL1_GPIO_Port, T_MEAS_SEL1_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	4838      	ldr	r0, [pc, #224]	; (8003194 <main+0x18c>)
 80030b4:	f002 fc7a 	bl	80059ac <HAL_GPIO_WritePin>

	gpsStatus = setGPS_DynamicModel6(&huart1); // - 6 􀀀 Airborne with <1g Acceleration HAB
 80030b8:	4839      	ldr	r0, [pc, #228]	; (80031a0 <main+0x198>)
 80030ba:	f001 fc52 	bl	8004962 <setGPS_DynamicModel6>
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 398e 	strb.w	r3, [r7, #2446]	; 0x98e
	while(gpsStatus == GPS_FAIL)
 80030c4:	e009      	b.n	80030da <main+0xd2>
	{
	  gpsStatus = setGPS_DynamicModel6(&huart1);
 80030c6:	4836      	ldr	r0, [pc, #216]	; (80031a0 <main+0x198>)
 80030c8:	f001 fc4b 	bl	8004962 <setGPS_DynamicModel6>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 398e 	strb.w	r3, [r7, #2446]	; 0x98e
	  HAL_GPIO_TogglePin(GPIOB, GREEN_LED_Pin);
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	482f      	ldr	r0, [pc, #188]	; (8003194 <main+0x18c>)
 80030d6:	f002 fc81 	bl	80059dc <HAL_GPIO_TogglePin>
	while(gpsStatus == GPS_FAIL)
 80030da:	f897 398e 	ldrb.w	r3, [r7, #2446]	; 0x98e
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d0f1      	beq.n	80030c6 <main+0xbe>
	}

	gpsStatus = disableNMEA(&huart1);
 80030e2:	482f      	ldr	r0, [pc, #188]	; (80031a0 <main+0x198>)
 80030e4:	f001 fd1c 	bl	8004b20 <disableNMEA>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f887 398e 	strb.w	r3, [r7, #2446]	; 0x98e
	if(gpsStatus != GPS_FAIL)
 80030ee:	f897 398e 	ldrb.w	r3, [r7, #2446]	; 0x98e
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d002      	beq.n	80030fc <main+0xf4>
	{
	  // Nothing we can do
	  gpsStatus  = GPS_FAIL;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 398e 	strb.w	r3, [r7, #2446]	; 0x98e
	}

	rscode_init(&rsDriver);
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff faad 	bl	800265e <rscode_init>

	RPM411Init(&hspi2);
 8003104:	4827      	ldr	r0, [pc, #156]	; (80031a4 <main+0x19c>)
 8003106:	f7fd ffb1 	bl	800106c <RPM411Init>

	oneSecTic = 0;
 800310a:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <main+0x1a0>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
	resetSI4032			        = 0;
 8003110:	4b26      	ldr	r3, [pc, #152]	; (80031ac <main+0x1a4>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
	sendGPSInfo					= 0;
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <main+0x1a8>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
	sendInfo					= 1;
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <main+0x1ac>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
	sendCallSignInfo			= 1;
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <main+0x1b0>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
	sendBattInfo    			= 1;
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <main+0x1b4>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
	sendInternalTemperatureInfo = 0;
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <main+0x1b8>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
	sendPressureInfo         	= 0;
 8003134:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <main+0x1bc>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

	HAL_Status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
	while(HAL_Status != HAL_OK)
 8003140:	e005      	b.n	800314e <main+0x146>
	{
		HAL_Status = setupRadio(&hspi2);
 8003142:	4818      	ldr	r0, [pc, #96]	; (80031a4 <main+0x19c>)
 8003144:	f000 fd56 	bl	8003bf4 <setupRadio>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
	while(HAL_Status != HAL_OK)
 800314e:	f897 398f 	ldrb.w	r3, [r7, #2447]	; 0x98f
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f5      	bne.n	8003142 <main+0x13a>
	}

	HAL_Status = clearRadio();
 8003156:	f000 fdc7 	bl	8003ce8 <clearRadio>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(T_MEAS_SEL_MAINTEMP_GPIO_Port, T_MEAS_SEL_MAINTEMP_Pin, GPIO_PIN_SET); //pin 12 boom
 8003160:	2201      	movs	r2, #1
 8003162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003166:	480d      	ldr	r0, [pc, #52]	; (800319c <main+0x194>)
 8003168:	f002 fc20 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TEMP_MODE_SELECT_START_GPIO_Port, TEMP_MODE_SELECT_START_Pin, GPIO_PIN_SET);
 800316c:	2201      	movs	r2, #1
 800316e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003172:	4808      	ldr	r0, [pc, #32]	; (8003194 <main+0x18c>)
 8003174:	f002 fc1a 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_Status = setRadio();
 8003178:	f000 fdc4 	bl	8003d04 <setRadio>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    /* USER CODE END WHILE */

	if(resetSI4032)
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <main+0x1a4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d030      	beq.n	80031ec <main+0x1e4>
	{
		HAL_Status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		while(HAL_Status != HAL_OK)
 8003190:	e025      	b.n	80031de <main+0x1d6>
 8003192:	bf00      	nop
 8003194:	40010c00 	.word	0x40010c00
 8003198:	40010800 	.word	0x40010800
 800319c:	40011000 	.word	0x40011000
 80031a0:	20000488 	.word	0x20000488
 80031a4:	200003a0 	.word	0x200003a0
 80031a8:	20000518 	.word	0x20000518
 80031ac:	2000051c 	.word	0x2000051c
 80031b0:	20000520 	.word	0x20000520
 80031b4:	20000524 	.word	0x20000524
 80031b8:	20000528 	.word	0x20000528
 80031bc:	2000052c 	.word	0x2000052c
 80031c0:	20000530 	.word	0x20000530
 80031c4:	2000053c 	.word	0x2000053c
		{
			HAL_Status = setupRadio(&hspi2);
 80031c8:	4890      	ldr	r0, [pc, #576]	; (800340c <main+0x404>)
 80031ca:	f000 fd13 	bl	8003bf4 <setupRadio>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
			HAL_Status = setRadio();
 80031d4:	f000 fd96 	bl	8003d04 <setRadio>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		while(HAL_Status != HAL_OK)
 80031de:	f897 398f 	ldrb.w	r3, [r7, #2447]	; 0x98f
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <main+0x1c0>
		}

		resetSI4032 = 0;
 80031e6:	4b8a      	ldr	r3, [pc, #552]	; (8003410 <main+0x408>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
	}

	if(sendGPSInfo == 1)
 80031ec:	4b89      	ldr	r3, [pc, #548]	; (8003414 <main+0x40c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <main+0x1f8>
	{
		processGPS(&huart1);
 80031f4:	4888      	ldr	r0, [pc, #544]	; (8003418 <main+0x410>)
 80031f6:	f7ff fb9b 	bl	8002930 <processGPS>
		sendGPSInfo 	= 0;
 80031fa:	4b86      	ldr	r3, [pc, #536]	; (8003414 <main+0x40c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
	}

	if(sendInfo)
 8003200:	4b86      	ldr	r3, [pc, #536]	; (800341c <main+0x414>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <main+0x20e>
	{
		processInfo(&rsDriver);
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fe2a 	bl	8002e64 <processInfo>
		sendInfo = 0;
 8003210:	4b82      	ldr	r3, [pc, #520]	; (800341c <main+0x414>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
	}

	if(sendCallSignInfo)
 8003216:	4b82      	ldr	r3, [pc, #520]	; (8003420 <main+0x418>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <main+0x224>
	{
		processCallSign(&rsDriver);
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fa2b 	bl	800167c <processCallSign>
		sendCallSignInfo = 0;
 8003226:	4b7e      	ldr	r3, [pc, #504]	; (8003420 <main+0x418>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
	}

	if(sendBattInfo)
 800322c:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <main+0x41c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <main+0x25c>
	{
		HAL_Status = clearRadio();
 8003234:	f000 fd58 	bl	8003ce8 <clearRadio>
 8003238:	4603      	mov	r3, r0
 800323a:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		processBattery(&rsDriver,&hadc1);
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	4979      	ldr	r1, [pc, #484]	; (8003428 <main+0x420>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f86c 	bl	8001320 <processBattery>
		HAL_Status = setRadio();
 8003248:	f000 fd5c 	bl	8003d04 <setRadio>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		tempClockStable  = 0;
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <main+0x424>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
		humClockStable   = 0;
 8003258:	4b75      	ldr	r3, [pc, #468]	; (8003430 <main+0x428>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
		sendBattInfo    = 0;
 800325e:	4b71      	ldr	r3, [pc, #452]	; (8003424 <main+0x41c>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
	}

	if(sendInternalTemperatureInfo)
 8003264:	4b73      	ldr	r3, [pc, #460]	; (8003434 <main+0x42c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d016      	beq.n	800329a <main+0x292>
	{
		HAL_Status = clearRadio();
 800326c:	f000 fd3c 	bl	8003ce8 <clearRadio>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		processInternalTemp(&rsDriver);
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fe4b 	bl	8002f14 <processInternalTemp>
		HAL_Status = setRadio();
 800327e:	f000 fd41 	bl	8003d04 <setRadio>
 8003282:	4603      	mov	r3, r0
 8003284:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		tempClockStable  = 0;
 8003288:	4b68      	ldr	r3, [pc, #416]	; (800342c <main+0x424>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
		humClockStable   = 0;
 800328e:	4b68      	ldr	r3, [pc, #416]	; (8003430 <main+0x428>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
		sendInternalTemperatureInfo = 0;
 8003294:	4b67      	ldr	r3, [pc, #412]	; (8003434 <main+0x42c>)
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
	}

	//sendExternalTemperatureInfo = 1;
	if(sendExternalTemperatureInfo)
 800329a:	4b67      	ldr	r3, [pc, #412]	; (8003438 <main+0x430>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d043      	beq.n	800332a <main+0x322>
	{
		if(tempClockEnabled == 0)
 80032a2:	4b66      	ldr	r3, [pc, #408]	; (800343c <main+0x434>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d116      	bne.n	80032d8 <main+0x2d0>
		{
			HAL_GPIO_WritePin(T_MEAS_SEL_MAINTEMP_GPIO_Port, T_MEAS_SEL_MAINTEMP_Pin, GPIO_PIN_SET); //pin 12 boom
 80032aa:	2201      	movs	r2, #1
 80032ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032b0:	4863      	ldr	r0, [pc, #396]	; (8003440 <main+0x438>)
 80032b2:	f002 fb7b 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TEMP_MODE_SELECT_START_GPIO_Port, TEMP_MODE_SELECT_START_Pin, GPIO_PIN_SET);
 80032b6:	2201      	movs	r2, #1
 80032b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032bc:	4861      	ldr	r0, [pc, #388]	; (8003444 <main+0x43c>)
 80032be:	f002 fb75 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_Status = setRadio();
 80032c2:	f000 fd1f 	bl	8003d04 <setRadio>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
			tempClockEnabled = 1;
 80032cc:	4b5b      	ldr	r3, [pc, #364]	; (800343c <main+0x434>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
			tempClockStable  = 0;
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <main+0x424>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
		}
		if(tempClockStable > 5)
 80032d8:	4b54      	ldr	r3, [pc, #336]	; (800342c <main+0x424>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	dd24      	ble.n	800332a <main+0x322>
		{
			//HAL_Delay(1000);
			processExternalTemp(&rsDriver,frequency);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <main+0x440>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd fc73 	bl	8000bd0 <__aeabi_i2f>
 80032ea:	4602      	mov	r2, r0
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f9d9 	bl	80026a8 <processExternalTemp>
			HAL_GPIO_WritePin(T_MEAS_SEL_MAINTEMP_GPIO_Port, T_MEAS_SEL_MAINTEMP_Pin, GPIO_PIN_RESET); //pin 12 boom
 80032f6:	2200      	movs	r2, #0
 80032f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032fc:	4850      	ldr	r0, [pc, #320]	; (8003440 <main+0x438>)
 80032fe:	f002 fb55 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TEMP_MODE_SELECT_START_GPIO_Port, TEMP_MODE_SELECT_START_Pin, GPIO_PIN_RESET);
 8003302:	2200      	movs	r2, #0
 8003304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003308:	484e      	ldr	r0, [pc, #312]	; (8003444 <main+0x43c>)
 800330a:	f002 fb4f 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_Status = clearRadio();
 800330e:	f000 fceb 	bl	8003ce8 <clearRadio>
 8003312:	4603      	mov	r3, r0
 8003314:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f

			sendExternalTemperatureInfo = 0;
 8003318:	4b47      	ldr	r3, [pc, #284]	; (8003438 <main+0x430>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
			tempClockEnabled            = 0;
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <main+0x434>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
			sendHumidityInfo            = 1;
 8003324:	4b49      	ldr	r3, [pc, #292]	; (800344c <main+0x444>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
		}
	}

	//sendHumidityInfo = 0;
	if(sendHumidityInfo)
 800332a:	4b48      	ldr	r3, [pc, #288]	; (800344c <main+0x444>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03c      	beq.n	80033ac <main+0x3a4>
	{
		if(humClockEnabled == 0)
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <main+0x448>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d114      	bne.n	8003364 <main+0x35c>
		{
			HAL_GPIO_WritePin(HUMI_SEL0_GPIO_Port, HUMI_SEL0_Pin, GPIO_PIN_SET);
 800333a:	2201      	movs	r2, #1
 800333c:	2108      	movs	r1, #8
 800333e:	4841      	ldr	r0, [pc, #260]	; (8003444 <main+0x43c>)
 8003340:	f002 fb34 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HUMI_MODE_SELECT_START_GPIO_Port, HUMI_MODE_SELECT_START_Pin, GPIO_PIN_SET);
 8003344:	2201      	movs	r2, #1
 8003346:	2104      	movs	r1, #4
 8003348:	4842      	ldr	r0, [pc, #264]	; (8003454 <main+0x44c>)
 800334a:	f002 fb2f 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_Status = setRadio();
 800334e:	f000 fcd9 	bl	8003d04 <setRadio>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
			humClockEnabled = 1;
 8003358:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <main+0x448>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]
			humClockStable  = 0;
 800335e:	4b34      	ldr	r3, [pc, #208]	; (8003430 <main+0x428>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
		}
		if(humClockStable  > 5)
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <main+0x428>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b05      	cmp	r3, #5
 800336a:	dd1f      	ble.n	80033ac <main+0x3a4>
		{
			//HAL_Delay(1000);
			processHumidity(&rsDriver,frequency);
 800336c:	4b36      	ldr	r3, [pc, #216]	; (8003448 <main+0x440>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fc2d 	bl	8000bd0 <__aeabi_i2f>
 8003376:	4602      	mov	r2, r0
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fd13 	bl	8002da8 <processHumidity>
			HAL_GPIO_WritePin(HUMI_SEL0_GPIO_Port, HUMI_SEL0_Pin, GPIO_PIN_RESET);
 8003382:	2200      	movs	r2, #0
 8003384:	2108      	movs	r1, #8
 8003386:	482f      	ldr	r0, [pc, #188]	; (8003444 <main+0x43c>)
 8003388:	f002 fb10 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HUMI_MODE_SELECT_START_GPIO_Port, HUMI_MODE_SELECT_START_Pin, GPIO_PIN_RESET);
 800338c:	2200      	movs	r2, #0
 800338e:	2104      	movs	r1, #4
 8003390:	4830      	ldr	r0, [pc, #192]	; (8003454 <main+0x44c>)
 8003392:	f002 fb0b 	bl	80059ac <HAL_GPIO_WritePin>
			HAL_Status = clearRadio();
 8003396:	f000 fca7 	bl	8003ce8 <clearRadio>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f

			sendHumidityInfo = 0;
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <main+0x444>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
			humClockEnabled  = 0;
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <main+0x448>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
		}
	}

	if(sendPressureInfo)
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <main+0x450>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d024      	beq.n	80033fe <main+0x3f6>
	{
		HAL_Status = clearRadio();
 80033b4:	f000 fc98 	bl	8003ce8 <clearRadio>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);
 80033be:	4b27      	ldr	r3, [pc, #156]	; (800345c <main+0x454>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4a26      	ldr	r2, [pc, #152]	; (800345c <main+0x454>)
 80033c4:	f023 0303 	bic.w	r3, r3, #3
 80033c8:	6053      	str	r3, [r2, #4]
		processPressure(&rsDriver);
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fbb4 	bl	8003b3a <processPressure>
		__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSE);
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <main+0x454>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <main+0x454>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6053      	str	r3, [r2, #4]
		HAL_Status = setRadio();
 80033e2:	f000 fc8f 	bl	8003d04 <setRadio>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 398f 	strb.w	r3, [r7, #2447]	; 0x98f
		tempClockStable  = 0;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <main+0x424>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
		humClockStable   = 0;
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <main+0x428>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
		sendPressureInfo = 0;
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <main+0x450>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
	}

#ifdef TEST_MODE
	processTestCam(&rsDriver);
#else
	processCAM(&huart3,&rsDriver);
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4817      	ldr	r0, [pc, #92]	; (8003460 <main+0x458>)
 8003404:	f7fe fcf2 	bl	8001dec <processCAM>
	if(resetSI4032)
 8003408:	e6bb      	b.n	8003182 <main+0x17a>
 800340a:	bf00      	nop
 800340c:	200003a0 	.word	0x200003a0
 8003410:	2000051c 	.word	0x2000051c
 8003414:	20000520 	.word	0x20000520
 8003418:	20000488 	.word	0x20000488
 800341c:	20000524 	.word	0x20000524
 8003420:	20000528 	.word	0x20000528
 8003424:	2000052c 	.word	0x2000052c
 8003428:	20000370 	.word	0x20000370
 800342c:	20000544 	.word	0x20000544
 8003430:	2000054c 	.word	0x2000054c
 8003434:	20000530 	.word	0x20000530
 8003438:	20000534 	.word	0x20000534
 800343c:	20000540 	.word	0x20000540
 8003440:	40011000 	.word	0x40011000
 8003444:	40010c00 	.word	0x40010c00
 8003448:	20000554 	.word	0x20000554
 800344c:	20000538 	.word	0x20000538
 8003450:	20000548 	.word	0x20000548
 8003454:	40010800 	.word	0x40010800
 8003458:	2000053c 	.word	0x2000053c
 800345c:	40021000 	.word	0x40021000
 8003460:	200004d0 	.word	0x200004d0

08003464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b092      	sub	sp, #72	; 0x48
 8003468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800346a:	f107 0320 	add.w	r3, r7, #32
 800346e:	2228      	movs	r2, #40	; 0x28
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f005 f81c 	bl	80084b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003488:	463b      	mov	r3, r7
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003492:	2301      	movs	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800349c:	2300      	movs	r3, #0
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fab3 	bl	8005a10 <HAL_RCC_OscConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80034b0:	f000 fb3e 	bl	8003b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b4:	230f      	movs	r3, #15
 80034b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fd20 	bl	8005f14 <HAL_RCC_ClockConfig>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80034da:	f000 fb29 	bl	8003b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80034de:	2302      	movs	r3, #2
 80034e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e6:	463b      	mov	r3, r7
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 fed3 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034f4:	f000 fb1c 	bl	8003b30 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80034f8:	2200      	movs	r2, #0
 80034fa:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80034fe:	2000      	movs	r0, #0
 8003500:	f002 fdc0 	bl	8006084 <HAL_RCC_MCOConfig>
}
 8003504:	bf00      	nop
 8003506:	3748      	adds	r7, #72	; 0x48
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <MX_ADC1_Init+0x74>)
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <MX_ADC1_Init+0x78>)
 8003520:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <MX_ADC1_Init+0x74>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <MX_ADC1_Init+0x74>)
 800352a:	2200      	movs	r2, #0
 800352c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800352e:	4b14      	ldr	r3, [pc, #80]	; (8003580 <MX_ADC1_Init+0x74>)
 8003530:	2200      	movs	r2, #0
 8003532:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <MX_ADC1_Init+0x74>)
 8003536:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800353a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <MX_ADC1_Init+0x74>)
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003542:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <MX_ADC1_Init+0x74>)
 8003544:	2201      	movs	r2, #1
 8003546:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003548:	480d      	ldr	r0, [pc, #52]	; (8003580 <MX_ADC1_Init+0x74>)
 800354a:	f001 fbad 	bl	8004ca8 <HAL_ADC_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003554:	f000 faec 	bl	8003b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003558:	2305      	movs	r3, #5
 800355a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800355c:	2301      	movs	r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_ADC1_Init+0x74>)
 800356a:	f001 fe27 	bl	80051bc <HAL_ADC_ConfigChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003574:	f000 fadc 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000370 	.word	0x20000370
 8003584:	40012400 	.word	0x40012400

08003588 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <MX_SPI2_Init+0x64>)
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <MX_SPI2_Init+0x68>)
 8003590:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <MX_SPI2_Init+0x64>)
 8003594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003598:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <MX_SPI2_Init+0x64>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <MX_SPI2_Init+0x64>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <MX_SPI2_Init+0x64>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <MX_SPI2_Init+0x64>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <MX_SPI2_Init+0x64>)
 80035b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <MX_SPI2_Init+0x64>)
 80035bc:	2210      	movs	r2, #16
 80035be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <MX_SPI2_Init+0x64>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <MX_SPI2_Init+0x64>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <MX_SPI2_Init+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <MX_SPI2_Init+0x64>)
 80035d4:	220a      	movs	r2, #10
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035d8:	4804      	ldr	r0, [pc, #16]	; (80035ec <MX_SPI2_Init+0x64>)
 80035da:	f002 ff5b 	bl	8006494 <HAL_SPI_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80035e4:	f000 faa4 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200003a0 	.word	0x200003a0
 80035f0:	40003800 	.word	0x40003800

080035f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035fa:	f107 0318 	add.w	r3, r7, #24
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003612:	463b      	mov	r3, r7
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003624:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003626:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003628:	2200      	movs	r2, #0
 800362a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <MX_TIM2_Init+0xec>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003632:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003638:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363a:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <MX_TIM2_Init+0xec>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003640:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003642:	2200      	movs	r2, #0
 8003644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003646:	4826      	ldr	r0, [pc, #152]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003648:	f003 fca4 	bl	8006f94 <HAL_TIM_Base_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003652:	f000 fa6d 	bl	8003b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800365a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800365c:	f107 0318 	add.w	r3, r7, #24
 8003660:	4619      	mov	r1, r3
 8003662:	481f      	ldr	r0, [pc, #124]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003664:	f004 f850 	bl	8007708 <HAL_TIM_ConfigClockSource>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800366e:	f000 fa5f 	bl	8003b30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003672:	481b      	ldr	r0, [pc, #108]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003674:	f003 fd38 	bl	80070e8 <HAL_TIM_IC_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800367e:	f000 fa57 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4619      	mov	r1, r3
 8003690:	4813      	ldr	r0, [pc, #76]	; (80036e0 <MX_TIM2_Init+0xec>)
 8003692:	f004 fb69 	bl	8007d68 <HAL_TIMEx_MasterConfigSynchronization>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800369c:	f000 fa48 	bl	8003b30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036a0:	2300      	movs	r3, #0
 80036a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036a4:	2301      	movs	r3, #1
 80036a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	2204      	movs	r2, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	480a      	ldr	r0, [pc, #40]	; (80036e0 <MX_TIM2_Init+0xec>)
 80036b8:	f003 ff8a 	bl	80075d0 <HAL_TIM_IC_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80036c2:	f000 fa35 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80036c6:	2104      	movs	r1, #4
 80036c8:	4805      	ldr	r0, [pc, #20]	; (80036e0 <MX_TIM2_Init+0xec>)
 80036ca:	f003 fd65 	bl	8007198 <HAL_TIM_IC_Start_IT>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80036d4:	f000 fa2c 	bl	8003b30 <Error_Handler>
  }


  /* USER CODE END TIM2_Init 2 */

}
 80036d8:	bf00      	nop
 80036da:	3728      	adds	r7, #40	; 0x28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200003f8 	.word	0x200003f8

080036e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ea:	463b      	mov	r3, r7
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80036f2:	4b19      	ldr	r3, [pc, #100]	; (8003758 <MX_TIM7_Init+0x74>)
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <MX_TIM7_Init+0x78>)
 80036f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 23999;
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <MX_TIM7_Init+0x74>)
 80036fa:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80036fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <MX_TIM7_Init+0x74>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <MX_TIM7_Init+0x74>)
 8003708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800370c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <MX_TIM7_Init+0x74>)
 8003710:	2200      	movs	r2, #0
 8003712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003714:	4810      	ldr	r0, [pc, #64]	; (8003758 <MX_TIM7_Init+0x74>)
 8003716:	f003 fc3d 	bl	8006f94 <HAL_TIM_Base_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003720:	f000 fa06 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800372c:	463b      	mov	r3, r7
 800372e:	4619      	mov	r1, r3
 8003730:	4809      	ldr	r0, [pc, #36]	; (8003758 <MX_TIM7_Init+0x74>)
 8003732:	f004 fb19 	bl	8007d68 <HAL_TIMEx_MasterConfigSynchronization>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800373c:	f000 f9f8 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <MX_TIM7_Init+0x74>)
 8003742:	f003 fc77 	bl	8007034 <HAL_TIM_Base_Start_IT>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_TIM7_Init+0x6c>
  {
    Error_Handler();
 800374c:	f000 f9f0 	bl	8003b30 <Error_Handler>
  }


  /* USER CODE END TIM7_Init 2 */

}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000440 	.word	0x20000440
 800375c:	40001400 	.word	0x40001400

08003760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <MX_USART1_UART_Init+0x50>)
 8003768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 800376c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 8003786:	220c      	movs	r2, #12
 8003788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <MX_USART1_UART_Init+0x4c>)
 8003798:	f004 fb5e 	bl	8007e58 <HAL_UART_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037a2:	f000 f9c5 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000488 	.word	0x20000488
 80037b0:	40013800 	.word	0x40013800

080037b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <MX_USART3_UART_Init+0x50>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037ea:	4805      	ldr	r0, [pc, #20]	; (8003800 <MX_USART3_UART_Init+0x4c>)
 80037ec:	f004 fb34 	bl	8007e58 <HAL_UART_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80037f6:	f000 f99b 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200004d0 	.word	0x200004d0
 8003804:	40004800 	.word	0x40004800

08003808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380e:	f107 0310 	add.w	r3, r7, #16
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	4b44      	ldr	r3, [pc, #272]	; (8003930 <MX_GPIO_Init+0x128>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	4a43      	ldr	r2, [pc, #268]	; (8003930 <MX_GPIO_Init+0x128>)
 8003822:	f043 0310 	orr.w	r3, r3, #16
 8003826:	6193      	str	r3, [r2, #24]
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <MX_GPIO_Init+0x128>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <MX_GPIO_Init+0x128>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4a3d      	ldr	r2, [pc, #244]	; (8003930 <MX_GPIO_Init+0x128>)
 800383a:	f043 0320 	orr.w	r3, r3, #32
 800383e:	6193      	str	r3, [r2, #24]
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <MX_GPIO_Init+0x128>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800384c:	4b38      	ldr	r3, [pc, #224]	; (8003930 <MX_GPIO_Init+0x128>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	4a37      	ldr	r2, [pc, #220]	; (8003930 <MX_GPIO_Init+0x128>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6193      	str	r3, [r2, #24]
 8003858:	4b35      	ldr	r3, [pc, #212]	; (8003930 <MX_GPIO_Init+0x128>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <MX_GPIO_Init+0x128>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	4a31      	ldr	r2, [pc, #196]	; (8003930 <MX_GPIO_Init+0x128>)
 800386a:	f043 0308 	orr.w	r3, r3, #8
 800386e:	6193      	str	r3, [r2, #24]
 8003870:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <MX_GPIO_Init+0x128>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_NSS_Pin|T_MEAS_SEL_HUMITEMP_Pin|T_MEAS_SEL_MAINTEMP_Pin, GPIO_PIN_RESET);
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003882:	482c      	ldr	r0, [pc, #176]	; (8003934 <MX_GPIO_Init+0x12c>)
 8003884:	f002 f892 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HUMI_MODE_SELECT_START_Pin|T_MEAS_SEL0_Pin, GPIO_PIN_RESET);
 8003888:	2200      	movs	r2, #0
 800388a:	210c      	movs	r1, #12
 800388c:	482a      	ldr	r0, [pc, #168]	; (8003938 <MX_GPIO_Init+0x130>)
 800388e:	f002 f88d 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRESSURE_NSS_Pin|TEMP_MODE_SELECT_START_Pin|HUMI_SEL0_Pin|HUMI_SEL1_Pin
 8003892:	2200      	movs	r2, #0
 8003894:	f241 31fc 	movw	r1, #5116	; 0x13fc
 8003898:	4828      	ldr	r0, [pc, #160]	; (800393c <MX_GPIO_Init+0x134>)
 800389a:	f002 f887 	bl	80059ac <HAL_GPIO_WritePin>
                          |HUMI_SEL2_Pin|T_MEAS_SEL1_Pin|GREEN_LED_Pin|RED_LED_Pin
                          |HUMIDITY_HEATING_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RADIO_NSS_Pin T_MEAS_SEL_HUMITEMP_Pin T_MEAS_SEL_MAINTEMP_Pin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|T_MEAS_SEL_HUMITEMP_Pin|T_MEAS_SEL_MAINTEMP_Pin;
 800389e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80038a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2302      	movs	r3, #2
 80038ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b0:	f107 0310 	add.w	r3, r7, #16
 80038b4:	4619      	mov	r1, r3
 80038b6:	481f      	ldr	r0, [pc, #124]	; (8003934 <MX_GPIO_Init+0x12c>)
 80038b8:	f001 fef4 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HUMI_MODE_SELECT_START_Pin T_MEAS_SEL0_Pin */
  GPIO_InitStruct.Pin = HUMI_MODE_SELECT_START_Pin|T_MEAS_SEL0_Pin;
 80038bc:	230c      	movs	r3, #12
 80038be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c0:	2301      	movs	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c8:	2302      	movs	r3, #2
 80038ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038cc:	f107 0310 	add.w	r3, r7, #16
 80038d0:	4619      	mov	r1, r3
 80038d2:	4819      	ldr	r0, [pc, #100]	; (8003938 <MX_GPIO_Init+0x130>)
 80038d4:	f001 fee6 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_PIN4_Pin */
  GPIO_InitStruct.Pin = EXT_PIN4_Pin;
 80038d8:	2302      	movs	r3, #2
 80038da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXT_PIN4_GPIO_Port, &GPIO_InitStruct);
 80038e4:	f107 0310 	add.w	r3, r7, #16
 80038e8:	4619      	mov	r1, r3
 80038ea:	4814      	ldr	r0, [pc, #80]	; (800393c <MX_GPIO_Init+0x134>)
 80038ec:	f001 feda 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRESSURE_NSS_Pin TEMP_MODE_SELECT_START_Pin HUMI_SEL0_Pin HUMI_SEL1_Pin
                           HUMI_SEL2_Pin T_MEAS_SEL1_Pin GREEN_LED_Pin RED_LED_Pin
                           HUMIDITY_HEATING_ON_Pin */
  GPIO_InitStruct.Pin = PRESSURE_NSS_Pin|TEMP_MODE_SELECT_START_Pin|HUMI_SEL0_Pin|HUMI_SEL1_Pin
 80038f0:	f241 33fc 	movw	r3, #5116	; 0x13fc
 80038f4:	613b      	str	r3, [r7, #16]
                          |HUMI_SEL2_Pin|T_MEAS_SEL1_Pin|GREEN_LED_Pin|RED_LED_Pin
                          |HUMIDITY_HEATING_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f6:	2301      	movs	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2302      	movs	r3, #2
 8003900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003902:	f107 0310 	add.w	r3, r7, #16
 8003906:	4619      	mov	r1, r3
 8003908:	480c      	ldr	r0, [pc, #48]	; (800393c <MX_GPIO_Init+0x134>)
 800390a:	f001 fecb 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RCC_MCO_PRESS_Pin */
  GPIO_InitStruct.Pin = RCC_MCO_PRESS_Pin;
 800390e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003914:	2302      	movs	r3, #2
 8003916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003918:	2302      	movs	r3, #2
 800391a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RCC_MCO_PRESS_GPIO_Port, &GPIO_InitStruct);
 800391c:	f107 0310 	add.w	r3, r7, #16
 8003920:	4619      	mov	r1, r3
 8003922:	4805      	ldr	r0, [pc, #20]	; (8003938 <MX_GPIO_Init+0x130>)
 8003924:	f001 febe 	bl	80056a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003928:	bf00      	nop
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	40011000 	.word	0x40011000
 8003938:	40010800 	.word	0x40010800
 800393c:	40010c00 	.word	0x40010c00

08003940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a62      	ldr	r2, [pc, #392]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003952:	f001 f969 	bl	8004c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM7)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a60      	ldr	r2, [pc, #384]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	f040 80b6 	bne.w	8003ace <HAL_TIM_PeriodElapsedCallback+0x18e>
  {	  frequency = pulseCount;
 8003962:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a5f      	ldr	r2, [pc, #380]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003968:	6013      	str	r3, [r2, #0]
  	  pulseCount = 0;
 800396a:	4b5d      	ldr	r3, [pc, #372]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

	  //collectGPSData = 1;
	  HAL_GPIO_TogglePin(GPIOB, GREEN_LED_Pin);
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	485d      	ldr	r0, [pc, #372]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003974:	f002 f832 	bl	80059dc <HAL_GPIO_TogglePin>

	  oneSecTic++;
 8003978:	4b5c      	ldr	r3, [pc, #368]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a5b      	ldr	r2, [pc, #364]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003980:	6013      	str	r3, [r2, #0]

	  if(tempClockEnabled == 1)
 8003982:	4b5b      	ldr	r3, [pc, #364]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d104      	bne.n	8003994 <HAL_TIM_PeriodElapsedCallback+0x54>
	  {
		  tempClockStable++;
 800398a:	4b5a      	ldr	r3, [pc, #360]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003992:	6013      	str	r3, [r2, #0]
	  }

	  if(humClockEnabled == 1)
 8003994:	4b58      	ldr	r3, [pc, #352]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PeriodElapsedCallback+0x66>
	  {
		  humClockStable++;
 800399c:	4b57      	ldr	r3, [pc, #348]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	4a56      	ldr	r2, [pc, #344]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80039a4:	6013      	str	r3, [r2, #0]
	  }

	  if(oneSecTic % 12 == 0)
 80039a6:	4b51      	ldr	r3, [pc, #324]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	4b55      	ldr	r3, [pc, #340]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80039ac:	fb83 2301 	smull	r2, r3, r3, r1
 80039b0:	105a      	asrs	r2, r3, #1
 80039b2:	17cb      	asrs	r3, r1, #31
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	1aca      	subs	r2, r1, r3
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d102      	bne.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x8a>
	  {
		  sendGPSInfo = 1;
 80039c4:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
	  }

	  if(oneSecTic % 600 == 0)
 80039ca:	4b48      	ldr	r3, [pc, #288]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b4e      	ldr	r3, [pc, #312]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80039d0:	fb83 1302 	smull	r1, r3, r3, r2
 80039d4:	1199      	asrs	r1, r3, #6
 80039d6:	17d3      	asrs	r3, r2, #31
 80039d8:	1acb      	subs	r3, r1, r3
 80039da:	f44f 7116 	mov.w	r1, #600	; 0x258
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <HAL_TIM_PeriodElapsedCallback+0xae>
	  {
		  sendInfo = 1;
 80039e8:	4b48      	ldr	r3, [pc, #288]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
	  }

	  if(oneSecTic % 600 == 0)
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b45      	ldr	r3, [pc, #276]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80039f4:	fb83 1302 	smull	r1, r3, r3, r2
 80039f8:	1199      	asrs	r1, r3, #6
 80039fa:	17d3      	asrs	r3, r2, #31
 80039fc:	1acb      	subs	r3, r1, r3
 80039fe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_TIM_PeriodElapsedCallback+0xd2>
	  {
		  sendCallSignInfo = 1;
 8003a0c:	4b40      	ldr	r3, [pc, #256]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
	  }

	  if(oneSecTic % 60 == 0)
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003a18:	fb83 1302 	smull	r1, r3, r3, r2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	1159      	asrs	r1, r3, #5
 8003a20:	17d3      	asrs	r3, r2, #31
 8003a22:	1ac9      	subs	r1, r1, r3
 8003a24:	460b      	mov	r3, r1
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a5b      	subs	r3, r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	1ad1      	subs	r1, r2, r3
 8003a2e:	2900      	cmp	r1, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0xf8>
	  {
		  sendBattInfo = 1;
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
	  }

	  if(oneSecTic % 60 == 0)
 8003a38:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8003a42:	4413      	add	r3, r2
 8003a44:	1159      	asrs	r1, r3, #5
 8003a46:	17d3      	asrs	r3, r2, #31
 8003a48:	1ac9      	subs	r1, r1, r3
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a5b      	subs	r3, r3, r1
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	1ad1      	subs	r1, r2, r3
 8003a54:	2900      	cmp	r1, #0
 8003a56:	d102      	bne.n	8003a5e <HAL_TIM_PeriodElapsedCallback+0x11e>
	  {
		  sendInternalTemperatureInfo = 1;
 8003a58:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
	  }

	  if(oneSecTic % 30 == 0)
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003a64:	fb83 1302 	smull	r1, r3, r3, r2
 8003a68:	4413      	add	r3, r2
 8003a6a:	1119      	asrs	r1, r3, #4
 8003a6c:	17d3      	asrs	r3, r2, #31
 8003a6e:	1ac9      	subs	r1, r1, r3
 8003a70:	460b      	mov	r3, r1
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a5b      	subs	r3, r3, r1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	1ad1      	subs	r1, r2, r3
 8003a7a:	2900      	cmp	r1, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_TIM_PeriodElapsedCallback+0x144>
	  {
		  sendExternalTemperatureInfo = 1;
 8003a7e:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
//	  if(oneSecTic % 45 == 0)
//	  {
//		  sendHumidityInfo = 1;
//	  }

	  if(oneSecTic % 20 == 0)
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003a8a:	fb83 2301 	smull	r2, r3, r3, r1
 8003a8e:	10da      	asrs	r2, r3, #3
 8003a90:	17cb      	asrs	r3, r1, #31
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	1aca      	subs	r2, r1, r3
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	d102      	bne.n	8003aa8 <HAL_TIM_PeriodElapsedCallback+0x168>
	  {
		  sendPressureInfo = 1;
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
	  }

	  if(oneSecTic % 60 == 0)
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003aae:	fb83 1302 	smull	r1, r3, r3, r2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	1159      	asrs	r1, r3, #5
 8003ab6:	17d3      	asrs	r3, r2, #31
 8003ab8:	1ac9      	subs	r1, r1, r3
 8003aba:	460b      	mov	r3, r1
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a5b      	subs	r3, r3, r1
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	1ad1      	subs	r1, r2, r3
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_TIM_PeriodElapsedCallback+0x18e>
	  {
		  resetSI4032 = 1;
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
	  }
  }

  /* USER CODE END Callback 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40001000 	.word	0x40001000
 8003adc:	40001400 	.word	0x40001400
 8003ae0:	20000550 	.word	0x20000550
 8003ae4:	20000554 	.word	0x20000554
 8003ae8:	40010c00 	.word	0x40010c00
 8003aec:	20000518 	.word	0x20000518
 8003af0:	20000540 	.word	0x20000540
 8003af4:	20000544 	.word	0x20000544
 8003af8:	20000548 	.word	0x20000548
 8003afc:	2000054c 	.word	0x2000054c
 8003b00:	2aaaaaab 	.word	0x2aaaaaab
 8003b04:	20000520 	.word	0x20000520
 8003b08:	1b4e81b5 	.word	0x1b4e81b5
 8003b0c:	20000524 	.word	0x20000524
 8003b10:	20000528 	.word	0x20000528
 8003b14:	88888889 	.word	0x88888889
 8003b18:	2000052c 	.word	0x2000052c
 8003b1c:	20000530 	.word	0x20000530
 8003b20:	20000534 	.word	0x20000534
 8003b24:	66666667 	.word	0x66666667
 8003b28:	2000053c 	.word	0x2000053c
 8003b2c:	2000051c 	.word	0x2000051c

08003b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b34:	b672      	cpsid	i
}
 8003b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <Error_Handler+0x8>

08003b3a <processPressure>:
#include "RPM411.h"
#include "pressure.h"
#include "stm32f1xx_hal.h"

int processPressure(struct rscode_driver *rsDriver)
{
 8003b3a:	b590      	push	{r4, r7, lr}
 8003b3c:	b09b      	sub	sp, #108	; 0x6c
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_Status;
	RPM411StatusTypeDef RPM411Status = RPM411_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	int status   = 1;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t len = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	uint8_t txBuf[MTU_SIZE];
	float pressureValue = 0.0;
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]

	struct HABPacketPressureInfoDataType HABPacketPressureInfoData;

	memset(&HABPacketPressureInfoData, '\0', sizeof(HABPacketPressureInfoData));
 8003b58:	f107 0308 	add.w	r3, r7, #8
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4618      	mov	r0, r3
 8003b62:	f004 fca5 	bl	80084b0 <memset>

	HABPacketPressureInfoData.packetType  		= PRESS_INFO;
 8003b66:	2377      	movs	r3, #119	; 0x77
 8003b68:	813b      	strh	r3, [r7, #8]
	//HABPacketPressureInfoData.pressureInfoData  = RPM411PressureData;

	RPM411Status = RPM411ReadPressure(&pressureValue);
 8003b6a:	f107 0318 	add.w	r3, r7, #24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fb24 	bl	80011bc <RPM411ReadPressure>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	if(RPM411Status != RPM411_OK)
 8003b7a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <processPressure+0x4e>
	{
		status = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	667b      	str	r3, [r7, #100]	; 0x64
 8003b86:	e030      	b.n	8003bea <processPressure+0xb0>
	}
	else
	{
		HABPacketPressureInfoData.pressureInfoData = pressureValue;
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f8c7 300a 	str.w	r3, [r7, #10]
		len = sizeof(HABPacketPressureInfoData)-sizeof(HABPacketPressureInfoData.crc16)-NPAR;
 8003b8e:	2306      	movs	r3, #6
 8003b90:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		HABPacketPressureInfoData.crc16 = crc_16((unsigned char *)&HABPacketPressureInfoData,len);
 8003b94:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8003b98:	f107 0308 	add.w	r3, r7, #8
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fabe 	bl	8002120 <crc_16>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	81fb      	strh	r3, [r7, #14]
		rscode_encode(rsDriver, (unsigned char *)&HABPacketPressureInfoData, sizeof(HABPacketPressureInfoData)-NPAR, (unsigned char *)&HABPacketPressureInfoData);
 8003ba8:	f107 0308 	add.w	r3, r7, #8
 8003bac:	f107 0108 	add.w	r1, r7, #8
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fd64 	bl	8002680 <rscode_encode>
		memcpy(txBuf,&HABPacketPressureInfoData,sizeof(HABPacketPressureInfoData));
 8003bb8:	f107 041c 	add.w	r4, r7, #28
 8003bbc:	f107 0308 	add.w	r3, r7, #8
 8003bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_Status =  radioTxData(txBuf,sizeof(HABPacketPressureInfoData));
 8003bc6:	f107 031c 	add.w	r3, r7, #28
 8003bca:	2110      	movs	r1, #16
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa85 	bl	80040dc <radioTxData>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		HAL_Delay(PROTOCOL_DELAY);
 8003bd8:	2064      	movs	r0, #100	; 0x64
 8003bda:	f001 f841 	bl	8004c60 <HAL_Delay>
		if(HAL_Status != HAL_OK)
 8003bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <processPressure+0xb0>
		{
			status = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	667b      	str	r3, [r7, #100]	; 0x64
		}
	}

	return status;
 8003bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	376c      	adds	r7, #108	; 0x6c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <setupRadio>:
#include "main.h"

static SPI_HandleTypeDef *hspi;

HAL_StatusTypeDef setupRadio(SPI_HandleTypeDef *hspiParam)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	  HAL_StatusTypeDef HAL_Status;
	  hspi = hspiParam;
 8003bfc:	4a37      	ldr	r2, [pc, #220]	; (8003cdc <setupRadio+0xe8>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]

	  //Soft Reset
	  HAL_Status = radio_write_register(0x07, 0x80);
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	2007      	movs	r0, #7
 8003c06:	f000 f8f5 	bl	8003df4 <radio_write_register>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	73fb      	strb	r3, [r7, #15]
	  HAL_Delay(1000);
 8003c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c12:	f001 f825 	bl	8004c60 <HAL_Delay>

	  //Set Tx Power
	  HAL_Status = radio_write_register(0x6D, 00 | (TX_POWER & 0x0007));
 8003c16:	2107      	movs	r1, #7
 8003c18:	206d      	movs	r0, #109	; 0x6d
 8003c1a:	f000 f8eb 	bl	8003df4 <radio_write_register>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	73fb      	strb	r3, [r7, #15]

	  HAL_Status = radio_set_tx_frequency(TRANSMIT_FREQUENCY);
 8003c22:	482f      	ldr	r0, [pc, #188]	; (8003ce0 <setupRadio+0xec>)
 8003c24:	f000 f994 	bl	8003f50 <radio_set_tx_frequency>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]

	  //Data Rate 9.6kbps
	  HAL_Status = radio_write_register(0x6E, Si4032_TX_DATA_RATE_1);
 8003c2c:	2159      	movs	r1, #89	; 0x59
 8003c2e:	206e      	movs	r0, #110	; 0x6e
 8003c30:	f000 f8e0 	bl	8003df4 <radio_write_register>
 8003c34:	4603      	mov	r3, r0
 8003c36:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x6F, Si4032_TX_DATA_RATE_0);
 8003c38:	2121      	movs	r1, #33	; 0x21
 8003c3a:	206f      	movs	r0, #111	; 0x6f
 8003c3c:	f000 f8da 	bl	8003df4 <radio_write_register>
 8003c40:	4603      	mov	r3, r0
 8003c42:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x70, Si4032_MODULATION_MODE_CONTROL_1);
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	2070      	movs	r0, #112	; 0x70
 8003c48:	f000 f8d4 	bl	8003df4 <radio_write_register>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
	  //HAL_Status = radio_write_register(0x70, 0x20);

	  // 10KHz Dev
		HAL_Status = radio_write_register(0x72, Si4032_FREQUENCY_DEVIATION);
 8003c50:	210d      	movs	r1, #13
 8003c52:	2072      	movs	r0, #114	; 0x72
 8003c54:	f000 f8ce 	bl	8003df4 <radio_write_register>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]

	  //Preamble
	  HAL_Status = setPreamble();
 8003c5c:	f000 f87c 	bl	8003d58 <setPreamble>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]

	  //Header Control 2  sync b11 Fix Packet Length no header 4 sync words
	  HAL_Status = radio_write_register(0x33, 0x0E);
 8003c64:	210e      	movs	r1, #14
 8003c66:	2033      	movs	r0, #51	; 0x33
 8003c68:	f000 f8c4 	bl	8003df4 <radio_write_register>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	73fb      	strb	r3, [r7, #15]


	  HAL_Status = radio_write_register(0x36, 0x08);
 8003c70:	2108      	movs	r1, #8
 8003c72:	2036      	movs	r0, #54	; 0x36
 8003c74:	f000 f8be 	bl	8003df4 <radio_write_register>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x37, 0x6D);
 8003c7c:	216d      	movs	r1, #109	; 0x6d
 8003c7e:	2037      	movs	r0, #55	; 0x37
 8003c80:	f000 f8b8 	bl	8003df4 <radio_write_register>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x38, 0x53);
 8003c88:	2153      	movs	r1, #83	; 0x53
 8003c8a:	2038      	movs	r0, #56	; 0x38
 8003c8c:	f000 f8b2 	bl	8003df4 <radio_write_register>
 8003c90:	4603      	mov	r3, r0
 8003c92:	73fb      	strb	r3, [r7, #15]
	  HAL_Status = radio_write_register(0x39, 0x88);
 8003c94:	2188      	movs	r1, #136	; 0x88
 8003c96:	2039      	movs	r0, #57	; 0x39
 8003c98:	f000 f8ac 	bl	8003df4 <radio_write_register>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]

	  //enable the TX packet handler  CCITT
	  radio_write_register(0x30, 0x08);
 8003ca0:	2108      	movs	r1, #8
 8003ca2:	2030      	movs	r0, #48	; 0x30
 8003ca4:	f000 f8a6 	bl	8003df4 <radio_write_register>
	  //radio_write_register(0x30, 0x80); // no packet handling no CRC

	  // GFSK FIFO Mode FIFO Mode
	  HAL_Status = setGFSK();
 8003ca8:	f000 f848 	bl	8003d3c <setGFSK>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]

	  //HAL_Status = radio_write_register(0x71, 0x63);

	 //write 0x04 to the Interrupt Enable 1 register
	 HAL_Status = radio_write_register(0x05, 0x04);
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	2005      	movs	r0, #5
 8003cb4:	f000 f89e 	bl	8003df4 <radio_write_register>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]
	 //write 0x00 to the Interrupt Enable 2 register
	 HAL_Status = radio_write_register(0x06, 0x00);
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	2006      	movs	r0, #6
 8003cc0:	f000 f898 	bl	8003df4 <radio_write_register>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	73fb      	strb	r3, [r7, #15]

	 HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <setupRadio+0xf0>)
 8003cce:	f001 fe6d 	bl	80059ac <HAL_GPIO_WritePin>

	 return HAL_Status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000558 	.word	0x20000558
 8003ce0:	43d94000 	.word	0x43d94000
 8003ce4:	40010c00 	.word	0x40010c00

08003ce8 <clearRadio>:

HAL_StatusTypeDef clearRadio()
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  HAL_Status = radio_write_register(0x0C, 0x00);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	200c      	movs	r0, #12
 8003cf2:	f000 f87f 	bl	8003df4 <radio_write_register>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <setRadio>:

HAL_StatusTypeDef setRadio()
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  HAL_Status = radio_write_register(0x0C, 0x01);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	200c      	movs	r0, #12
 8003d0e:	f000 f871 	bl	8003df4 <radio_write_register>
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 8003d16:	79fb      	ldrb	r3, [r7, #7]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <setCW>:

	  return HAL_Status;
}

HAL_StatusTypeDef setCW()
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  HAL_Status = radio_write_register(0x71, 0x20);
 8003d26:	2120      	movs	r1, #32
 8003d28:	2071      	movs	r0, #113	; 0x71
 8003d2a:	f000 f863 	bl	8003df4 <radio_write_register>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 8003d32:	79fb      	ldrb	r3, [r7, #7]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <setGFSK>:

HAL_StatusTypeDef setGFSK()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  // GFSK FIFO Mode FIFO Mode
	  HAL_Status = radio_write_register(0x71, Si4032_MODULATION_MODE_CONTROL_2);
 8003d42:	2123      	movs	r1, #35	; 0x23
 8003d44:	2071      	movs	r0, #113	; 0x71
 8003d46:	f000 f855 	bl	8003df4 <radio_write_register>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <setPreamble>:

HAL_StatusTypeDef setPreamble()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
	  HAL_StatusTypeDef HAL_Status;

	  // GFSK FIFO Mode FIFO Mode
	  //Preamble
	  HAL_Status = radio_write_register(0x34, 0x10);
 8003d5e:	2110      	movs	r1, #16
 8003d60:	2034      	movs	r0, #52	; 0x34
 8003d62:	f000 f847 	bl	8003df4 <radio_write_register>
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]

	  return HAL_Status;
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <radio_read_register>:

HAL_StatusTypeDef radio_read_register(const uint8_t register_addr, uint8_t *pData)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef HAL_Status;
  uint16_t data_word;
  uint8_t addr;
  uint8_t val;

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_RESET);
 8003d80:	2200      	movs	r2, #0
 8003d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d86:	4819      	ldr	r0, [pc, #100]	; (8003dec <radio_read_register+0x78>)
 8003d88:	f001 fe10 	bl	80059ac <HAL_GPIO_WritePin>

  data_word = ((register_addr | 0x0) << 8);
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	81fb      	strh	r3, [r7, #14]
  addr = data_word >> 8;
 8003d94:	89fb      	ldrh	r3, [r7, #14]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	733b      	strb	r3, [r7, #12]

  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&addr, 1, 1000);
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <radio_read_register+0x7c>)
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	f107 010c 	add.w	r1, r7, #12
 8003da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003daa:	2201      	movs	r2, #1
 8003dac:	f002 fbee 	bl	800658c <HAL_SPI_Transmit>
 8003db0:	4603      	mov	r3, r0
 8003db2:	737b      	strb	r3, [r7, #13]
  HAL_Delay(1);
 8003db4:	2001      	movs	r0, #1
 8003db6:	f000 ff53 	bl	8004c60 <HAL_Delay>
  HAL_Status = HAL_SPI_Receive(hspi, &val, 1, 1000);
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <radio_read_register+0x7c>)
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	f107 010b 	add.w	r1, r7, #11
 8003dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f002 fd23 	bl	8006812 <HAL_SPI_Receive>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	737b      	strb	r3, [r7, #13]
 8003dd0:	7afa      	ldrb	r2, [r7, #11]

  memcpy(pData,&val,1);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_SET);
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ddc:	4803      	ldr	r0, [pc, #12]	; (8003dec <radio_read_register+0x78>)
 8003dde:	f001 fde5 	bl	80059ac <HAL_GPIO_WritePin>

  return HAL_Status;
 8003de2:	7b7b      	ldrb	r3, [r7, #13]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40011000 	.word	0x40011000
 8003df0:	20000558 	.word	0x20000558

08003df4 <radio_write_register>:

HAL_StatusTypeDef radio_write_register(const uint8_t register_addr, uint8_t value)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	71fb      	strb	r3, [r7, #7]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef HAL_Status;

  uint8_t WR = 0x80;
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	73fb      	strb	r3, [r7, #15]
  uint16_t data_word;
  uint8_t addr;
  uint8_t val;

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_RESET);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e0e:	481d      	ldr	r0, [pc, #116]	; (8003e84 <radio_write_register+0x90>)
 8003e10:	f001 fdcc 	bl	80059ac <HAL_GPIO_WritePin>

  data_word = ((register_addr | WR) << 8) | value;
 8003e14:	79fa      	ldrb	r2, [r7, #7]
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	79bb      	ldrb	r3, [r7, #6]
 8003e22:	b21b      	sxth	r3, r3
 8003e24:	4313      	orrs	r3, r2
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	81bb      	strh	r3, [r7, #12]
  addr = data_word >> 8;
 8003e2a:	89bb      	ldrh	r3, [r7, #12]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	72bb      	strb	r3, [r7, #10]
  val  = (uint8_t)data_word;
 8003e34:	89bb      	ldrh	r3, [r7, #12]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	727b      	strb	r3, [r7, #9]


  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&addr, 1, 1000);
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <radio_write_register+0x94>)
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	f107 010a 	add.w	r1, r7, #10
 8003e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e46:	2201      	movs	r2, #1
 8003e48:	f002 fba0 	bl	800658c <HAL_SPI_Transmit>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	72fb      	strb	r3, [r7, #11]
  HAL_Delay(1);
 8003e50:	2001      	movs	r0, #1
 8003e52:	f000 ff05 	bl	8004c60 <HAL_Delay>
  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&val, 1, 1000);
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <radio_write_register+0x94>)
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	f107 0109 	add.w	r1, r7, #9
 8003e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e62:	2201      	movs	r2, #1
 8003e64:	f002 fb92 	bl	800658c <HAL_SPI_Transmit>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	72fb      	strb	r3, [r7, #11]

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_SET);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e72:	4804      	ldr	r0, [pc, #16]	; (8003e84 <radio_write_register+0x90>)
 8003e74:	f001 fd9a 	bl	80059ac <HAL_GPIO_WritePin>

  return HAL_Status;
 8003e78:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40011000 	.word	0x40011000
 8003e88:	20000558 	.word	0x20000558

08003e8c <radio_write_register_burst>:

HAL_StatusTypeDef radio_write_register_burst(const uint8_t register_addr, uint8_t txData[],uint8_t len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	71fb      	strb	r3, [r7, #7]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef HAL_Status;

  uint8_t WR = 0x80;
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	73fb      	strb	r3, [r7, #15]
  uint16_t data_word;
  uint8_t addr;
  uint8_t val;
  int i;

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_RESET);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ea6:	4828      	ldr	r0, [pc, #160]	; (8003f48 <radio_write_register_burst+0xbc>)
 8003ea8:	f001 fd80 	bl	80059ac <HAL_GPIO_WritePin>

  data_word = ((register_addr | WR) << 8) | txData[0];
 8003eac:	79fa      	ldrb	r2, [r7, #7]
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	b21a      	sxth	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b21b      	sxth	r3, r3
 8003ec2:	81bb      	strh	r3, [r7, #12]
  addr = data_word >> 8;
 8003ec4:	89bb      	ldrh	r3, [r7, #12]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	72fb      	strb	r3, [r7, #11]
  val  = (uint8_t)data_word;
 8003ece:	89bb      	ldrh	r3, [r7, #12]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	72bb      	strb	r3, [r7, #10]


  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&addr, 1, 1000);
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <radio_write_register_burst+0xc0>)
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	f107 010b 	add.w	r1, r7, #11
 8003edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f002 fb53 	bl	800658c <HAL_SPI_Transmit>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]
  HAL_Delay(1);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f000 feb8 	bl	8004c60 <HAL_Delay>
  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&val, 1, 1000);
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <radio_write_register_burst+0xc0>)
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	f107 010a 	add.w	r1, r7, #10
 8003ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003efc:	2201      	movs	r2, #1
 8003efe:	f002 fb45 	bl	800658c <HAL_SPI_Transmit>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]

  for(i=1;i<len;i++)
 8003f06:	2301      	movs	r3, #1
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	e00e      	b.n	8003f2a <radio_write_register_burst+0x9e>
  {
	  HAL_Status = HAL_SPI_Transmit(hspi, (uint8_t *)&txData[i], 1, 1000);
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <radio_write_register_burst+0xc0>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	18d1      	adds	r1, r2, r3
 8003f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f002 fb36 	bl	800658c <HAL_SPI_Transmit>
 8003f20:	4603      	mov	r3, r0
 8003f22:	75fb      	strb	r3, [r7, #23]
  for(i=1;i<len;i++)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	3301      	adds	r3, #1
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	79bb      	ldrb	r3, [r7, #6]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	dbec      	blt.n	8003f0c <radio_write_register_burst+0x80>
  }

  HAL_GPIO_WritePin(RADIO_NSS_GPIO_Port, RADIO_NSS_Pin, GPIO_PIN_SET);
 8003f32:	2201      	movs	r2, #1
 8003f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f38:	4803      	ldr	r0, [pc, #12]	; (8003f48 <radio_write_register_burst+0xbc>)
 8003f3a:	f001 fd37 	bl	80059ac <HAL_GPIO_WritePin>

  return HAL_Status;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40011000 	.word	0x40011000
 8003f4c:	20000558 	.word	0x20000558

08003f50 <radio_set_tx_frequency>:

HAL_StatusTypeDef radio_set_tx_frequency(float freq_in_mhz)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef HAL_Status;
  float SI4032_CLOCK = 26.0;
 8003f58:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <radio_set_tx_frequency+0x174>)
 8003f5a:	617b      	str	r3, [r7, #20]

  uint8_t hbsel = (uint8_t) ((freq_in_mhz * (30.0f / SI4032_CLOCK)) >= 480.0f ? 1 : 0);
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	485a      	ldr	r0, [pc, #360]	; (80040c8 <radio_set_tx_frequency+0x178>)
 8003f60:	f7fc ff3e 	bl	8000de0 <__aeabi_fdiv>
 8003f64:	4603      	mov	r3, r0
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fc fe85 	bl	8000c78 <__aeabi_fmul>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4956      	ldr	r1, [pc, #344]	; (80040cc <radio_set_tx_frequency+0x17c>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd f832 	bl	8000fdc <__aeabi_fcmpge>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <radio_set_tx_frequency+0x32>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <radio_set_tx_frequency+0x34>
 8003f82:	2300      	movs	r3, #0
 8003f84:	74fb      	strb	r3, [r7, #19]

  uint8_t fb = (uint8_t) ((((uint8_t)((freq_in_mhz * (30.0f / SI4032_CLOCK)) / 10) - 24) - (24 * hbsel)) / (1 + hbsel));
 8003f86:	6979      	ldr	r1, [r7, #20]
 8003f88:	484f      	ldr	r0, [pc, #316]	; (80040c8 <radio_set_tx_frequency+0x178>)
 8003f8a:	f7fc ff29 	bl	8000de0 <__aeabi_fdiv>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc fe70 	bl	8000c78 <__aeabi_fmul>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	494d      	ldr	r1, [pc, #308]	; (80040d0 <radio_set_tx_frequency+0x180>)
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc ff1f 	bl	8000de0 <__aeabi_fdiv>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd f82d 	bl	8001004 <__aeabi_f2uiz>
 8003faa:	4603      	mov	r3, r0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f1a3 0118 	sub.w	r1, r3, #24
 8003fb2:	7cfa      	ldrb	r2, [r7, #19]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	18ca      	adds	r2, r1, r3
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fc6:	74bb      	strb	r3, [r7, #18]
  uint8_t gen_div  =  3;  // constant - not possible to change!
 8003fc8:	2303      	movs	r3, #3
 8003fca:	747b      	strb	r3, [r7, #17]
  uint16_t fc = (uint16_t) (((freq_in_mhz / ((SI4032_CLOCK / gen_div) * (hbsel + 1))) - fb - 24) * 64000);
 8003fcc:	7c7b      	ldrb	r3, [r7, #17]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fdfe 	bl	8000bd0 <__aeabi_i2f>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6978      	ldr	r0, [r7, #20]
 8003fda:	f7fc ff01 	bl	8000de0 <__aeabi_fdiv>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461c      	mov	r4, r3
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fdf2 	bl	8000bd0 <__aeabi_i2f>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7fc fe41 	bl	8000c78 <__aeabi_fmul>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fef0 	bl	8000de0 <__aeabi_fdiv>
 8004000:	4603      	mov	r3, r0
 8004002:	461c      	mov	r4, r3
 8004004:	7cbb      	ldrb	r3, [r7, #18]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fde2 	bl	8000bd0 <__aeabi_i2f>
 800400c:	4603      	mov	r3, r0
 800400e:	4619      	mov	r1, r3
 8004010:	4620      	mov	r0, r4
 8004012:	f7fc fd27 	bl	8000a64 <__aeabi_fsub>
 8004016:	4603      	mov	r3, r0
 8004018:	492e      	ldr	r1, [pc, #184]	; (80040d4 <radio_set_tx_frequency+0x184>)
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fd22 	bl	8000a64 <__aeabi_fsub>
 8004020:	4603      	mov	r3, r0
 8004022:	492d      	ldr	r1, [pc, #180]	; (80040d8 <radio_set_tx_frequency+0x188>)
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fe27 	bl	8000c78 <__aeabi_fmul>
 800402a:	4603      	mov	r3, r0
 800402c:	4618      	mov	r0, r3
 800402e:	f7fc ffe9 	bl	8001004 <__aeabi_f2uiz>
 8004032:	4603      	mov	r3, r0
 8004034:	81fb      	strh	r3, [r7, #14]
  HAL_Status = radio_write_register(0x75, (uint8_t) (0b01000000 | (fb & 0b11111) | ((hbsel & 0b1) << 5)));
 8004036:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	b25b      	sxtb	r3, r3
 8004040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004044:	b25a      	sxtb	r2, r3
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	015b      	lsls	r3, r3, #5
 800404a:	b25b      	sxtb	r3, r3
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	b25b      	sxtb	r3, r3
 8004052:	4313      	orrs	r3, r2
 8004054:	b25b      	sxtb	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4619      	mov	r1, r3
 800405a:	2075      	movs	r0, #117	; 0x75
 800405c:	f7ff feca 	bl	8003df4 <radio_write_register>
 8004060:	4603      	mov	r3, r0
 8004062:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x76, (uint8_t) (((uint16_t)fc >> 8) & 0xff));
 8004064:	89fb      	ldrh	r3, [r7, #14]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	b29b      	uxth	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4619      	mov	r1, r3
 800406e:	2076      	movs	r0, #118	; 0x76
 8004070:	f7ff fec0 	bl	8003df4 <radio_write_register>
 8004074:	4603      	mov	r3, r0
 8004076:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x77, (uint8_t) ((uint16_t)fc & 0xff));
 8004078:	89fb      	ldrh	r3, [r7, #14]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	2077      	movs	r0, #119	; 0x77
 8004080:	f7ff feb8 	bl	8003df4 <radio_write_register>
 8004084:	4603      	mov	r3, r0
 8004086:	737b      	strb	r3, [r7, #13]

  HAL_Status = radio_write_register(0x73, Si4032_FREQUENCY_OFFSET_1);
 8004088:	2100      	movs	r1, #0
 800408a:	2073      	movs	r0, #115	; 0x73
 800408c:	f7ff feb2 	bl	8003df4 <radio_write_register>
 8004090:	4603      	mov	r3, r0
 8004092:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x74, Si4032_FREQUENCY_OFFSET_2);
 8004094:	2100      	movs	r1, #0
 8004096:	2074      	movs	r0, #116	; 0x74
 8004098:	f7ff feac 	bl	8003df4 <radio_write_register>
 800409c:	4603      	mov	r3, r0
 800409e:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x7A, Si4032_FREQUENCY_HOPPING_STEP_SIZE);
 80040a0:	2100      	movs	r1, #0
 80040a2:	207a      	movs	r0, #122	; 0x7a
 80040a4:	f7ff fea6 	bl	8003df4 <radio_write_register>
 80040a8:	4603      	mov	r3, r0
 80040aa:	737b      	strb	r3, [r7, #13]
  HAL_Status = radio_write_register(0x79, Si4032_FREQUENCY_HOPPING_CHANNEL);
 80040ac:	2100      	movs	r1, #0
 80040ae:	2079      	movs	r0, #121	; 0x79
 80040b0:	f7ff fea0 	bl	8003df4 <radio_write_register>
 80040b4:	4603      	mov	r3, r0
 80040b6:	737b      	strb	r3, [r7, #13]

  return HAL_Status;
 80040b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	41d00000 	.word	0x41d00000
 80040c8:	41f00000 	.word	0x41f00000
 80040cc:	43f00000 	.word	0x43f00000
 80040d0:	41200000 	.word	0x41200000
 80040d4:	41c00000 	.word	0x41c00000
 80040d8:	477a0000 	.word	0x477a0000

080040dc <radioTxData>:

HAL_StatusTypeDef radioTxData(uint8_t txData[],uint8_t len)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef HAL_Status;
	uint8_t  regData;
	int retryCount = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]

	HAL_Status = radio_write_register(0x3E, len);
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	4619      	mov	r1, r3
 80040f0:	203e      	movs	r0, #62	; 0x3e
 80040f2:	f7ff fe7f 	bl	8003df4 <radio_write_register>
 80040f6:	4603      	mov	r3, r0
 80040f8:	72fb      	strb	r3, [r7, #11]
	HAL_Status = radio_write_register_burst(0x7F, &txData[0],len);
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	207f      	movs	r0, #127	; 0x7f
 8004102:	f7ff fec3 	bl	8003e8c <radio_write_register_burst>
 8004106:	4603      	mov	r3, r0
 8004108:	72fb      	strb	r3, [r7, #11]

	//read the Interrupt Status1 register
	HAL_Status =  radio_read_register(0x3,&regData);
 800410a:	f107 030a 	add.w	r3, r7, #10
 800410e:	4619      	mov	r1, r3
 8004110:	2003      	movs	r0, #3
 8004112:	f7ff fe2f 	bl	8003d74 <radio_read_register>
 8004116:	4603      	mov	r3, r0
 8004118:	72fb      	strb	r3, [r7, #11]
	//read the Interrupt Status2 register
	HAL_Status =  radio_read_register(0x4,&regData);
 800411a:	f107 030a 	add.w	r3, r7, #10
 800411e:	4619      	mov	r1, r3
 8004120:	2004      	movs	r0, #4
 8004122:	f7ff fe27 	bl	8003d74 <radio_read_register>
 8004126:	4603      	mov	r3, r0
 8004128:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_RESET);
 800412a:	2200      	movs	r2, #0
 800412c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004130:	4818      	ldr	r0, [pc, #96]	; (8004194 <radioTxData+0xb8>)
 8004132:	f001 fc3b 	bl	80059ac <HAL_GPIO_WritePin>
	HAL_Status = radio_write_register(0x07, Si4032_OPERATING_AND_FUNCTION_CONTROL_1);
 8004136:	2108      	movs	r1, #8
 8004138:	2007      	movs	r0, #7
 800413a:	f7ff fe5b 	bl	8003df4 <radio_write_register>
 800413e:	4603      	mov	r3, r0
 8004140:	72fb      	strb	r3, [r7, #11]
	//HAL_Status = radio_write_register(0x07, 0x09);
	regData = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	72bb      	strb	r3, [r7, #10]
	while((regData & 0x04) != 0x4 && (retryCount < 50))
 8004146:	e00a      	b.n	800415e <radioTxData+0x82>
	{
		//read the Interrupt Status1 register
		HAL_Status =  radio_read_register(0x3,&regData);
 8004148:	f107 030a 	add.w	r3, r7, #10
 800414c:	4619      	mov	r1, r3
 800414e:	2003      	movs	r0, #3
 8004150:	f7ff fe10 	bl	8003d74 <radio_read_register>
 8004154:	4603      	mov	r3, r0
 8004156:	72fb      	strb	r3, [r7, #11]
		retryCount++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
	while((regData & 0x04) != 0x4 && (retryCount < 50))
 800415e:	7abb      	ldrb	r3, [r7, #10]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <radioTxData+0x92>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b31      	cmp	r3, #49	; 0x31
 800416c:	ddec      	ble.n	8004148 <radioTxData+0x6c>
//		{
//			HAL_Delay(PROTOCOL_DELAY*3);
//		}
	}

	HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_SET);
 800416e:	2201      	movs	r2, #1
 8004170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004174:	4807      	ldr	r0, [pc, #28]	; (8004194 <radioTxData+0xb8>)
 8004176:	f001 fc19 	bl	80059ac <HAL_GPIO_WritePin>

	//read the Interrupt Status2 register
	HAL_Status =  radio_read_register(0x4,&regData);
 800417a:	f107 030a 	add.w	r3, r7, #10
 800417e:	4619      	mov	r1, r3
 8004180:	2004      	movs	r0, #4
 8004182:	f7ff fdf7 	bl	8003d74 <radio_read_register>
 8004186:	4603      	mov	r3, r0
 8004188:	72fb      	strb	r3, [r7, #11]

	return HAL_Status;
 800418a:	7afb      	ldrb	r3, [r7, #11]

}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40010c00 	.word	0x40010c00

08004198 <initialize_ecc>:
compute_genpoly (struct rscode_driver * driver, int nbytes, int * genpoly);

/* Initialize lookup tables, polynomials, etc. */
void
initialize_ecc (struct rscode_driver * driver)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Compute the encoder generator polynomial */
  compute_genpoly(driver, NPAR, driver->genPoly);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	461a      	mov	r2, r3
 80041a4:	2108      	movs	r1, #8
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f856 	bl	8004258 <compute_genpoly>
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <zero_fill_from>:

void
zero_fill_from (unsigned char * buf, int from, int to)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  int i;
  for (i = from; i < to; i++) buf[i] = 0;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e007      	b.n	80041d6 <zero_fill_from+0x22>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	3301      	adds	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	dbf3      	blt.n	80041c6 <zero_fill_from+0x12>
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <build_codeword>:
#endif

/* Append the parity bytes onto the end of the message */
void
build_codeword (struct rscode_driver * driver, unsigned char * msg, int nbytes, unsigned char * dst)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b087      	sub	sp, #28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	603b      	str	r3, [r7, #0]
  int i;
	
  for (i = 0; i < nbytes; i++) dst[i] = msg[i];
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e00a      	b.n	8004214 <build_codeword+0x2a>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	441a      	add	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	440b      	add	r3, r1
 800420a:	7812      	ldrb	r2, [r2, #0]
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3301      	adds	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	dbf0      	blt.n	80041fe <build_codeword+0x14>
	
  for (i = 0; i < NPAR; i++) {
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e011      	b.n	8004246 <build_codeword+0x5c>
    dst[i+nbytes] = driver->pBytes[NPAR-1-i];
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f1c3 0207 	rsb	r2, r3, #7
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3220      	adds	r2, #32
 800422c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	461a      	mov	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4413      	add	r3, r2
 800423c:	b2ca      	uxtb	r2, r1
 800423e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NPAR; i++) {
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3301      	adds	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b07      	cmp	r3, #7
 800424a:	ddea      	ble.n	8004222 <build_codeword+0x38>
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <compute_genpoly>:
 * at least n+1 bytes long.
 */

static void
compute_genpoly (struct rscode_driver * driver, int nbytes, int * genpoly)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 800425e:	af00      	add	r7, sp, #0
 8004260:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8004264:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8004268:	6018      	str	r0, [r3, #0]
 800426a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800426e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004272:	6019      	str	r1, [r3, #0]
 8004274:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8004278:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800427c:	601a      	str	r2, [r3, #0]
  int i, tp[256], tp1[256];
	
  /* multiply (x + a^n) for n = 1 to nbytes */

  zero_poly(driver, tp1);
 800427e:	f107 0214 	add.w	r2, r7, #20
 8004282:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8004286:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800428a:	4611      	mov	r1, r2
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	f7fd f91a 	bl	80014c6 <zero_poly>
  tp1[0] = 1;
 8004292:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8004296:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]

  for (i = 1; i <= nbytes; i++) {
 800429e:	2301      	movs	r3, #1
 80042a0:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80042a4:	e041      	b.n	800432a <compute_genpoly+0xd2>
    zero_poly(driver, tp);
 80042a6:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80042aa:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80042ae:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80042b2:	4611      	mov	r1, r2
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	f7fd f906 	bl	80014c6 <zero_poly>
    tp[0] = gexp(driver,i);		/* set up x+a^n */
 80042ba:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80042be:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 80042c2:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	f7fe fa68 	bl	800279c <gexp>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80042d2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80042d6:	601a      	str	r2, [r3, #0]
    tp[1] = 1;
 80042d8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80042dc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80042e0:	2201      	movs	r2, #1
 80042e2:	605a      	str	r2, [r3, #4]
	  
    mult_polys(driver, genpoly, tp, tp1);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80042ec:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80042f0:	f6a1 0114 	subw	r1, r1, #2068	; 0x814
 80042f4:	f607 0018 	addw	r0, r7, #2072	; 0x818
 80042f8:	f6a0 000c 	subw	r0, r0, #2060	; 0x80c
 80042fc:	6809      	ldr	r1, [r1, #0]
 80042fe:	6800      	ldr	r0, [r0, #0]
 8004300:	f7fd f8fb 	bl	80014fa <mult_polys>
    copy_poly(driver, tp1, genpoly);
 8004304:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8004308:	f6a3 0214 	subw	r2, r3, #2068	; 0x814
 800430c:	f107 0114 	add.w	r1, r7, #20
 8004310:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8004314:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	f7fd f8b4 	bl	8001488 <copy_poly>
  for (i = 1; i <= nbytes; i++) {
 8004320:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8004324:	3301      	adds	r3, #1
 8004326:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800432a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800432e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8004332:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	ddb4      	ble.n	80042a6 <compute_genpoly+0x4e>
  }
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <encode_data>:
 * 
 */

void
encode_data (struct rscode_driver * driver, unsigned char *msg, int nbytes, unsigned char *dst)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b091      	sub	sp, #68	; 0x44
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  int i, LFSR[NPAR+1],dbyte, j;
	
  for(i=0; i < NPAR+1; i++) LFSR[i]=0;
 8004356:	2300      	movs	r3, #0
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435a:	e009      	b.n	8004370 <encode_data+0x28>
 800435c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3340      	adds	r3, #64	; 0x40
 8004362:	443b      	add	r3, r7
 8004364:	2200      	movs	r2, #0
 8004366:	f843 2c30 	str.w	r2, [r3, #-48]
 800436a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436c:	3301      	adds	r3, #1
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004372:	2b08      	cmp	r3, #8
 8004374:	ddf2      	ble.n	800435c <encode_data+0x14>

  for (i = 0; i < nbytes; i++) {
 8004376:	2300      	movs	r3, #0
 8004378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437a:	e035      	b.n	80043e8 <encode_data+0xa0>
    dbyte = msg[i] ^ LFSR[NPAR-1];
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	4053      	eors	r3, r2
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
    for (j = NPAR-1; j > 0; j--) {
 800438c:	2307      	movs	r3, #7
 800438e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004390:	e01b      	b.n	80043ca <encode_data+0x82>
      LFSR[j] = LFSR[j-1] ^ gmult(driver, driver->genPoly[j], dbyte);
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	3b01      	subs	r3, #1
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	3340      	adds	r3, #64	; 0x40
 800439a:	443b      	add	r3, r7
 800439c:	f853 4c30 	ldr.w	r4, [r3, #-48]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043aa:	4619      	mov	r1, r3
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7fe fa50 	bl	8002852 <gmult>
 80043b2:	4603      	mov	r3, r0
 80043b4:	ea84 0203 	eor.w	r2, r4, r3
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	3340      	adds	r3, #64	; 0x40
 80043be:	443b      	add	r3, r7
 80043c0:	f843 2c30 	str.w	r2, [r3, #-48]
    for (j = NPAR-1; j > 0; j--) {
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	3b01      	subs	r3, #1
 80043c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	dce0      	bgt.n	8004392 <encode_data+0x4a>
    }
    LFSR[0] = gmult(driver, driver->genPoly[0], dbyte);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043d6:	4619      	mov	r1, r3
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7fe fa3a 	bl	8002852 <gmult>
 80043de:	4603      	mov	r3, r0
 80043e0:	613b      	str	r3, [r7, #16]
  for (i = 0; i < nbytes; i++) {
 80043e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e4:	3301      	adds	r3, #1
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	dbc5      	blt.n	800437c <encode_data+0x34>
  }

  for (i = 0; i < NPAR; i++) 
 80043f0:	2300      	movs	r3, #0
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f4:	e00d      	b.n	8004412 <encode_data+0xca>
    driver->pBytes[i] = LFSR[i];
 80043f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	3340      	adds	r3, #64	; 0x40
 80043fc:	443b      	add	r3, r7
 80043fe:	f853 1c30 	ldr.w	r1, [r3, #-48]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004406:	3220      	adds	r2, #32
 8004408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NPAR; i++) 
 800440c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440e:	3301      	adds	r3, #1
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004414:	2b07      	cmp	r3, #7
 8004416:	ddee      	ble.n	80043f6 <encode_data+0xae>
	
  build_codeword(driver, msg, nbytes, dst);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff fee3 	bl	80041ea <build_codeword>
}
 8004424:	bf00      	nop
 8004426:	3744      	adds	r7, #68	; 0x44
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}

0800442c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <HAL_MspInit+0x5c>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	4a14      	ldr	r2, [pc, #80]	; (8004488 <HAL_MspInit+0x5c>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6193      	str	r3, [r2, #24]
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_MspInit+0x5c>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_MspInit+0x5c>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4a0e      	ldr	r2, [pc, #56]	; (8004488 <HAL_MspInit+0x5c>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	61d3      	str	r3, [r2, #28]
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_MspInit+0x5c>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_MspInit+0x60>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <HAL_MspInit+0x60>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	40021000 	.word	0x40021000
 800448c:	40010000 	.word	0x40010000

08004490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 0310 	add.w	r3, r7, #16
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a14      	ldr	r2, [pc, #80]	; (80044fc <HAL_ADC_MspInit+0x6c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d121      	bne.n	80044f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_ADC_MspInit+0x70>)
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4a12      	ldr	r2, [pc, #72]	; (8004500 <HAL_ADC_MspInit+0x70>)
 80044b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ba:	6193      	str	r3, [r2, #24]
 80044bc:	4b10      	ldr	r3, [pc, #64]	; (8004500 <HAL_ADC_MspInit+0x70>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_ADC_MspInit+0x70>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_ADC_MspInit+0x70>)
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	6193      	str	r3, [r2, #24]
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_ADC_MspInit+0x70>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Batt_Volt_Pin;
 80044e0:	2320      	movs	r3, #32
 80044e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044e4:	2303      	movs	r3, #3
 80044e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Batt_Volt_GPIO_Port, &GPIO_InitStruct);
 80044e8:	f107 0310 	add.w	r3, r7, #16
 80044ec:	4619      	mov	r1, r3
 80044ee:	4805      	ldr	r0, [pc, #20]	; (8004504 <HAL_ADC_MspInit+0x74>)
 80044f0:	f001 f8d8 	bl	80056a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044f4:	bf00      	nop
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40012400 	.word	0x40012400
 8004500:	40021000 	.word	0x40021000
 8004504:	40010800 	.word	0x40010800

08004508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <HAL_SPI_MspInit+0x8c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d131      	bne.n	800458c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_SPI_MspInit+0x90>)
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <HAL_SPI_MspInit+0x90>)
 800452e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004532:	61d3      	str	r3, [r2, #28]
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_SPI_MspInit+0x90>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <HAL_SPI_MspInit+0x90>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4a14      	ldr	r2, [pc, #80]	; (8004598 <HAL_SPI_MspInit+0x90>)
 8004546:	f043 0308 	orr.w	r3, r3, #8
 800454a:	6193      	str	r3, [r2, #24]
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_SPI_MspInit+0x90>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004558:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800455c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004562:	2303      	movs	r3, #3
 8004564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004566:	f107 0310 	add.w	r3, r7, #16
 800456a:	4619      	mov	r1, r3
 800456c:	480b      	ldr	r0, [pc, #44]	; (800459c <HAL_SPI_MspInit+0x94>)
 800456e:	f001 f899 	bl	80056a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004572:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004580:	f107 0310 	add.w	r3, r7, #16
 8004584:	4619      	mov	r1, r3
 8004586:	4805      	ldr	r0, [pc, #20]	; (800459c <HAL_SPI_MspInit+0x94>)
 8004588:	f001 f88c 	bl	80056a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800458c:	bf00      	nop
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40003800 	.word	0x40003800
 8004598:	40021000 	.word	0x40021000
 800459c:	40010c00 	.word	0x40010c00

080045a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0318 	add.w	r3, r7, #24
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d12c      	bne.n	800461a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045c0:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	61d3      	str	r3, [r2, #28]
 80045cc:	4b21      	ldr	r3, [pc, #132]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = INPUT_MEASURED_VALUE_COUNT_Pin;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(INPUT_MEASURED_VALUE_COUNT_GPIO_Port, &GPIO_InitStruct);
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	4619      	mov	r1, r3
 8004602:	4815      	ldr	r0, [pc, #84]	; (8004658 <HAL_TIM_Base_MspInit+0xb8>)
 8004604:	f001 f84e 	bl	80056a4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004608:	2200      	movs	r2, #0
 800460a:	2100      	movs	r1, #0
 800460c:	201c      	movs	r0, #28
 800460e:	f001 f81e 	bl	800564e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004612:	201c      	movs	r0, #28
 8004614:	f001 f837 	bl	8005686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004618:	e018      	b.n	800464c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM7)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a0f      	ldr	r2, [pc, #60]	; (800465c <HAL_TIM_Base_MspInit+0xbc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d113      	bne.n	800464c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 800462a:	f043 0320 	orr.w	r3, r3, #32
 800462e:	61d3      	str	r3, [r2, #28]
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_TIM_Base_MspInit+0xb4>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800463c:	2200      	movs	r2, #0
 800463e:	2100      	movs	r1, #0
 8004640:	2037      	movs	r0, #55	; 0x37
 8004642:	f001 f804 	bl	800564e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004646:	2037      	movs	r0, #55	; 0x37
 8004648:	f001 f81d 	bl	8005686 <HAL_NVIC_EnableIRQ>
}
 800464c:	bf00      	nop
 800464e:	3728      	adds	r7, #40	; 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	40010800 	.word	0x40010800
 800465c:	40001400 	.word	0x40001400

08004660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004668:	f107 0318 	add.w	r3, r7, #24
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a38      	ldr	r2, [pc, #224]	; (800475c <HAL_UART_MspInit+0xfc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d132      	bne.n	80046e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004680:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_UART_MspInit+0x100>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	4a36      	ldr	r2, [pc, #216]	; (8004760 <HAL_UART_MspInit+0x100>)
 8004686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468a:	6193      	str	r3, [r2, #24]
 800468c:	4b34      	ldr	r3, [pc, #208]	; (8004760 <HAL_UART_MspInit+0x100>)
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_UART_MspInit+0x100>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	4a30      	ldr	r2, [pc, #192]	; (8004760 <HAL_UART_MspInit+0x100>)
 800469e:	f043 0304 	orr.w	r3, r3, #4
 80046a2:	6193      	str	r3, [r2, #24]
 80046a4:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_UART_MspInit+0x100>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ba:	2303      	movs	r3, #3
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046be:	f107 0318 	add.w	r3, r7, #24
 80046c2:	4619      	mov	r1, r3
 80046c4:	4827      	ldr	r0, [pc, #156]	; (8004764 <HAL_UART_MspInit+0x104>)
 80046c6:	f000 ffed 	bl	80056a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d8:	f107 0318 	add.w	r3, r7, #24
 80046dc:	4619      	mov	r1, r3
 80046de:	4821      	ldr	r0, [pc, #132]	; (8004764 <HAL_UART_MspInit+0x104>)
 80046e0:	f000 ffe0 	bl	80056a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80046e4:	e036      	b.n	8004754 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <HAL_UART_MspInit+0x108>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d131      	bne.n	8004754 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_UART_MspInit+0x100>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a1a      	ldr	r2, [pc, #104]	; (8004760 <HAL_UART_MspInit+0x100>)
 80046f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046fa:	61d3      	str	r3, [r2, #28]
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <HAL_UART_MspInit+0x100>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_UART_MspInit+0x100>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <HAL_UART_MspInit+0x100>)
 800470e:	f043 0308 	orr.w	r3, r3, #8
 8004712:	6193      	str	r3, [r2, #24]
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_UART_MspInit+0x100>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004726:	2302      	movs	r3, #2
 8004728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800472a:	2303      	movs	r3, #3
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472e:	f107 0318 	add.w	r3, r7, #24
 8004732:	4619      	mov	r1, r3
 8004734:	480d      	ldr	r0, [pc, #52]	; (800476c <HAL_UART_MspInit+0x10c>)
 8004736:	f000 ffb5 	bl	80056a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800473a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800473e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004748:	f107 0318 	add.w	r3, r7, #24
 800474c:	4619      	mov	r1, r3
 800474e:	4807      	ldr	r0, [pc, #28]	; (800476c <HAL_UART_MspInit+0x10c>)
 8004750:	f000 ffa8 	bl	80056a4 <HAL_GPIO_Init>
}
 8004754:	bf00      	nop
 8004756:	3728      	adds	r7, #40	; 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40013800 	.word	0x40013800
 8004760:	40021000 	.word	0x40021000
 8004764:	40010800 	.word	0x40010800
 8004768:	40004800 	.word	0x40004800
 800476c:	40010c00 	.word	0x40010c00

08004770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	; 0x38
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004786:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_InitTick+0xe8>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	4a33      	ldr	r2, [pc, #204]	; (8004858 <HAL_InitTick+0xe8>)
 800478c:	f043 0310 	orr.w	r3, r3, #16
 8004790:	61d3      	str	r3, [r2, #28]
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <HAL_InitTick+0xe8>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800479e:	f107 0210 	add.w	r2, r7, #16
 80047a2:	f107 0314 	add.w	r3, r7, #20
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 fd29 	bl	8006200 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80047b8:	f001 fcfa 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 80047bc:	6378      	str	r0, [r7, #52]	; 0x34
 80047be:	e004      	b.n	80047ca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80047c0:	f001 fcf6 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 80047c4:	4603      	mov	r3, r0
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	4a23      	ldr	r2, [pc, #140]	; (800485c <HAL_InitTick+0xec>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0c9b      	lsrs	r3, r3, #18
 80047d4:	3b01      	subs	r3, #1
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80047d8:	4b21      	ldr	r3, [pc, #132]	; (8004860 <HAL_InitTick+0xf0>)
 80047da:	4a22      	ldr	r2, [pc, #136]	; (8004864 <HAL_InitTick+0xf4>)
 80047dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_InitTick+0xf0>)
 80047e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80047e6:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <HAL_InitTick+0xf0>)
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80047ec:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <HAL_InitTick+0xf0>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f2:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_InitTick+0xf0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_InitTick+0xf0>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80047fe:	4818      	ldr	r0, [pc, #96]	; (8004860 <HAL_InitTick+0xf0>)
 8004800:	f002 fbc8 	bl	8006f94 <HAL_TIM_Base_Init>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800480a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11b      	bne.n	800484a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004812:	4813      	ldr	r0, [pc, #76]	; (8004860 <HAL_InitTick+0xf0>)
 8004814:	f002 fc0e 	bl	8007034 <HAL_TIM_Base_Start_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800481e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004822:	2b00      	cmp	r3, #0
 8004824:	d111      	bne.n	800484a <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004826:	2036      	movs	r0, #54	; 0x36
 8004828:	f000 ff2d 	bl	8005686 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d808      	bhi.n	8004844 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004832:	2200      	movs	r2, #0
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	2036      	movs	r0, #54	; 0x36
 8004838:	f000 ff09 	bl	800564e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_InitTick+0xf8>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e002      	b.n	800484a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800484a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800484e:	4618      	mov	r0, r3
 8004850:	3738      	adds	r7, #56	; 0x38
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	431bde83 	.word	0x431bde83
 8004860:	2000055c 	.word	0x2000055c
 8004864:	40001000 	.word	0x40001000
 8004868:	20000020 	.word	0x20000020

0800486c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004870:	e7fe      	b.n	8004870 <NMI_Handler+0x4>

08004872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004876:	e7fe      	b.n	8004876 <HardFault_Handler+0x4>

08004878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800487c:	e7fe      	b.n	800487c <MemManage_Handler+0x4>

0800487e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004882:	e7fe      	b.n	8004882 <BusFault_Handler+0x4>

08004884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004888:	e7fe      	b.n	8004888 <UsageFault_Handler+0x4>

0800488a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800488e:	bf00      	nop
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr
	...

080048bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <TIM2_IRQHandler+0x10>)
 80048c2:	f002 fd7d 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200003f8 	.word	0x200003f8

080048d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <TIM6_DAC_IRQHandler+0x10>)
 80048d6:	f002 fd73 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000055c 	.word	0x2000055c

080048e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80048e8:	4802      	ldr	r0, [pc, #8]	; (80048f4 <TIM7_IRQHandler+0x10>)
 80048ea:	f002 fd69 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000440 	.word	0x20000440

080048f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <calcChecksum>:

#include <string.h>
#include <ublox.h>

struct ubxChecksumType calcChecksum(uint8_t *message, uint16_t size)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
	struct ubxChecksumType ck = {0, 0};
 8004910:	2300      	movs	r3, #0
 8004912:	733b      	strb	r3, [r7, #12]
 8004914:	2300      	movs	r3, #0
 8004916:	737b      	strb	r3, [r7, #13]

	for(int i = 0;i<size;i++)
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e00f      	b.n	800493e <calcChecksum+0x3a>
	{
		ck.ck_a = ck.ck_a + message[i];
 800491e:	7b3a      	ldrb	r2, [r7, #12]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	440b      	add	r3, r1
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	4413      	add	r3, r2
 800492a:	b2db      	uxtb	r3, r3
 800492c:	733b      	strb	r3, [r7, #12]
		ck.ck_b = ck.ck_b + ck.ck_a;
 800492e:	7b7a      	ldrb	r2, [r7, #13]
 8004930:	7b3b      	ldrb	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	b2db      	uxtb	r3, r3
 8004936:	737b      	strb	r3, [r7, #13]
	for(int i = 0;i<size;i++)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	3301      	adds	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	429a      	cmp	r2, r3
 8004944:	dbeb      	blt.n	800491e <calcChecksum+0x1a>
	}

	return ck;
 8004946:	89bb      	ldrh	r3, [r7, #12]
 8004948:	823b      	strh	r3, [r7, #16]
 800494a:	2300      	movs	r3, #0
 800494c:	7c3a      	ldrb	r2, [r7, #16]
 800494e:	f362 0307 	bfi	r3, r2, #0, #8
 8004952:	7c7a      	ldrb	r2, [r7, #17]
 8004954:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <setGPS_DynamicModel6>:

// Configure flight mode - needed above 18km altitude
// Notes: Tweaked the PDOP limits a bit, to make it a bit more likely to report a position.
GPS_StatusTypeDef setGPS_DynamicModel6(UART_HandleTypeDef *huart)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b09a      	sub	sp, #104	; 0x68
 8004966:	af02      	add	r7, sp, #8
 8004968:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	GPS_StatusTypeDef gpsStatus  = GPS_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	uint8_t rspBuf[10];
	uint16_t received;
	uint8_t expectedRsp[10];

	uint8_t resetCmd = 0xff;
 8004970:	23ff      	movs	r3, #255	; 0xff
 8004972:	73fb      	strb	r3, [r7, #15]

	memset(&ubxNavPacket,'\0',sizeof(ubxNavPacket));
 8004974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004978:	222c      	movs	r2, #44	; 0x2c
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f003 fd97 	bl	80084b0 <memset>
	ubxNavPacket.ubxSync.sc1          = 0xb5;
 8004982:	23b5      	movs	r3, #181	; 0xb5
 8004984:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	ubxNavPacket.ubxSync.sc2          = 0x62;
 8004988:	2362      	movs	r3, #98	; 0x62
 800498a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	ubxNavPacket.ubxNavMsgData.messageClass = 0x06;
 800498e:	2306      	movs	r3, #6
 8004990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	ubxNavPacket.ubxNavMsgData.messageId    = 0x24;
 8004994:	2324      	movs	r3, #36	; 0x24
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	ubxNavPacket.ubxNavMsgData.payloadSize  = sizeof(ubxNavPacket.ubxNavMsgData.ubxNavPayload);
 800499a:	2324      	movs	r3, #36	; 0x24
 800499c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.mask = 0b00000001111111111;
 800499e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80049a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.dynModel        =6;
 80049a4:	2306      	movs	r3, #6
 80049a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.fixMode         =2;
 80049aa:	2302      	movs	r3, #2
 80049ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.fixedAlt        =0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	867b      	strh	r3, [r7, #50]	; 0x32
 80049b4:	2300      	movs	r3, #0
 80049b6:	86bb      	strh	r3, [r7, #52]	; 0x34
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.fixedAltVar     =10000;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 80049be:	f043 0310 	orr.w	r3, r3, #16
 80049c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049c4:	2300      	movs	r3, #0
 80049c6:	873b      	strh	r3, [r7, #56]	; 0x38
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.minElv          =5;
 80049c8:	2305      	movs	r3, #5
 80049ca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.drLimit         =0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.pDop            =100;
 80049d4:	2364      	movs	r3, #100	; 0x64
 80049d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.tDop            =100;
 80049d8:	2364      	movs	r3, #100	; 0x64
 80049da:	87fb      	strh	r3, [r7, #62]	; 0x3e
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.pAcc            =100;
 80049dc:	2364      	movs	r3, #100	; 0x64
 80049de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.tAcc            =200;
 80049e2:	23c8      	movs	r3, #200	; 0xc8
 80049e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.staticHoldThres =0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.dgpsTimeOut     =2;
 80049ee:	2302      	movs	r3, #2
 80049f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.reserved1       = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80049fa:	2300      	movs	r3, #0
 80049fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.reserved2       = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a06:	2300      	movs	r3, #0
 8004a08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	ubxNavPacket.ubxNavMsgData.ubxNavPayload.reserved3       = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	ubxNavPacket.ubxChecksum = calcChecksum((uint8_t *)&ubxNavPacket.ubxNavMsgData,sizeof(ubxNavPacket.ubxNavMsgData));
 8004a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	2128      	movs	r1, #40	; 0x28
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff6f 	bl	8004904 <calcChecksum>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	expectedRsp[0] = ubxNavPacket.ubxSync.sc1; // header
 8004a2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a30:	743b      	strb	r3, [r7, #16]
	expectedRsp[1] = ubxNavPacket.ubxSync.sc2; // header
 8004a32:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004a36:	747b      	strb	r3, [r7, #17]
	expectedRsp[2] = 0x05; // class
 8004a38:	2305      	movs	r3, #5
 8004a3a:	74bb      	strb	r3, [r7, #18]
	expectedRsp[3] = 0x01; // id
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	74fb      	strb	r3, [r7, #19]
	expectedRsp[4] = 0x02; // length
 8004a40:	2302      	movs	r3, #2
 8004a42:	753b      	strb	r3, [r7, #20]
	expectedRsp[5] = 0x00;
 8004a44:	2300      	movs	r3, #0
 8004a46:	757b      	strb	r3, [r7, #21]
	expectedRsp[6] = ubxNavPacket.ubxNavMsgData.messageClass; // ACK class
 8004a48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004a4c:	75bb      	strb	r3, [r7, #22]
	expectedRsp[7] =ubxNavPacket.ubxNavMsgData.messageId; // ACK id
 8004a4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a52:	75fb      	strb	r3, [r7, #23]
	expectedRsp[8] = 0x32; // CK_A
 8004a54:	2332      	movs	r3, #50	; 0x32
 8004a56:	763b      	strb	r3, [r7, #24]
	expectedRsp[9] = 0x5b; // CK_B
 8004a58:	235b      	movs	r3, #91	; 0x5b
 8004a5a:	767b      	strb	r3, [r7, #25]

	HAL_Status = HAL_UART_Transmit(huart,&resetCmd,sizeof(resetCmd),1000);
 8004a5c:	f107 010f 	add.w	r1, r7, #15
 8004a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a64:	2201      	movs	r2, #1
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f003 fa46 	bl	8007ef8 <HAL_UART_Transmit>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_Delay(1000);
 8004a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a76:	f000 f8f3 	bl	8004c60 <HAL_Delay>
	if(HAL_Status != HAL_OK)
 8004a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <setGPS_DynamicModel6+0x128>
	{
		gpsStatus = GPS_FAIL;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004a88:	e043      	b.n	8004b12 <setGPS_DynamicModel6+0x1b0>
	}
	else
	{
		HAL_Status = HAL_UART_Transmit(huart,(uint8_t *)&ubxNavPacket,sizeof(ubxNavPacket),1000);
 8004a8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a92:	222c      	movs	r2, #44	; 0x2c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f003 fa2f 	bl	8007ef8 <HAL_UART_Transmit>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if(HAL_Status != HAL_OK)
 8004aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <setGPS_DynamicModel6+0x14e>
		{
			gpsStatus = GPS_FAIL;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004aae:	e030      	b.n	8004b12 <setGPS_DynamicModel6+0x1b0>
		}
		else
		{
			HAL_Status = HAL_UARTEx_ReceiveToIdle(huart, rspBuf, sizeof(rspBuf), &received, 3000);
 8004ab0:	f107 031a 	add.w	r3, r7, #26
 8004ab4:	f107 011c 	add.w	r1, r7, #28
 8004ab8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004abc:	9200      	str	r2, [sp, #0]
 8004abe:	220a      	movs	r2, #10
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f003 fa9c 	bl	8007ffe <HAL_UARTEx_ReceiveToIdle>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(received != sizeof(rspBuf))
 8004acc:	8b7b      	ldrh	r3, [r7, #26]
 8004ace:	2b0a      	cmp	r3, #10
 8004ad0:	d003      	beq.n	8004ada <setGPS_DynamicModel6+0x178>
			{
				gpsStatus = GPS_FAIL;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ad8:	e01b      	b.n	8004b12 <setGPS_DynamicModel6+0x1b0>
			}
			else
			{
				if(HAL_Status == HAL_OK)
 8004ada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d117      	bne.n	8004b12 <setGPS_DynamicModel6+0x1b0>
				{
					for(int i=0;i<sizeof(rspBuf);i++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ae6:	e011      	b.n	8004b0c <setGPS_DynamicModel6+0x1aa>
				    {
						if(rspBuf[i] != expectedRsp[i])
 8004ae8:	f107 021c 	add.w	r2, r7, #28
 8004aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aee:	4413      	add	r3, r2
 8004af0:	781a      	ldrb	r2, [r3, #0]
 8004af2:	f107 0110 	add.w	r1, r7, #16
 8004af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af8:	440b      	add	r3, r1
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d002      	beq.n	8004b06 <setGPS_DynamicModel6+0x1a4>
					    {
							gpsStatus = GPS_FAIL;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					for(int i=0;i<sizeof(rspBuf);i++)
 8004b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b08:	3301      	adds	r3, #1
 8004b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	d9ea      	bls.n	8004ae8 <setGPS_DynamicModel6+0x186>
				}
			}
		}
	}

	return gpsStatus;
 8004b12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3760      	adds	r7, #96	; 0x60
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <disableNMEA>:

GPS_StatusTypeDef disableNMEA(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status;
	GPS_StatusTypeDef gpsStatus  = GPS_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t disableSentenceList[] = {0x01,  //GLL
 8004b2e:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <disableNMEA+0xa0>)
 8004b30:	f107 0318 	add.w	r3, r7, #24
 8004b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b38:	6018      	str	r0, [r3, #0]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	7019      	strb	r1, [r3, #0]
									0x05,   //VTG
									0x08};  //ZDA

	struct ubxCFGMSGPacketType ubxCFGMSGPacket;

	ubxCFGMSGPacket.ubxSync.sc1                   = 0xb5;
 8004b3e:	23b5      	movs	r3, #181	; 0xb5
 8004b40:	733b      	strb	r3, [r7, #12]
	ubxCFGMSGPacket.ubxSync.sc2                   = 0x62;
 8004b42:	2362      	movs	r3, #98	; 0x62
 8004b44:	737b      	strb	r3, [r7, #13]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.messageClass = 0x06;
 8004b46:	2306      	movs	r3, #6
 8004b48:	73bb      	strb	r3, [r7, #14]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.messageId    = 0x01;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.payloadSize  = sizeof(ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload);
 8004b4e:	2303      	movs	r3, #3
 8004b50:	823b      	strh	r3, [r7, #16]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload.msgClass = 0xF0;
 8004b52:	23f0      	movs	r3, #240	; 0xf0
 8004b54:	74bb      	strb	r3, [r7, #18]
	ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload.rate     = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	753b      	strb	r3, [r7, #20]
	for (int i =0; i < sizeof(disableSentenceList);i++)
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	e026      	b.n	8004bae <disableNMEA+0x8e>
	{
		ubxCFGMSGPacket.ubxCFGMSGMsgData.ubxCFGMSGPayload.msgID = disableSentenceList[i];
 8004b60:	f107 0218 	add.w	r2, r7, #24
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	4413      	add	r3, r2
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	74fb      	strb	r3, [r7, #19]
		ubxCFGMSGPacket.ubxChecksum = calcChecksum((uint8_t *)&ubxCFGMSGPacket.ubxCFGMSGMsgData,sizeof(ubxCFGMSGPacket.ubxCFGMSGMsgData));
 8004b6c:	f107 030c 	add.w	r3, r7, #12
 8004b70:	3302      	adds	r3, #2
 8004b72:	2107      	movs	r1, #7
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fec5 	bl	8004904 <calcChecksum>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	b21b      	sxth	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	757a      	strb	r2, [r7, #21]
 8004b82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004b86:	75bb      	strb	r3, [r7, #22]
		HAL_Status = HAL_UART_Transmit(huart,(uint8_t *)&ubxCFGMSGPacket,sizeof(ubxCFGMSGPacket),1000);
 8004b88:	f107 010c 	add.w	r1, r7, #12
 8004b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b90:	220b      	movs	r2, #11
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f003 f9b0 	bl	8007ef8 <HAL_UART_Transmit>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	77fb      	strb	r3, [r7, #31]
		if(HAL_Status != HAL_OK)
 8004b9c:	7ffb      	ldrb	r3, [r7, #31]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <disableNMEA+0x88>
		{
			gpsStatus = GPS_FAIL;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int i =0; i < sizeof(disableSentenceList);i++)
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	3301      	adds	r3, #1
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d9d5      	bls.n	8004b60 <disableNMEA+0x40>
		}

	}

	return gpsStatus;
 8004bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3728      	adds	r7, #40	; 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	08008860 	.word	0x08008860

08004bc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bc4:	f7ff fe98 	bl	80048f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bc8:	480b      	ldr	r0, [pc, #44]	; (8004bf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004bca:	490c      	ldr	r1, [pc, #48]	; (8004bfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004bcc:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bd0:	e002      	b.n	8004bd8 <LoopCopyDataInit>

08004bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bd6:	3304      	adds	r3, #4

08004bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bdc:	d3f9      	bcc.n	8004bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004be0:	4c09      	ldr	r4, [pc, #36]	; (8004c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004be4:	e001      	b.n	8004bea <LoopFillZerobss>

08004be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004be8:	3204      	adds	r2, #4

08004bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bec:	d3fb      	bcc.n	8004be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bee:	f003 fc2d 	bl	800844c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004bf2:	f7fe fa09 	bl	8003008 <main>
  bx lr
 8004bf6:	4770      	bx	lr
  ldr r0, =_sdata
 8004bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bfc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8004c00:	080088a8 	.word	0x080088a8
  ldr r2, =_sbss
 8004c04:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8004c08:	200005a8 	.word	0x200005a8

08004c0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c0c:	e7fe      	b.n	8004c0c <ADC1_IRQHandler>

08004c0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c12:	2003      	movs	r0, #3
 8004c14:	f000 fd10 	bl	8005638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c18:	200f      	movs	r0, #15
 8004c1a:	f7ff fda9 	bl	8004770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c1e:	f7ff fc05 	bl	800442c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_IncTick+0x1c>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_IncTick+0x20>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4413      	add	r3, r2
 8004c38:	4a03      	ldr	r2, [pc, #12]	; (8004c48 <HAL_IncTick+0x20>)
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	20000024 	.word	0x20000024
 8004c48:	200005a4 	.word	0x200005a4

08004c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <HAL_GetTick+0x10>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr
 8004c5c:	200005a4 	.word	0x200005a4

08004c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c68:	f7ff fff0 	bl	8004c4c <HAL_GetTick>
 8004c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d005      	beq.n	8004c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <HAL_Delay+0x44>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c86:	bf00      	nop
 8004c88:	f7ff ffe0 	bl	8004c4c <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d8f7      	bhi.n	8004c88 <HAL_Delay+0x28>
  {
  }
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000024 	.word	0x20000024

08004ca8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0be      	b.n	8004e48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fbd2 	bl	8004490 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fbb7 	bl	8005460 <ADC_ConversionStop_Disable>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f040 8099 	bne.w	8004e36 <HAL_ADC_Init+0x18e>
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 8095 	bne.w	8004e36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d14:	f023 0302 	bic.w	r3, r3, #2
 8004d18:	f043 0202 	orr.w	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004d28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7b1b      	ldrb	r3, [r3, #12]
 8004d2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004d30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d003      	beq.n	8004d4a <HAL_ADC_Init+0xa2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d102      	bne.n	8004d50 <HAL_ADC_Init+0xa8>
 8004d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d4e:	e000      	b.n	8004d52 <HAL_ADC_Init+0xaa>
 8004d50:	2300      	movs	r3, #0
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	7d1b      	ldrb	r3, [r3, #20]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d119      	bne.n	8004d94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7b1b      	ldrb	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	035a      	lsls	r2, r3, #13
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	e00b      	b.n	8004d94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f043 0201 	orr.w	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <HAL_ADC_Init+0x1a8>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc4:	d003      	beq.n	8004dce <HAL_ADC_Init+0x126>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d104      	bne.n	8004dd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	051b      	lsls	r3, r3, #20
 8004dd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <HAL_ADC_Init+0x1ac>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d10b      	bne.n	8004e14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004e12:	e018      	b.n	8004e46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f023 0312 	bic.w	r3, r3, #18
 8004e1c:	f043 0210 	orr.w	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	f043 0201 	orr.w	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004e34:	e007      	b.n	8004e46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	f043 0210 	orr.w	r2, r3, #16
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	ffe1f7fd 	.word	0xffe1f7fd
 8004e54:	ff1f0efe 	.word	0xff1f0efe

08004e58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_ADC_Start+0x1a>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e062      	b.n	8004f38 <HAL_ADC_Start+0xe0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa96 	bl	80053ac <ADC_Enable>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d151      	bne.n	8004f2e <HAL_ADC_Start+0xd6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_ADC_Start+0x70>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <HAL_ADC_Start+0x8a>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f023 0206 	bic.w	r2, r3, #6
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ee0:	e002      	b.n	8004ee8 <HAL_ADC_Start+0x90>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0202 	mvn.w	r2, #2
 8004ef8:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004f04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004f08:	d108      	bne.n	8004f1c <HAL_ADC_Start+0xc4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004f18:	609a      	str	r2, [r3, #8]
 8004f1a:	e00c      	b.n	8004f36 <HAL_ADC_Start+0xde>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	e003      	b.n	8004f36 <HAL_ADC_Start+0xde>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_ADC_Stop+0x1a>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e01a      	b.n	8004f90 <HAL_ADC_Stop+0x50>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fa7c 	bl	8005460 <ADC_ConversionStop_Disable>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	f043 0201 	orr.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004fae:	f7ff fe4d 	bl	8004c4c <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e0d3      	b.n	8005182 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d131      	bne.n	800504c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d12a      	bne.n	800504c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004ff6:	e021      	b.n	800503c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d01d      	beq.n	800503c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_ADC_PollForConversion+0x7e>
 8005006:	f7ff fe21 	bl	8004c4c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d212      	bcs.n	800503c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f043 0204 	orr.w	r2, r3, #4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0a2      	b.n	8005182 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0d6      	beq.n	8004ff8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800504a:	e070      	b.n	800512e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800504c:	4b4f      	ldr	r3, [pc, #316]	; (800518c <HAL_ADC_PollForConversion+0x1f4>)
 800504e:	681c      	ldr	r4, [r3, #0]
 8005050:	2002      	movs	r0, #2
 8005052:	f001 f9c5 	bl	80063e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005056:	4603      	mov	r3, r0
 8005058:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6919      	ldr	r1, [r3, #16]
 8005062:	4b4b      	ldr	r3, [pc, #300]	; (8005190 <HAL_ADC_PollForConversion+0x1f8>)
 8005064:	400b      	ands	r3, r1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d118      	bne.n	800509c <HAL_ADC_PollForConversion+0x104>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68d9      	ldr	r1, [r3, #12]
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <HAL_ADC_PollForConversion+0x1fc>)
 8005072:	400b      	ands	r3, r1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d111      	bne.n	800509c <HAL_ADC_PollForConversion+0x104>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6919      	ldr	r1, [r3, #16]
 800507e:	4b46      	ldr	r3, [pc, #280]	; (8005198 <HAL_ADC_PollForConversion+0x200>)
 8005080:	400b      	ands	r3, r1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d108      	bne.n	8005098 <HAL_ADC_PollForConversion+0x100>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68d9      	ldr	r1, [r3, #12]
 800508c:	4b43      	ldr	r3, [pc, #268]	; (800519c <HAL_ADC_PollForConversion+0x204>)
 800508e:	400b      	ands	r3, r1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_ADC_PollForConversion+0x100>
 8005094:	2314      	movs	r3, #20
 8005096:	e020      	b.n	80050da <HAL_ADC_PollForConversion+0x142>
 8005098:	2329      	movs	r3, #41	; 0x29
 800509a:	e01e      	b.n	80050da <HAL_ADC_PollForConversion+0x142>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6919      	ldr	r1, [r3, #16]
 80050a2:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <HAL_ADC_PollForConversion+0x200>)
 80050a4:	400b      	ands	r3, r1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_ADC_PollForConversion+0x120>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68d9      	ldr	r1, [r3, #12]
 80050b0:	4b3a      	ldr	r3, [pc, #232]	; (800519c <HAL_ADC_PollForConversion+0x204>)
 80050b2:	400b      	ands	r3, r1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <HAL_ADC_PollForConversion+0x13c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6919      	ldr	r1, [r3, #16]
 80050be:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <HAL_ADC_PollForConversion+0x208>)
 80050c0:	400b      	ands	r3, r1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <HAL_ADC_PollForConversion+0x140>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68d9      	ldr	r1, [r3, #12]
 80050cc:	4b34      	ldr	r3, [pc, #208]	; (80051a0 <HAL_ADC_PollForConversion+0x208>)
 80050ce:	400b      	ands	r3, r1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_ADC_PollForConversion+0x140>
 80050d4:	2354      	movs	r3, #84	; 0x54
 80050d6:	e000      	b.n	80050da <HAL_ADC_PollForConversion+0x142>
 80050d8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80050e0:	e021      	b.n	8005126 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d01a      	beq.n	8005120 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_ADC_PollForConversion+0x168>
 80050f0:	f7ff fdac 	bl	8004c4c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d20f      	bcs.n	8005120 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d90b      	bls.n	8005120 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f043 0204 	orr.w	r2, r3, #4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e030      	b.n	8005182 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d8d9      	bhi.n	80050e2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f06f 0212 	mvn.w	r2, #18
 8005136:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800514e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005152:	d115      	bne.n	8005180 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005158:	2b00      	cmp	r3, #0
 800515a:	d111      	bne.n	8005180 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f043 0201 	orr.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}
 800518a:	bf00      	nop
 800518c:	2000001c 	.word	0x2000001c
 8005190:	24924924 	.word	0x24924924
 8005194:	00924924 	.word	0x00924924
 8005198:	12492492 	.word	0x12492492
 800519c:	00492492 	.word	0x00492492
 80051a0:	00249249 	.word	0x00249249

080051a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x20>
 80051d8:	2302      	movs	r3, #2
 80051da:	e0dc      	b.n	8005396 <HAL_ADC_ConfigChannel+0x1da>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d81c      	bhi.n	8005226 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	3b05      	subs	r3, #5
 80051fe:	221f      	movs	r2, #31
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	4019      	ands	r1, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	3b05      	subs	r3, #5
 8005218:	fa00 f203 	lsl.w	r2, r0, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	635a      	str	r2, [r3, #52]	; 0x34
 8005224:	e03c      	b.n	80052a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d81c      	bhi.n	8005268 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	3b23      	subs	r3, #35	; 0x23
 8005240:	221f      	movs	r2, #31
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43db      	mvns	r3, r3
 8005248:	4019      	ands	r1, r3
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	3b23      	subs	r3, #35	; 0x23
 800525a:	fa00 f203 	lsl.w	r2, r0, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
 8005266:	e01b      	b.n	80052a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	3b41      	subs	r3, #65	; 0x41
 800527a:	221f      	movs	r2, #31
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	4019      	ands	r1, r3
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	3b41      	subs	r3, #65	; 0x41
 8005294:	fa00 f203 	lsl.w	r2, r0, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b09      	cmp	r3, #9
 80052a6:	d91c      	bls.n	80052e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68d9      	ldr	r1, [r3, #12]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4613      	mov	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	3b1e      	subs	r3, #30
 80052ba:	2207      	movs	r2, #7
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	4019      	ands	r1, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6898      	ldr	r0, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	3b1e      	subs	r3, #30
 80052d4:	fa00 f203 	lsl.w	r2, r0, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	e019      	b.n	8005316 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6919      	ldr	r1, [r3, #16]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	4413      	add	r3, r2
 80052f2:	2207      	movs	r2, #7
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	4019      	ands	r1, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6898      	ldr	r0, [r3, #8]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4413      	add	r3, r2
 800530a:	fa00 f203 	lsl.w	r2, r0, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b10      	cmp	r3, #16
 800531c:	d003      	beq.n	8005326 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005322:	2b11      	cmp	r3, #17
 8005324:	d132      	bne.n	800538c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d125      	bne.n	800537c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d126      	bne.n	800538c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800534c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b10      	cmp	r3, #16
 8005354:	d11a      	bne.n	800538c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	0c9a      	lsrs	r2, r3, #18
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800536c:	e002      	b.n	8005374 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3b01      	subs	r3, #1
 8005372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f9      	bne.n	800536e <HAL_ADC_ConfigChannel+0x1b2>
 800537a:	e007      	b.n	800538c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	40012400 	.word	0x40012400
 80053a4:	2000001c 	.word	0x2000001c
 80053a8:	431bde83 	.word	0x431bde83

080053ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d040      	beq.n	800544c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80053da:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <ADC_Enable+0xac>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1f      	ldr	r2, [pc, #124]	; (800545c <ADC_Enable+0xb0>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	0c9b      	lsrs	r3, r3, #18
 80053e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80053e8:	e002      	b.n	80053f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f9      	bne.n	80053ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053f6:	f7ff fc29 	bl	8004c4c <HAL_GetTick>
 80053fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80053fc:	e01f      	b.n	800543e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053fe:	f7ff fc25 	bl	8004c4c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d918      	bls.n	800543e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d011      	beq.n	800543e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	f043 0210 	orr.w	r2, r3, #16
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e007      	b.n	800544e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	d1d8      	bne.n	80053fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000001c 	.word	0x2000001c
 800545c:	431bde83 	.word	0x431bde83

08005460 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d12e      	bne.n	80054d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800548a:	f7ff fbdf 	bl	8004c4c <HAL_GetTick>
 800548e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005490:	e01b      	b.n	80054ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005492:	f7ff fbdb 	bl	8004c4c <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d914      	bls.n	80054ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d10d      	bne.n	80054ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	f043 0210 	orr.w	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	f043 0201 	orr.w	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e007      	b.n	80054da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d0dc      	beq.n	8005492 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <__NVIC_SetPriorityGrouping+0x44>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005500:	4013      	ands	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800550c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005516:	4a04      	ldr	r2, [pc, #16]	; (8005528 <__NVIC_SetPriorityGrouping+0x44>)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	60d3      	str	r3, [r2, #12]
}
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	e000ed00 	.word	0xe000ed00

0800552c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <__NVIC_GetPriorityGrouping+0x18>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	f003 0307 	and.w	r3, r3, #7
}
 800553a:	4618      	mov	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005556:	2b00      	cmp	r3, #0
 8005558:	db0b      	blt.n	8005572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	f003 021f 	and.w	r2, r3, #31
 8005560:	4906      	ldr	r1, [pc, #24]	; (800557c <__NVIC_EnableIRQ+0x34>)
 8005562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	2001      	movs	r0, #1
 800556a:	fa00 f202 	lsl.w	r2, r0, r2
 800556e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	e000e100 	.word	0xe000e100

08005580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	6039      	str	r1, [r7, #0]
 800558a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005590:	2b00      	cmp	r3, #0
 8005592:	db0a      	blt.n	80055aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	490c      	ldr	r1, [pc, #48]	; (80055cc <__NVIC_SetPriority+0x4c>)
 800559a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559e:	0112      	lsls	r2, r2, #4
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	440b      	add	r3, r1
 80055a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055a8:	e00a      	b.n	80055c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	4908      	ldr	r1, [pc, #32]	; (80055d0 <__NVIC_SetPriority+0x50>)
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	3b04      	subs	r3, #4
 80055b8:	0112      	lsls	r2, r2, #4
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	440b      	add	r3, r1
 80055be:	761a      	strb	r2, [r3, #24]
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	e000e100 	.word	0xe000e100
 80055d0:	e000ed00 	.word	0xe000ed00

080055d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f1c3 0307 	rsb	r3, r3, #7
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	bf28      	it	cs
 80055f2:	2304      	movcs	r3, #4
 80055f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d902      	bls.n	8005604 <NVIC_EncodePriority+0x30>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3b03      	subs	r3, #3
 8005602:	e000      	b.n	8005606 <NVIC_EncodePriority+0x32>
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005608:	f04f 32ff 	mov.w	r2, #4294967295
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43da      	mvns	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	401a      	ands	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800561c:	f04f 31ff 	mov.w	r1, #4294967295
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	43d9      	mvns	r1, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800562c:	4313      	orrs	r3, r2
         );
}
 800562e:	4618      	mov	r0, r3
 8005630:	3724      	adds	r7, #36	; 0x24
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr

08005638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ff4f 	bl	80054e4 <__NVIC_SetPriorityGrouping>
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	4603      	mov	r3, r0
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005660:	f7ff ff64 	bl	800552c <__NVIC_GetPriorityGrouping>
 8005664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff ffb2 	bl	80055d4 <NVIC_EncodePriority>
 8005670:	4602      	mov	r2, r0
 8005672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff ff81 	bl	8005580 <__NVIC_SetPriority>
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	4603      	mov	r3, r0
 800568e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff ff57 	bl	8005548 <__NVIC_EnableIRQ>
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b08b      	sub	sp, #44	; 0x2c
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80056b2:	2300      	movs	r3, #0
 80056b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b6:	e169      	b.n	800598c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80056b8:	2201      	movs	r2, #1
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	f040 8158 	bne.w	8005986 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4a9a      	ldr	r2, [pc, #616]	; (8005944 <HAL_GPIO_Init+0x2a0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d05e      	beq.n	800579e <HAL_GPIO_Init+0xfa>
 80056e0:	4a98      	ldr	r2, [pc, #608]	; (8005944 <HAL_GPIO_Init+0x2a0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d875      	bhi.n	80057d2 <HAL_GPIO_Init+0x12e>
 80056e6:	4a98      	ldr	r2, [pc, #608]	; (8005948 <HAL_GPIO_Init+0x2a4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d058      	beq.n	800579e <HAL_GPIO_Init+0xfa>
 80056ec:	4a96      	ldr	r2, [pc, #600]	; (8005948 <HAL_GPIO_Init+0x2a4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d86f      	bhi.n	80057d2 <HAL_GPIO_Init+0x12e>
 80056f2:	4a96      	ldr	r2, [pc, #600]	; (800594c <HAL_GPIO_Init+0x2a8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d052      	beq.n	800579e <HAL_GPIO_Init+0xfa>
 80056f8:	4a94      	ldr	r2, [pc, #592]	; (800594c <HAL_GPIO_Init+0x2a8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d869      	bhi.n	80057d2 <HAL_GPIO_Init+0x12e>
 80056fe:	4a94      	ldr	r2, [pc, #592]	; (8005950 <HAL_GPIO_Init+0x2ac>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d04c      	beq.n	800579e <HAL_GPIO_Init+0xfa>
 8005704:	4a92      	ldr	r2, [pc, #584]	; (8005950 <HAL_GPIO_Init+0x2ac>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d863      	bhi.n	80057d2 <HAL_GPIO_Init+0x12e>
 800570a:	4a92      	ldr	r2, [pc, #584]	; (8005954 <HAL_GPIO_Init+0x2b0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d046      	beq.n	800579e <HAL_GPIO_Init+0xfa>
 8005710:	4a90      	ldr	r2, [pc, #576]	; (8005954 <HAL_GPIO_Init+0x2b0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d85d      	bhi.n	80057d2 <HAL_GPIO_Init+0x12e>
 8005716:	2b12      	cmp	r3, #18
 8005718:	d82a      	bhi.n	8005770 <HAL_GPIO_Init+0xcc>
 800571a:	2b12      	cmp	r3, #18
 800571c:	d859      	bhi.n	80057d2 <HAL_GPIO_Init+0x12e>
 800571e:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <HAL_GPIO_Init+0x80>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	0800579f 	.word	0x0800579f
 8005728:	08005779 	.word	0x08005779
 800572c:	0800578b 	.word	0x0800578b
 8005730:	080057cd 	.word	0x080057cd
 8005734:	080057d3 	.word	0x080057d3
 8005738:	080057d3 	.word	0x080057d3
 800573c:	080057d3 	.word	0x080057d3
 8005740:	080057d3 	.word	0x080057d3
 8005744:	080057d3 	.word	0x080057d3
 8005748:	080057d3 	.word	0x080057d3
 800574c:	080057d3 	.word	0x080057d3
 8005750:	080057d3 	.word	0x080057d3
 8005754:	080057d3 	.word	0x080057d3
 8005758:	080057d3 	.word	0x080057d3
 800575c:	080057d3 	.word	0x080057d3
 8005760:	080057d3 	.word	0x080057d3
 8005764:	080057d3 	.word	0x080057d3
 8005768:	08005781 	.word	0x08005781
 800576c:	08005795 	.word	0x08005795
 8005770:	4a79      	ldr	r2, [pc, #484]	; (8005958 <HAL_GPIO_Init+0x2b4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005776:	e02c      	b.n	80057d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	623b      	str	r3, [r7, #32]
          break;
 800577e:	e029      	b.n	80057d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	3304      	adds	r3, #4
 8005786:	623b      	str	r3, [r7, #32]
          break;
 8005788:	e024      	b.n	80057d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	3308      	adds	r3, #8
 8005790:	623b      	str	r3, [r7, #32]
          break;
 8005792:	e01f      	b.n	80057d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	330c      	adds	r3, #12
 800579a:	623b      	str	r3, [r7, #32]
          break;
 800579c:	e01a      	b.n	80057d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80057a6:	2304      	movs	r3, #4
 80057a8:	623b      	str	r3, [r7, #32]
          break;
 80057aa:	e013      	b.n	80057d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d105      	bne.n	80057c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057b4:	2308      	movs	r3, #8
 80057b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	611a      	str	r2, [r3, #16]
          break;
 80057be:	e009      	b.n	80057d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057c0:	2308      	movs	r3, #8
 80057c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	615a      	str	r2, [r3, #20]
          break;
 80057ca:	e003      	b.n	80057d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057cc:	2300      	movs	r3, #0
 80057ce:	623b      	str	r3, [r7, #32]
          break;
 80057d0:	e000      	b.n	80057d4 <HAL_GPIO_Init+0x130>
          break;
 80057d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	2bff      	cmp	r3, #255	; 0xff
 80057d8:	d801      	bhi.n	80057de <HAL_GPIO_Init+0x13a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	e001      	b.n	80057e2 <HAL_GPIO_Init+0x13e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2bff      	cmp	r3, #255	; 0xff
 80057e8:	d802      	bhi.n	80057f0 <HAL_GPIO_Init+0x14c>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	e002      	b.n	80057f6 <HAL_GPIO_Init+0x152>
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	3b08      	subs	r3, #8
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	210f      	movs	r1, #15
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	fa01 f303 	lsl.w	r3, r1, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	401a      	ands	r2, r3
 8005808:	6a39      	ldr	r1, [r7, #32]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	431a      	orrs	r2, r3
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80b1 	beq.w	8005986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005824:	4b4d      	ldr	r3, [pc, #308]	; (800595c <HAL_GPIO_Init+0x2b8>)
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	4a4c      	ldr	r2, [pc, #304]	; (800595c <HAL_GPIO_Init+0x2b8>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6193      	str	r3, [r2, #24]
 8005830:	4b4a      	ldr	r3, [pc, #296]	; (800595c <HAL_GPIO_Init+0x2b8>)
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800583c:	4a48      	ldr	r2, [pc, #288]	; (8005960 <HAL_GPIO_Init+0x2bc>)
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	3302      	adds	r3, #2
 8005844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	220f      	movs	r2, #15
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a40      	ldr	r2, [pc, #256]	; (8005964 <HAL_GPIO_Init+0x2c0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <HAL_GPIO_Init+0x1ec>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3f      	ldr	r2, [pc, #252]	; (8005968 <HAL_GPIO_Init+0x2c4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00d      	beq.n	800588c <HAL_GPIO_Init+0x1e8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3e      	ldr	r2, [pc, #248]	; (800596c <HAL_GPIO_Init+0x2c8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <HAL_GPIO_Init+0x1e4>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <HAL_GPIO_Init+0x2cc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d101      	bne.n	8005884 <HAL_GPIO_Init+0x1e0>
 8005880:	2303      	movs	r3, #3
 8005882:	e006      	b.n	8005892 <HAL_GPIO_Init+0x1ee>
 8005884:	2304      	movs	r3, #4
 8005886:	e004      	b.n	8005892 <HAL_GPIO_Init+0x1ee>
 8005888:	2302      	movs	r3, #2
 800588a:	e002      	b.n	8005892 <HAL_GPIO_Init+0x1ee>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_GPIO_Init+0x1ee>
 8005890:	2300      	movs	r3, #0
 8005892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005894:	f002 0203 	and.w	r2, r2, #3
 8005898:	0092      	lsls	r2, r2, #2
 800589a:	4093      	lsls	r3, r2
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80058a2:	492f      	ldr	r1, [pc, #188]	; (8005960 <HAL_GPIO_Init+0x2bc>)
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	3302      	adds	r3, #2
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d006      	beq.n	80058ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80058bc:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	492c      	ldr	r1, [pc, #176]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	608b      	str	r3, [r1, #8]
 80058c8:	e006      	b.n	80058d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80058ca:	4b2a      	ldr	r3, [pc, #168]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	4928      	ldr	r1, [pc, #160]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d006      	beq.n	80058f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80058e4:	4b23      	ldr	r3, [pc, #140]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	4922      	ldr	r1, [pc, #136]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60cb      	str	r3, [r1, #12]
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80058f2:	4b20      	ldr	r3, [pc, #128]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	43db      	mvns	r3, r3
 80058fa:	491e      	ldr	r1, [pc, #120]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	4918      	ldr	r1, [pc, #96]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	604b      	str	r3, [r1, #4]
 8005918:	e006      	b.n	8005928 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800591a:	4b16      	ldr	r3, [pc, #88]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	43db      	mvns	r3, r3
 8005922:	4914      	ldr	r1, [pc, #80]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 8005924:	4013      	ands	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d021      	beq.n	8005978 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005934:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	490e      	ldr	r1, [pc, #56]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4313      	orrs	r3, r2
 800593e:	600b      	str	r3, [r1, #0]
 8005940:	e021      	b.n	8005986 <HAL_GPIO_Init+0x2e2>
 8005942:	bf00      	nop
 8005944:	10320000 	.word	0x10320000
 8005948:	10310000 	.word	0x10310000
 800594c:	10220000 	.word	0x10220000
 8005950:	10210000 	.word	0x10210000
 8005954:	10120000 	.word	0x10120000
 8005958:	10110000 	.word	0x10110000
 800595c:	40021000 	.word	0x40021000
 8005960:	40010000 	.word	0x40010000
 8005964:	40010800 	.word	0x40010800
 8005968:	40010c00 	.word	0x40010c00
 800596c:	40011000 	.word	0x40011000
 8005970:	40011400 	.word	0x40011400
 8005974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005978:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_GPIO_Init+0x304>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	43db      	mvns	r3, r3
 8005980:	4909      	ldr	r1, [pc, #36]	; (80059a8 <HAL_GPIO_Init+0x304>)
 8005982:	4013      	ands	r3, r2
 8005984:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	3301      	adds	r3, #1
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	f47f ae8e 	bne.w	80056b8 <HAL_GPIO_Init+0x14>
  }
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	372c      	adds	r7, #44	; 0x2c
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr
 80059a8:	40010400 	.word	0x40010400

080059ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
 80059b8:	4613      	mov	r3, r2
 80059ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059bc:	787b      	ldrb	r3, [r7, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80059c8:	e003      	b.n	80059d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80059ca:	887b      	ldrh	r3, [r7, #2]
 80059cc:	041a      	lsls	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059ee:	887a      	ldrh	r2, [r7, #2]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4013      	ands	r3, r2
 80059f4:	041a      	lsls	r2, r3, #16
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	43d9      	mvns	r1, r3
 80059fa:	887b      	ldrh	r3, [r7, #2]
 80059fc:	400b      	ands	r3, r1
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	611a      	str	r2, [r3, #16]
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr
	...

08005a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e272      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8087 	beq.w	8005b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a30:	4b92      	ldr	r3, [pc, #584]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d00c      	beq.n	8005a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a3c:	4b8f      	ldr	r3, [pc, #572]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d112      	bne.n	8005a6e <HAL_RCC_OscConfig+0x5e>
 8005a48:	4b8c      	ldr	r3, [pc, #560]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d10b      	bne.n	8005a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a56:	4b89      	ldr	r3, [pc, #548]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d06c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x12c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d168      	bne.n	8005b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e24c      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a76:	d106      	bne.n	8005a86 <HAL_RCC_OscConfig+0x76>
 8005a78:	4b80      	ldr	r3, [pc, #512]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7f      	ldr	r2, [pc, #508]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e02e      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x98>
 8005a8e:	4b7b      	ldr	r3, [pc, #492]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7a      	ldr	r2, [pc, #488]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4b78      	ldr	r3, [pc, #480]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a77      	ldr	r2, [pc, #476]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e01d      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0xbc>
 8005ab2:	4b72      	ldr	r3, [pc, #456]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a71      	ldr	r2, [pc, #452]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b6f      	ldr	r3, [pc, #444]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a6e      	ldr	r2, [pc, #440]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e00b      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005acc:	4b6b      	ldr	r3, [pc, #428]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6a      	ldr	r2, [pc, #424]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a67      	ldr	r2, [pc, #412]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d013      	beq.n	8005b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7ff f8ae 	bl	8004c4c <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af4:	f7ff f8aa 	bl	8004c4c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e200      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	4b5d      	ldr	r3, [pc, #372]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0xe4>
 8005b12:	e014      	b.n	8005b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b14:	f7ff f89a 	bl	8004c4c <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b1c:	f7ff f896 	bl	8004c4c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	; 0x64
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e1ec      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	4b53      	ldr	r3, [pc, #332]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x10c>
 8005b3a:	e000      	b.n	8005b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d063      	beq.n	8005c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b56:	4b49      	ldr	r3, [pc, #292]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d11c      	bne.n	8005b9c <HAL_RCC_OscConfig+0x18c>
 8005b62:	4b46      	ldr	r3, [pc, #280]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6e:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_RCC_OscConfig+0x176>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e1c0      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b86:	4b3d      	ldr	r3, [pc, #244]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4939      	ldr	r1, [pc, #228]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9a:	e03a      	b.n	8005c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba4:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <HAL_RCC_OscConfig+0x270>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005baa:	f7ff f84f 	bl	8004c4c <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bb2:	f7ff f84b 	bl	8004c4c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e1a1      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd0:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4927      	ldr	r1, [pc, #156]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	600b      	str	r3, [r1, #0]
 8005be4:	e015      	b.n	8005c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <HAL_RCC_OscConfig+0x270>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7ff f82e 	bl	8004c4c <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf4:	f7ff f82a 	bl	8004c4c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e180      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03a      	beq.n	8005c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d019      	beq.n	8005c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c26:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <HAL_RCC_OscConfig+0x274>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2c:	f7ff f80e 	bl	8004c4c <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c34:	f7ff f80a 	bl	8004c4c <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e160      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c52:	2001      	movs	r0, #1
 8005c54:	f000 fb00 	bl	8006258 <RCC_Delay>
 8005c58:	e01c      	b.n	8005c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <HAL_RCC_OscConfig+0x274>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c60:	f7fe fff4 	bl	8004c4c <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c66:	e00f      	b.n	8005c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c68:	f7fe fff0 	bl	8004c4c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d908      	bls.n	8005c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e146      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	42420000 	.word	0x42420000
 8005c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c88:	4b92      	ldr	r3, [pc, #584]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e9      	bne.n	8005c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80a6 	beq.w	8005dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca6:	4b8b      	ldr	r3, [pc, #556]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10d      	bne.n	8005cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	4b88      	ldr	r3, [pc, #544]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	4a87      	ldr	r2, [pc, #540]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	61d3      	str	r3, [r2, #28]
 8005cbe:	4b85      	ldr	r3, [pc, #532]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cce:	4b82      	ldr	r3, [pc, #520]	; (8005ed8 <HAL_RCC_OscConfig+0x4c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d118      	bne.n	8005d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cda:	4b7f      	ldr	r3, [pc, #508]	; (8005ed8 <HAL_RCC_OscConfig+0x4c8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7e      	ldr	r2, [pc, #504]	; (8005ed8 <HAL_RCC_OscConfig+0x4c8>)
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ce6:	f7fe ffb1 	bl	8004c4c <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cee:	f7fe ffad 	bl	8004c4c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b64      	cmp	r3, #100	; 0x64
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e103      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	4b75      	ldr	r3, [pc, #468]	; (8005ed8 <HAL_RCC_OscConfig+0x4c8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x312>
 8005d14:	4b6f      	ldr	r3, [pc, #444]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	4a6e      	ldr	r2, [pc, #440]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6213      	str	r3, [r2, #32]
 8005d20:	e02d      	b.n	8005d7e <HAL_RCC_OscConfig+0x36e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x334>
 8005d2a:	4b6a      	ldr	r3, [pc, #424]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4a69      	ldr	r2, [pc, #420]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	6213      	str	r3, [r2, #32]
 8005d36:	4b67      	ldr	r3, [pc, #412]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	4a66      	ldr	r2, [pc, #408]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d3c:	f023 0304 	bic.w	r3, r3, #4
 8005d40:	6213      	str	r3, [r2, #32]
 8005d42:	e01c      	b.n	8005d7e <HAL_RCC_OscConfig+0x36e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b05      	cmp	r3, #5
 8005d4a:	d10c      	bne.n	8005d66 <HAL_RCC_OscConfig+0x356>
 8005d4c:	4b61      	ldr	r3, [pc, #388]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	4a60      	ldr	r2, [pc, #384]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d52:	f043 0304 	orr.w	r3, r3, #4
 8005d56:	6213      	str	r3, [r2, #32]
 8005d58:	4b5e      	ldr	r3, [pc, #376]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	4a5d      	ldr	r2, [pc, #372]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	6213      	str	r3, [r2, #32]
 8005d64:	e00b      	b.n	8005d7e <HAL_RCC_OscConfig+0x36e>
 8005d66:	4b5b      	ldr	r3, [pc, #364]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4a5a      	ldr	r2, [pc, #360]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	6213      	str	r3, [r2, #32]
 8005d72:	4b58      	ldr	r3, [pc, #352]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a57      	ldr	r2, [pc, #348]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d015      	beq.n	8005db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d86:	f7fe ff61 	bl	8004c4c <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	e00a      	b.n	8005da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d8e:	f7fe ff5d 	bl	8004c4c <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e0b1      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da4:	4b4b      	ldr	r3, [pc, #300]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ee      	beq.n	8005d8e <HAL_RCC_OscConfig+0x37e>
 8005db0:	e014      	b.n	8005ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db2:	f7fe ff4b 	bl	8004c4c <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db8:	e00a      	b.n	8005dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dba:	f7fe ff47 	bl	8004c4c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e09b      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd0:	4b40      	ldr	r3, [pc, #256]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ee      	bne.n	8005dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de2:	4b3c      	ldr	r3, [pc, #240]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4a3b      	ldr	r2, [pc, #236]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8087 	beq.w	8005f06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005df8:	4b36      	ldr	r3, [pc, #216]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 030c 	and.w	r3, r3, #12
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d061      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d146      	bne.n	8005e9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0c:	4b33      	ldr	r3, [pc, #204]	; (8005edc <HAL_RCC_OscConfig+0x4cc>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e12:	f7fe ff1b 	bl	8004c4c <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1a:	f7fe ff17 	bl	8004c4c <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e06d      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e2c:	4b29      	ldr	r3, [pc, #164]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f0      	bne.n	8005e1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e40:	d108      	bne.n	8005e54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f023 020f 	bic.w	r2, r3, #15
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4921      	ldr	r1, [pc, #132]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a19      	ldr	r1, [r3, #32]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	430b      	orrs	r3, r1
 8005e66:	491b      	ldr	r1, [pc, #108]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <HAL_RCC_OscConfig+0x4cc>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e72:	f7fe feeb 	bl	8004c4c <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e7a:	f7fe fee7 	bl	8004c4c <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e03d      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x46a>
 8005e98:	e035      	b.n	8005f06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <HAL_RCC_OscConfig+0x4cc>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fe fed4 	bl	8004c4c <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea8:	f7fe fed0 	bl	8004c4c <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e026      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <HAL_RCC_OscConfig+0x4c4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x498>
 8005ec6:	e01e      	b.n	8005f06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e019      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	40007000 	.word	0x40007000
 8005edc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCC_OscConfig+0x500>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d106      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000

08005f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0a0      	b.n	800606a <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d020      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f40:	4b4c      	ldr	r3, [pc, #304]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a4b      	ldr	r2, [pc, #300]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f58:	4b46      	ldr	r3, [pc, #280]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a45      	ldr	r2, [pc, #276]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005f5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f64:	4b43      	ldr	r3, [pc, #268]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4940      	ldr	r1, [pc, #256]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d040      	beq.n	8006004 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d107      	bne.n	8005f9a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8a:	4b3a      	ldr	r3, [pc, #232]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d115      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e067      	b.n	800606a <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d107      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa2:	4b34      	ldr	r3, [pc, #208]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e05b      	b.n	800606a <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb2:	4b30      	ldr	r3, [pc, #192]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e053      	b.n	800606a <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fc2:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f023 0203 	bic.w	r2, r3, #3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4929      	ldr	r1, [pc, #164]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fd4:	f7fe fe3a 	bl	8004c4c <HAL_GetTick>
 8005fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fdc:	f7fe fe36 	bl	8004c4c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e03b      	b.n	800606a <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f003 020c 	and.w	r2, r3, #12
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	429a      	cmp	r2, r3
 8006002:	d1eb      	bne.n	8005fdc <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4915      	ldr	r1, [pc, #84]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 800601e:	4313      	orrs	r3, r2
 8006020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	490d      	ldr	r1, [pc, #52]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 800603e:	4313      	orrs	r3, r2
 8006040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006042:	f000 f857 	bl	80060f4 <HAL_RCC_GetSysClockFreq>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <HAL_RCC_ClockConfig+0x160>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	4909      	ldr	r1, [pc, #36]	; (8006078 <HAL_RCC_ClockConfig+0x164>)
 8006054:	5ccb      	ldrb	r3, [r1, r3]
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	4a08      	ldr	r2, [pc, #32]	; (800607c <HAL_RCC_ClockConfig+0x168>)
 800605c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <HAL_RCC_ClockConfig+0x16c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fb84 	bl	8004770 <HAL_InitTick>

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000
 8006078:	08008868 	.word	0x08008868
 800607c:	2000001c 	.word	0x2000001c
 8006080:	20000020 	.word	0x20000020

08006084 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	; 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8006090:	f107 0318 	add.w	r3, r7, #24
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800609e:	2302      	movs	r3, #2
 80060a0:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80060a2:	2303      	movs	r3, #3
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80060aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060ae:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80060b0:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <HAL_RCC_MCOConfig+0x68>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <HAL_RCC_MCOConfig+0x68>)
 80060b6:	f043 0304 	orr.w	r3, r3, #4
 80060ba:	6193      	str	r3, [r2, #24]
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCC_MCOConfig+0x68>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80060c8:	f107 0318 	add.w	r3, r7, #24
 80060cc:	4619      	mov	r1, r3
 80060ce:	4808      	ldr	r0, [pc, #32]	; (80060f0 <HAL_RCC_MCOConfig+0x6c>)
 80060d0:	f7ff fae8 	bl	80056a4 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_MCOConfig+0x68>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCC_MCOConfig+0x68>)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	604b      	str	r3, [r1, #4]
}
 80060e4:	bf00      	nop
 80060e6:	3728      	adds	r7, #40	; 0x28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40010800 	.word	0x40010800

080060f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	2300      	movs	r3, #0
 8006108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCC_GetSysClockFreq+0x90>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b04      	cmp	r3, #4
 800611c:	d002      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0x30>
 800611e:	2b08      	cmp	r3, #8
 8006120:	d003      	beq.n	800612a <HAL_RCC_GetSysClockFreq+0x36>
 8006122:	e026      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006124:	4b18      	ldr	r3, [pc, #96]	; (8006188 <HAL_RCC_GetSysClockFreq+0x94>)
 8006126:	613b      	str	r3, [r7, #16]
      break;
 8006128:	e026      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	0c9b      	lsrs	r3, r3, #18
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_RCC_GetSysClockFreq+0x98>)
 8006134:	5cd3      	ldrb	r3, [r2, r3]
 8006136:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00f      	beq.n	8006162 <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8006142:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_RCC_GetSysClockFreq+0x90>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	f003 030f 	and.w	r3, r3, #15
 800614a:	4a11      	ldr	r2, [pc, #68]	; (8006190 <HAL_RCC_GetSysClockFreq+0x9c>)
 800614c:	5cd3      	ldrb	r3, [r2, r3]
 800614e:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <HAL_RCC_GetSysClockFreq+0x94>)
 8006154:	fb03 f202 	mul.w	r2, r3, r2
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	fbb2 f3f3 	udiv	r3, r2, r3
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e004      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a0b      	ldr	r2, [pc, #44]	; (8006194 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	613b      	str	r3, [r7, #16]
      break;
 8006170:	e002      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006174:	613b      	str	r3, [r7, #16]
      break;
 8006176:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006178:	693b      	ldr	r3, [r7, #16]
}
 800617a:	4618      	mov	r0, r3
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	40021000 	.word	0x40021000
 8006188:	016e3600 	.word	0x016e3600
 800618c:	08008880 	.word	0x08008880
 8006190:	08008890 	.word	0x08008890
 8006194:	003d0900 	.word	0x003d0900
 8006198:	007a1200 	.word	0x007a1200

0800619c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <HAL_RCC_GetHCLKFreq+0x10>)
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	2000001c 	.word	0x2000001c

080061b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061b4:	f7ff fff2 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4903      	ldr	r1, [pc, #12]	; (80061d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40021000 	.word	0x40021000
 80061d4:	08008878 	.word	0x08008878

080061d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061dc:	f7ff ffde 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061e0:	4602      	mov	r2, r0
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	0adb      	lsrs	r3, r3, #11
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	4903      	ldr	r1, [pc, #12]	; (80061fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	08008878 	.word	0x08008878

08006200 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	220f      	movs	r2, #15
 800620e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006210:	4b10      	ldr	r3, [pc, #64]	; (8006254 <HAL_RCC_GetClockConfig+0x54>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 0203 	and.w	r2, r3, #3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <HAL_RCC_GetClockConfig+0x54>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <HAL_RCC_GetClockConfig+0x54>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <HAL_RCC_GetClockConfig+0x54>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	08db      	lsrs	r3, r3, #3
 800623a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	611a      	str	r2, [r3, #16]
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
#endif
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000

08006258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <RCC_Delay+0x34>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0a      	ldr	r2, [pc, #40]	; (8006290 <RCC_Delay+0x38>)
 8006266:	fba2 2303 	umull	r2, r3, r2, r3
 800626a:	0a5b      	lsrs	r3, r3, #9
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006274:	bf00      	nop
  }
  while (Delay --);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1e5a      	subs	r2, r3, #1
 800627a:	60fa      	str	r2, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f9      	bne.n	8006274 <RCC_Delay+0x1c>
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	2000001c 	.word	0x2000001c
 8006290:	10624dd3 	.word	0x10624dd3

08006294 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d07d      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80062b0:	2300      	movs	r3, #0
 80062b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062b4:	4b47      	ldr	r3, [pc, #284]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10d      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062c0:	4b44      	ldr	r3, [pc, #272]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	4a43      	ldr	r2, [pc, #268]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80062c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ca:	61d3      	str	r3, [r2, #28]
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062dc:	4b3e      	ldr	r3, [pc, #248]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d118      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062e8:	4b3b      	ldr	r3, [pc, #236]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3a      	ldr	r2, [pc, #232]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062f4:	f7fe fcaa 	bl	8004c4c <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fa:	e008      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062fc:	f7fe fca6 	bl	8004c4c <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	; 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e05e      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630e:	4b32      	ldr	r3, [pc, #200]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800631a:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006322:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d02e      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	429a      	cmp	r2, r3
 8006336:	d027      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006340:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006342:	4b26      	ldr	r3, [pc, #152]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8006344:	2201      	movs	r2, #1
 8006346:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800634e:	4a21      	ldr	r2, [pc, #132]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d014      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635e:	f7fe fc75 	bl	8004c4c <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006364:	e00a      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006366:	f7fe fc71 	bl	8004c4c <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	f241 3288 	movw	r2, #5000	; 0x1388
 8006374:	4293      	cmp	r3, r2
 8006376:	d901      	bls.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e027      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0ee      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006388:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	490f      	ldr	r1, [pc, #60]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8006396:	4313      	orrs	r3, r2
 8006398:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d105      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a0:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	4a0b      	ldr	r2, [pc, #44]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80063a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	4903      	ldr	r1, [pc, #12]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
 80063dc:	42420440 	.word	0x42420440

080063e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d003      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d032      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80063fc:	e040      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      temp_reg = RCC->BDCR;
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800640a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640e:	d108      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        frequency = LSE_VALUE;
 800641a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	e01e      	b.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800642c:	d109      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800642e:	4b17      	ldr	r3, [pc, #92]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = LSI_VALUE;
 800643a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e00e      	b.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644c:	d117      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d011      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        frequency = HSE_VALUE / 128U;
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800645c:	60fb      	str	r3, [r7, #12]
      break;
 800645e:	e00e      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8006460:	e00d      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006462:	f7ff feb9 	bl	80061d8 <HAL_RCC_GetPCLK2Freq>
 8006466:	4602      	mov	r2, r0
 8006468:	4b08      	ldr	r3, [pc, #32]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	0b9b      	lsrs	r3, r3, #14
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	3301      	adds	r3, #1
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	60fb      	str	r3, [r7, #12]
      break;
 800647c:	e000      	b.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      break;
 800647e:	bf00      	nop
    }
  }
  return (frequency);
 8006480:	68fb      	ldr	r3, [r7, #12]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40021000 	.word	0x40021000
 8006490:	0002dc6c 	.word	0x0002dc6c

08006494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e06e      	b.n	8006584 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d108      	bne.n	80064c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b6:	d009      	beq.n	80064cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	61da      	str	r2, [r3, #28]
 80064be:	e005      	b.n	80064cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fe f80e 	bl	8004508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	ea42 0103 	orr.w	r1, r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	0c1a      	lsrs	r2, r3, #16
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f002 0204 	and.w	r2, r2, #4
 8006572:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_SPI_Transmit+0x22>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e12d      	b.n	800680a <HAL_SPI_Transmit+0x27e>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b6:	f7fe fb49 	bl	8004c4c <HAL_GetTick>
 80065ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d002      	beq.n	80065d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
 80065ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065d0:	e116      	b.n	8006800 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_SPI_Transmit+0x52>
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d102      	bne.n	80065e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065e2:	e10d      	b.n	8006800 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2203      	movs	r2, #3
 80065e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	88fa      	ldrh	r2, [r7, #6]
 80065fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	88fa      	ldrh	r2, [r7, #6]
 8006602:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662a:	d10f      	bne.n	800664c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800663a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800664a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d007      	beq.n	800666a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006672:	d14f      	bne.n	8006714 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <HAL_SPI_Transmit+0xf6>
 800667c:	8afb      	ldrh	r3, [r7, #22]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d142      	bne.n	8006708 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	881a      	ldrh	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066a6:	e02f      	b.n	8006708 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d112      	bne.n	80066dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	881a      	ldrh	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	1c9a      	adds	r2, r3, #2
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80066da:	e015      	b.n	8006708 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066dc:	f7fe fab6 	bl	8004c4c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d803      	bhi.n	80066f4 <HAL_SPI_Transmit+0x168>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d102      	bne.n	80066fa <HAL_SPI_Transmit+0x16e>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d106      	bne.n	8006708 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006706:	e07b      	b.n	8006800 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ca      	bne.n	80066a8 <HAL_SPI_Transmit+0x11c>
 8006712:	e050      	b.n	80067b6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_Transmit+0x196>
 800671c:	8afb      	ldrh	r3, [r7, #22]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d144      	bne.n	80067ac <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006748:	e030      	b.n	80067ac <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d113      	bne.n	8006780 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	86da      	strh	r2, [r3, #54]	; 0x36
 800677e:	e015      	b.n	80067ac <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006780:	f7fe fa64 	bl	8004c4c <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d803      	bhi.n	8006798 <HAL_SPI_Transmit+0x20c>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d102      	bne.n	800679e <HAL_SPI_Transmit+0x212>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80067aa:	e029      	b.n	8006800 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1c9      	bne.n	800674a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fbcc 	bl	8006f58 <SPI_EndRxTxTransaction>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e003      	b.n	8006800 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006808:	7ffb      	ldrb	r3, [r7, #31]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b088      	sub	sp, #32
 8006816:	af02      	add	r7, sp, #8
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d002      	beq.n	8006838 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006832:	2302      	movs	r3, #2
 8006834:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006836:	e0fb      	b.n	8006a30 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006840:	d112      	bne.n	8006868 <HAL_SPI_Receive+0x56>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10e      	bne.n	8006868 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2204      	movs	r2, #4
 800684e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006852:	88fa      	ldrh	r2, [r7, #6]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f8ef 	bl	8006a42 <HAL_SPI_TransmitReceive>
 8006864:	4603      	mov	r3, r0
 8006866:	e0e8      	b.n	8006a3a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_SPI_Receive+0x64>
 8006872:	2302      	movs	r3, #2
 8006874:	e0e1      	b.n	8006a3a <HAL_SPI_Receive+0x228>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800687e:	f7fe f9e5 	bl	8004c4c <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_SPI_Receive+0x7e>
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006894:	e0cc      	b.n	8006a30 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2204      	movs	r2, #4
 800689a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	88fa      	ldrh	r2, [r7, #6]
 80068ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068dc:	d10f      	bne.n	80068fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	d007      	beq.n	800691c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d16a      	bne.n	80069fa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006924:	e032      	b.n	800698c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d115      	bne.n	8006960 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f103 020c 	add.w	r2, r3, #12
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800695e:	e015      	b.n	800698c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006960:	f7fe f974 	bl	8004c4c <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d803      	bhi.n	8006978 <HAL_SPI_Receive+0x166>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d102      	bne.n	800697e <HAL_SPI_Receive+0x16c>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800698a:	e051      	b.n	8006a30 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1c7      	bne.n	8006926 <HAL_SPI_Receive+0x114>
 8006996:	e035      	b.n	8006a04 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d113      	bne.n	80069ce <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	b292      	uxth	r2, r2
 80069b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	1c9a      	adds	r2, r3, #2
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069cc:	e015      	b.n	80069fa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ce:	f7fe f93d 	bl	8004c4c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d803      	bhi.n	80069e6 <HAL_SPI_Receive+0x1d4>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d102      	bne.n	80069ec <HAL_SPI_Receive+0x1da>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80069f8:	e01a      	b.n	8006a30 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1c9      	bne.n	8006998 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fa53 	bl	8006eb4 <SPI_EndRxTransaction>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
 8006a26:	e003      	b.n	8006a30 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b08c      	sub	sp, #48	; 0x30
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
 8006a4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a50:	2301      	movs	r3, #1
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x26>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e198      	b.n	8006d9a <HAL_SPI_TransmitReceive+0x358>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a70:	f7fe f8ec 	bl	8004c4c <HAL_GetTick>
 8006a74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a86:	887b      	ldrh	r3, [r7, #2]
 8006a88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d00f      	beq.n	8006ab2 <HAL_SPI_TransmitReceive+0x70>
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a98:	d107      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x68>
 8006aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d003      	beq.n	8006ab2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ab0:	e16d      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <HAL_SPI_TransmitReceive+0x82>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <HAL_SPI_TransmitReceive+0x82>
 8006abe:	887b      	ldrh	r3, [r7, #2]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006aca:	e160      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d003      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2205      	movs	r2, #5
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	887a      	ldrh	r2, [r7, #2]
 8006b02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	887a      	ldrh	r2, [r7, #2]
 8006b08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d007      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b3c:	d17c      	bne.n	8006c38 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x10a>
 8006b46:	8b7b      	ldrh	r3, [r7, #26]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d16a      	bne.n	8006c22 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	881a      	ldrh	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	1c9a      	adds	r2, r3, #2
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b70:	e057      	b.n	8006c22 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d11b      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x176>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d016      	beq.n	8006bb8 <HAL_SPI_TransmitReceive+0x176>
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d113      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	881a      	ldrh	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	1c9a      	adds	r2, r3, #2
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d119      	bne.n	8006bfa <HAL_SPI_TransmitReceive+0x1b8>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d014      	beq.n	8006bfa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	1c9a      	adds	r2, r3, #2
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bfa:	f7fe f827 	bl	8004c4c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d80b      	bhi.n	8006c22 <HAL_SPI_TransmitReceive+0x1e0>
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d007      	beq.n	8006c22 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006c20:	e0b5      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1a2      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x130>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d19d      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x130>
 8006c36:	e080      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_SPI_TransmitReceive+0x204>
 8006c40:	8b7b      	ldrh	r3, [r7, #26]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d16f      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	330c      	adds	r3, #12
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c6c:	e05b      	b.n	8006d26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d11c      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x274>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d017      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x274>
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d114      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d119      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x2b6>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d014      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cf8:	f7fd ffa8 	bl	8004c4c <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d803      	bhi.n	8006d10 <HAL_SPI_TransmitReceive+0x2ce>
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d102      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x2d4>
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d107      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006d24:	e033      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d19e      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x22c>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d199      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f90a 	bl	8006f58 <SPI_EndRxTxTransaction>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d56:	e01a      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d84:	e003      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3730      	adds	r7, #48	; 0x30
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006db4:	f7fd ff4a 	bl	8004c4c <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dc4:	f7fd ff42 	bl	8004c4c <HAL_GetTick>
 8006dc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dca:	4b39      	ldr	r3, [pc, #228]	; (8006eb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	015b      	lsls	r3, r3, #5
 8006dd0:	0d1b      	lsrs	r3, r3, #20
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	fb02 f303 	mul.w	r3, r2, r3
 8006dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dda:	e054      	b.n	8006e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d050      	beq.n	8006e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006de4:	f7fd ff32 	bl	8004c4c <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d902      	bls.n	8006dfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d13d      	bne.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e12:	d111      	bne.n	8006e38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e1c:	d004      	beq.n	8006e28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e26:	d107      	bne.n	8006e38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e40:	d10f      	bne.n	8006e62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e017      	b.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	bf0c      	ite	eq
 8006e96:	2301      	moveq	r3, #1
 8006e98:	2300      	movne	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d19b      	bne.n	8006ddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	2000001c 	.word	0x2000001c

08006eb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec8:	d111      	bne.n	8006eee <SPI_EndRxTransaction+0x3a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ed2:	d004      	beq.n	8006ede <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006edc:	d107      	bne.n	8006eee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ef6:	d117      	bne.n	8006f28 <SPI_EndRxTransaction+0x74>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f00:	d112      	bne.n	8006f28 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff ff49 	bl	8006da4 <SPI_WaitFlagStateUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01a      	beq.n	8006f4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1c:	f043 0220 	orr.w	r2, r3, #32
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e013      	b.n	8006f50 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff ff36 	bl	8006da4 <SPI_WaitFlagStateUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f42:	f043 0220 	orr.w	r2, r3, #32
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e000      	b.n	8006f50 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff ff18 	bl	8006da4 <SPI_WaitFlagStateUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e000      	b.n	8006f8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e041      	b.n	800702a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fd faf0 	bl	80045a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f000 fc7a 	bl	80078cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b01      	cmp	r3, #1
 8007046:	d001      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e03f      	b.n	80070cc <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1b      	ldr	r2, [pc, #108]	; (80070d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <HAL_TIM_Base_Start_IT+0x62>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d00e      	beq.n	8007096 <HAL_TIM_Base_Start_IT+0x62>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a17      	ldr	r2, [pc, #92]	; (80070dc <HAL_TIM_Base_Start_IT+0xa8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d009      	beq.n	8007096 <HAL_TIM_Base_Start_IT+0x62>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <HAL_TIM_Base_Start_IT+0xac>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_TIM_Base_Start_IT+0x62>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a14      	ldr	r2, [pc, #80]	; (80070e4 <HAL_TIM_Base_Start_IT+0xb0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d111      	bne.n	80070ba <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d010      	beq.n	80070ca <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	e007      	b.n	80070ca <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40000400 	.word	0x40000400
 80070e0:	40000800 	.word	0x40000800
 80070e4:	40014000 	.word	0x40014000

080070e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e041      	b.n	800717e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f839 	bl	8007186 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f000 fbd0 	bl	80078cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr

08007198 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_IC_Start_IT+0x1e>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	e013      	b.n	80071de <HAL_TIM_IC_Start_IT+0x46>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d104      	bne.n	80071c6 <HAL_TIM_IC_Start_IT+0x2e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	e00b      	b.n	80071de <HAL_TIM_IC_Start_IT+0x46>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d104      	bne.n	80071d6 <HAL_TIM_IC_Start_IT+0x3e>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	e003      	b.n	80071de <HAL_TIM_IC_Start_IT+0x46>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <HAL_TIM_IC_Start_IT+0x58>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	e013      	b.n	8007218 <HAL_TIM_IC_Start_IT+0x80>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d104      	bne.n	8007200 <HAL_TIM_IC_Start_IT+0x68>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	e00b      	b.n	8007218 <HAL_TIM_IC_Start_IT+0x80>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b08      	cmp	r3, #8
 8007204:	d104      	bne.n	8007210 <HAL_TIM_IC_Start_IT+0x78>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e003      	b.n	8007218 <HAL_TIM_IC_Start_IT+0x80>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007216:	b2db      	uxtb	r3, r3
 8007218:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007220:	7b7b      	ldrb	r3, [r7, #13]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d001      	beq.n	800722a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e0bd      	b.n	80073a6 <HAL_TIM_IC_Start_IT+0x20e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <HAL_TIM_IC_Start_IT+0xa2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007238:	e013      	b.n	8007262 <HAL_TIM_IC_Start_IT+0xca>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b04      	cmp	r3, #4
 800723e:	d104      	bne.n	800724a <HAL_TIM_IC_Start_IT+0xb2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007248:	e00b      	b.n	8007262 <HAL_TIM_IC_Start_IT+0xca>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d104      	bne.n	800725a <HAL_TIM_IC_Start_IT+0xc2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007258:	e003      	b.n	8007262 <HAL_TIM_IC_Start_IT+0xca>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <HAL_TIM_IC_Start_IT+0xda>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007270:	e013      	b.n	800729a <HAL_TIM_IC_Start_IT+0x102>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d104      	bne.n	8007282 <HAL_TIM_IC_Start_IT+0xea>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007280:	e00b      	b.n	800729a <HAL_TIM_IC_Start_IT+0x102>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d104      	bne.n	8007292 <HAL_TIM_IC_Start_IT+0xfa>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007290:	e003      	b.n	800729a <HAL_TIM_IC_Start_IT+0x102>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b0c      	cmp	r3, #12
 800729e:	d841      	bhi.n	8007324 <HAL_TIM_IC_Start_IT+0x18c>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <HAL_TIM_IC_Start_IT+0x110>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	080072dd 	.word	0x080072dd
 80072ac:	08007325 	.word	0x08007325
 80072b0:	08007325 	.word	0x08007325
 80072b4:	08007325 	.word	0x08007325
 80072b8:	080072ef 	.word	0x080072ef
 80072bc:	08007325 	.word	0x08007325
 80072c0:	08007325 	.word	0x08007325
 80072c4:	08007325 	.word	0x08007325
 80072c8:	08007301 	.word	0x08007301
 80072cc:	08007325 	.word	0x08007325
 80072d0:	08007325 	.word	0x08007325
 80072d4:	08007325 	.word	0x08007325
 80072d8:	08007313 	.word	0x08007313
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0202 	orr.w	r2, r2, #2
 80072ea:	60da      	str	r2, [r3, #12]
      break;
 80072ec:	e01d      	b.n	800732a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0204 	orr.w	r2, r2, #4
 80072fc:	60da      	str	r2, [r3, #12]
      break;
 80072fe:	e014      	b.n	800732a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0208 	orr.w	r2, r2, #8
 800730e:	60da      	str	r2, [r3, #12]
      break;
 8007310:	e00b      	b.n	800732a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0210 	orr.w	r2, r2, #16
 8007320:	60da      	str	r2, [r3, #12]
      break;
 8007322:	e002      	b.n	800732a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	bf00      	nop
  }

  if (status == HAL_OK)
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d139      	bne.n	80073a4 <HAL_TIM_IC_Start_IT+0x20c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2201      	movs	r2, #1
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fcf0 	bl	8007d1e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1b      	ldr	r2, [pc, #108]	; (80073b0 <HAL_TIM_IC_Start_IT+0x218>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <HAL_TIM_IC_Start_IT+0x1d8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007350:	d00e      	beq.n	8007370 <HAL_TIM_IC_Start_IT+0x1d8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a17      	ldr	r2, [pc, #92]	; (80073b4 <HAL_TIM_IC_Start_IT+0x21c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d009      	beq.n	8007370 <HAL_TIM_IC_Start_IT+0x1d8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <HAL_TIM_IC_Start_IT+0x220>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_TIM_IC_Start_IT+0x1d8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a14      	ldr	r2, [pc, #80]	; (80073bc <HAL_TIM_IC_Start_IT+0x224>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d111      	bne.n	8007394 <HAL_TIM_IC_Start_IT+0x1fc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b06      	cmp	r3, #6
 8007380:	d010      	beq.n	80073a4 <HAL_TIM_IC_Start_IT+0x20c>
      {
        __HAL_TIM_ENABLE(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0201 	orr.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007392:	e007      	b.n	80073a4 <HAL_TIM_IC_Start_IT+0x20c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40012c00 	.word	0x40012c00
 80073b4:	40000400 	.word	0x40000400
 80073b8:	40000800 	.word	0x40000800
 80073bc:	40014000 	.word	0x40014000

080073c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d122      	bne.n	800741c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d11b      	bne.n	800741c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0202 	mvn.w	r2, #2
 80073ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fb fdf0 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa43 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fa49 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d122      	bne.n	8007470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b04      	cmp	r3, #4
 8007436:	d11b      	bne.n	8007470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0204 	mvn.w	r2, #4
 8007440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fb fdc6 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 800745c:	e005      	b.n	800746a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa19 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa1f 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b08      	cmp	r3, #8
 800747c:	d122      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b08      	cmp	r3, #8
 800748a:	d11b      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0208 	mvn.w	r2, #8
 8007494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fb fd9c 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f9ef 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9f5 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d122      	bne.n	8007518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d11b      	bne.n	8007518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0210 	mvn.w	r2, #16
 80074e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2208      	movs	r2, #8
 80074ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fb fd72 	bl	8002fe8 <HAL_TIM_IC_CaptureCallback>
 8007504:	e005      	b.n	8007512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f9c5 	bl	8007896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f9cb 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10e      	bne.n	8007544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d107      	bne.n	8007544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0201 	mvn.w	r2, #1
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fc f9fe 	bl	8003940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754e:	2b80      	cmp	r3, #128	; 0x80
 8007550:	d10e      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b80      	cmp	r3, #128	; 0x80
 800755e:	d107      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fc6b 	bl	8007e46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d10e      	bne.n	800759c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d107      	bne.n	800759c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f98f 	bl	80078ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d10e      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d107      	bne.n	80075c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f06f 0220 	mvn.w	r2, #32
 80075c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fc36 	bl	8007e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e088      	b.n	8007700 <HAL_TIM_IC_ConfigChannel+0x130>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d11b      	bne.n	8007634 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f000 f9de 	bl	80079cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 020c 	bic.w	r2, r2, #12
 800761e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6999      	ldr	r1, [r3, #24]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	619a      	str	r2, [r3, #24]
 8007632:	e060      	b.n	80076f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b04      	cmp	r3, #4
 8007638:	d11c      	bne.n	8007674 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	6819      	ldr	r1, [r3, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	f000 fa4d 	bl	8007ae8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800765c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6999      	ldr	r1, [r3, #24]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	021a      	lsls	r2, r3, #8
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	619a      	str	r2, [r3, #24]
 8007672:	e040      	b.n	80076f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b08      	cmp	r3, #8
 8007678:	d11b      	bne.n	80076b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6819      	ldr	r1, [r3, #0]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f000 fa98 	bl	8007bbe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 020c 	bic.w	r2, r2, #12
 800769c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69d9      	ldr	r1, [r3, #28]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	61da      	str	r2, [r3, #28]
 80076b0:	e021      	b.n	80076f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b0c      	cmp	r3, #12
 80076b6:	d11c      	bne.n	80076f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f000 fab4 	bl	8007c34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69da      	ldr	r2, [r3, #28]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69d9      	ldr	r1, [r3, #28]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	021a      	lsls	r2, r3, #8
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	61da      	str	r2, [r3, #28]
 80076f0:	e001      	b.n	80076f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_TIM_ConfigClockSource+0x1c>
 8007720:	2302      	movs	r3, #2
 8007722:	e0b4      	b.n	800788e <HAL_TIM_ConfigClockSource+0x186>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800774a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800775c:	d03e      	beq.n	80077dc <HAL_TIM_ConfigClockSource+0xd4>
 800775e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007762:	f200 8087 	bhi.w	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	f000 8086 	beq.w	800787a <HAL_TIM_ConfigClockSource+0x172>
 800776e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007772:	d87f      	bhi.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 8007774:	2b70      	cmp	r3, #112	; 0x70
 8007776:	d01a      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0xa6>
 8007778:	2b70      	cmp	r3, #112	; 0x70
 800777a:	d87b      	bhi.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 800777c:	2b60      	cmp	r3, #96	; 0x60
 800777e:	d050      	beq.n	8007822 <HAL_TIM_ConfigClockSource+0x11a>
 8007780:	2b60      	cmp	r3, #96	; 0x60
 8007782:	d877      	bhi.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 8007784:	2b50      	cmp	r3, #80	; 0x50
 8007786:	d03c      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0xfa>
 8007788:	2b50      	cmp	r3, #80	; 0x50
 800778a:	d873      	bhi.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 800778c:	2b40      	cmp	r3, #64	; 0x40
 800778e:	d058      	beq.n	8007842 <HAL_TIM_ConfigClockSource+0x13a>
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d86f      	bhi.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 8007794:	2b30      	cmp	r3, #48	; 0x30
 8007796:	d064      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x15a>
 8007798:	2b30      	cmp	r3, #48	; 0x30
 800779a:	d86b      	bhi.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 800779c:	2b20      	cmp	r3, #32
 800779e:	d060      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x15a>
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d867      	bhi.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d05c      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x15a>
 80077a8:	2b10      	cmp	r3, #16
 80077aa:	d05a      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x15a>
 80077ac:	e062      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6899      	ldr	r1, [r3, #8]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f000 fa8f 	bl	8007ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	609a      	str	r2, [r3, #8]
      break;
 80077da:	e04f      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	6899      	ldr	r1, [r3, #8]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f000 fa78 	bl	8007ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077fe:	609a      	str	r2, [r3, #8]
      break;
 8007800:	e03c      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6859      	ldr	r1, [r3, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	461a      	mov	r2, r3
 8007810:	f000 f93c 	bl	8007a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2150      	movs	r1, #80	; 0x50
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fa46 	bl	8007cac <TIM_ITRx_SetConfig>
      break;
 8007820:	e02c      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6859      	ldr	r1, [r3, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	461a      	mov	r2, r3
 8007830:	f000 f996 	bl	8007b60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2160      	movs	r1, #96	; 0x60
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fa36 	bl	8007cac <TIM_ITRx_SetConfig>
      break;
 8007840:	e01c      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6859      	ldr	r1, [r3, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	461a      	mov	r2, r3
 8007850:	f000 f91c 	bl	8007a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2140      	movs	r1, #64	; 0x40
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fa26 	bl	8007cac <TIM_ITRx_SetConfig>
      break;
 8007860:	e00c      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4619      	mov	r1, r3
 800786c:	4610      	mov	r0, r2
 800786e:	f000 fa1d 	bl	8007cac <TIM_ITRx_SetConfig>
      break;
 8007872:	e003      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	73fb      	strb	r3, [r7, #15]
      break;
 8007878:	e000      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800787a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <TIM_Base_SetConfig+0xe8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00b      	beq.n	80078fc <TIM_Base_SetConfig+0x30>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d007      	beq.n	80078fc <TIM_Base_SetConfig+0x30>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a32      	ldr	r2, [pc, #200]	; (80079b8 <TIM_Base_SetConfig+0xec>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_Base_SetConfig+0x30>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a31      	ldr	r2, [pc, #196]	; (80079bc <TIM_Base_SetConfig+0xf0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d108      	bne.n	800790e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a28      	ldr	r2, [pc, #160]	; (80079b4 <TIM_Base_SetConfig+0xe8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d017      	beq.n	8007946 <TIM_Base_SetConfig+0x7a>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d013      	beq.n	8007946 <TIM_Base_SetConfig+0x7a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a25      	ldr	r2, [pc, #148]	; (80079b8 <TIM_Base_SetConfig+0xec>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00f      	beq.n	8007946 <TIM_Base_SetConfig+0x7a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a24      	ldr	r2, [pc, #144]	; (80079bc <TIM_Base_SetConfig+0xf0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00b      	beq.n	8007946 <TIM_Base_SetConfig+0x7a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a23      	ldr	r2, [pc, #140]	; (80079c0 <TIM_Base_SetConfig+0xf4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d007      	beq.n	8007946 <TIM_Base_SetConfig+0x7a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a22      	ldr	r2, [pc, #136]	; (80079c4 <TIM_Base_SetConfig+0xf8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d003      	beq.n	8007946 <TIM_Base_SetConfig+0x7a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a21      	ldr	r2, [pc, #132]	; (80079c8 <TIM_Base_SetConfig+0xfc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d108      	bne.n	8007958 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a0d      	ldr	r2, [pc, #52]	; (80079b4 <TIM_Base_SetConfig+0xe8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00b      	beq.n	800799c <TIM_Base_SetConfig+0xd0>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a0e      	ldr	r2, [pc, #56]	; (80079c0 <TIM_Base_SetConfig+0xf4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d007      	beq.n	800799c <TIM_Base_SetConfig+0xd0>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a0d      	ldr	r2, [pc, #52]	; (80079c4 <TIM_Base_SetConfig+0xf8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_Base_SetConfig+0xd0>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a0c      	ldr	r2, [pc, #48]	; (80079c8 <TIM_Base_SetConfig+0xfc>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d103      	bne.n	80079a4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	615a      	str	r2, [r3, #20]
}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr
 80079b4:	40012c00 	.word	0x40012c00
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800

080079cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f023 0201 	bic.w	r2, r3, #1
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a21      	ldr	r2, [pc, #132]	; (8007a7c <TIM_TI1_SetConfig+0xb0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d00f      	beq.n	8007a1a <TIM_TI1_SetConfig+0x4e>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a00:	d00b      	beq.n	8007a1a <TIM_TI1_SetConfig+0x4e>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4a1e      	ldr	r2, [pc, #120]	; (8007a80 <TIM_TI1_SetConfig+0xb4>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d007      	beq.n	8007a1a <TIM_TI1_SetConfig+0x4e>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4a1d      	ldr	r2, [pc, #116]	; (8007a84 <TIM_TI1_SetConfig+0xb8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d003      	beq.n	8007a1a <TIM_TI1_SetConfig+0x4e>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4a1c      	ldr	r2, [pc, #112]	; (8007a88 <TIM_TI1_SetConfig+0xbc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <TIM_TI1_SetConfig+0x52>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <TIM_TI1_SetConfig+0x54>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e003      	b.n	8007a3e <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f023 030a 	bic.w	r3, r3, #10
 8007a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f003 030a 	and.w	r3, r3, #10
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bc80      	pop	{r7}
 8007a7a:	4770      	bx	lr
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40000800 	.word	0x40000800
 8007a88:	40014000 	.word	0x40014000

08007a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f023 0201 	bic.w	r2, r3, #1
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f023 030a 	bic.w	r3, r3, #10
 8007ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f023 0210 	bic.w	r2, r3, #16
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	031b      	lsls	r3, r3, #12
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr

08007b60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	f023 0210 	bic.w	r2, r3, #16
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	031b      	lsls	r3, r3, #12
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	621a      	str	r2, [r3, #32]
}
 8007bb4:	bf00      	nop
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr

08007bbe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b087      	sub	sp, #28
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bfa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	031b      	lsls	r3, r3, #12
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	031b      	lsls	r3, r3, #12
 8007c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	621a      	str	r2, [r3, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f043 0307 	orr.w	r3, r3, #7
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	609a      	str	r2, [r3, #8]
}
 8007cd6:	bf00      	nop
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	021a      	lsls	r2, r3, #8
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b087      	sub	sp, #28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f003 031f 	and.w	r3, r3, #31
 8007d30:	2201      	movs	r2, #1
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a1a      	ldr	r2, [r3, #32]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	401a      	ands	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1a      	ldr	r2, [r3, #32]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	fa01 f303 	lsl.w	r3, r1, r3
 8007d56:	431a      	orrs	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	621a      	str	r2, [r3, #32]
}
 8007d5c:	bf00      	nop
 8007d5e:	371c      	adds	r7, #28
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr
	...

08007d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e04b      	b.n	8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dcc:	d00e      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d009      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a12      	ldr	r2, [pc, #72]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d10c      	bne.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40014000 	.word	0x40014000

08007e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr

08007e46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e042      	b.n	8007ef0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fc fbee 	bl	8004660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2224      	movs	r2, #36	; 0x24
 8007e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68da      	ldr	r2, [r3, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f9f1 	bl	8008284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695a      	ldr	r2, [r3, #20]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d16d      	bne.n	8007ff4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <HAL_UART_Transmit+0x2c>
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e066      	b.n	8007ff6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2221      	movs	r2, #33	; 0x21
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f36:	f7fc fe89 	bl	8004c4c <HAL_GetTick>
 8007f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	88fa      	ldrh	r2, [r7, #6]
 8007f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f50:	d108      	bne.n	8007f64 <HAL_UART_Transmit+0x6c>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d104      	bne.n	8007f64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	e003      	b.n	8007f6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f6c:	e02a      	b.n	8007fc4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	2180      	movs	r1, #128	; 0x80
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f914 	bl	80081a6 <UART_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e036      	b.n	8007ff6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e007      	b.n	8007fb6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1cf      	bne.n	8007f6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2140      	movs	r1, #64	; 0x40
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f8e4 	bl	80081a6 <UART_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e006      	b.n	8007ff6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e000      	b.n	8007ff6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3720      	adds	r7, #32
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b088      	sub	sp, #32
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	603b      	str	r3, [r7, #0]
 800800a:	4613      	mov	r3, r2
 800800c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b20      	cmp	r3, #32
 8008018:	f040 80c0 	bne.w	800819c <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0b8      	b.n	800819e <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2222      	movs	r2, #34	; 0x22
 8008036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008046:	f7fc fe01 	bl	8004c4c <HAL_GetTick>
 800804a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	88fa      	ldrh	r2, [r7, #6]
 8008056:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008060:	d108      	bne.n	8008074 <HAL_UARTEx_ReceiveToIdle+0x76>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	e003      	b.n	800807c <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008078:	2300      	movs	r3, #0
 800807a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2200      	movs	r2, #0
 8008080:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008082:	e077      	b.n	8008174 <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b10      	cmp	r3, #16
 8008090:	d117      	bne.n	80080c2 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008092:	2300      	movs	r3, #0
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	613b      	str	r3, [r7, #16]
 80080a6:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2202      	movs	r2, #2
 80080b4:	635a      	str	r2, [r3, #52]	; 0x34
          huart->RxState = HAL_UART_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e06d      	b.n	800819e <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d13c      	bne.n	800814a <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10c      	bne.n	80080f0 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	3302      	adds	r3, #2
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	e01f      	b.n	8008130 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f8:	d007      	beq.n	800810a <HAL_UARTEx_ReceiveToIdle+0x10c>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <HAL_UARTEx_ReceiveToIdle+0x11a>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	e008      	b.n	800812a <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008124:	b2da      	uxtb	r2, r3
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3301      	adds	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008150:	d010      	beq.n	8008174 <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008152:	f7fc fd7b 	bl	8004c4c <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800815e:	429a      	cmp	r2, r3
 8008160:	d302      	bcc.n	8008168 <HAL_UARTEx_ReceiveToIdle+0x16a>
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	2b00      	cmp	r3, #0
 8008166:	d105      	bne.n	8008174 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e014      	b.n	800819e <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d182      	bne.n	8008084 <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008186:	b29b      	uxth	r3, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	b29a      	uxth	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	e000      	b.n	800819e <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800819c:	2302      	movs	r3, #2
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b090      	sub	sp, #64	; 0x40
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	603b      	str	r3, [r7, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b6:	e050      	b.n	800825a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d04c      	beq.n	800825a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80081c6:	f7fc fd41 	bl	8004c4c <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d241      	bcs.n	800825a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	330c      	adds	r3, #12
 80081dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	330c      	adds	r3, #12
 80081f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081f6:	637a      	str	r2, [r7, #52]	; 0x34
 80081f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3314      	adds	r3, #20
 8008210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	613b      	str	r3, [r7, #16]
   return(result);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	63bb      	str	r3, [r7, #56]	; 0x38
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3314      	adds	r3, #20
 8008228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800822a:	623a      	str	r2, [r7, #32]
 800822c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	69f9      	ldr	r1, [r7, #28]
 8008230:	6a3a      	ldr	r2, [r7, #32]
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	61bb      	str	r3, [r7, #24]
   return(result);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e5      	bne.n	800820a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2220      	movs	r2, #32
 8008242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e00f      	b.n	800827a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4013      	ands	r3, r2
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	bf0c      	ite	eq
 800826a:	2301      	moveq	r3, #1
 800826c:	2300      	movne	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	429a      	cmp	r2, r3
 8008276:	d09f      	beq.n	80081b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3740      	adds	r7, #64	; 0x40
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80082c4:	f023 030c 	bic.w	r3, r3, #12
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	430b      	orrs	r3, r1
 80082d0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699a      	ldr	r2, [r3, #24]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a55      	ldr	r2, [pc, #340]	; (8008444 <UART_SetConfig+0x1c0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d103      	bne.n	80082fa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082f2:	f7fd ff71 	bl	80061d8 <HAL_RCC_GetPCLK2Freq>
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	e002      	b.n	8008300 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80082fa:	f7fd ff59 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 80082fe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008308:	d14c      	bne.n	80083a4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009a      	lsls	r2, r3, #2
 8008314:	441a      	add	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008320:	4a49      	ldr	r2, [pc, #292]	; (8008448 <UART_SetConfig+0x1c4>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	0119      	lsls	r1, r3, #4
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009a      	lsls	r2, r3, #2
 8008334:	441a      	add	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008340:	4b41      	ldr	r3, [pc, #260]	; (8008448 <UART_SetConfig+0x1c4>)
 8008342:	fba3 0302 	umull	r0, r3, r3, r2
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	2064      	movs	r0, #100	; 0x64
 800834a:	fb00 f303 	mul.w	r3, r0, r3
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	3332      	adds	r3, #50	; 0x32
 8008354:	4a3c      	ldr	r2, [pc, #240]	; (8008448 <UART_SetConfig+0x1c4>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008362:	4419      	add	r1, r3
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009a      	lsls	r2, r3, #2
 800836e:	441a      	add	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	fbb2 f2f3 	udiv	r2, r2, r3
 800837a:	4b33      	ldr	r3, [pc, #204]	; (8008448 <UART_SetConfig+0x1c4>)
 800837c:	fba3 0302 	umull	r0, r3, r3, r2
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	2064      	movs	r0, #100	; 0x64
 8008384:	fb00 f303 	mul.w	r3, r0, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	3332      	adds	r3, #50	; 0x32
 800838e:	4a2e      	ldr	r2, [pc, #184]	; (8008448 <UART_SetConfig+0x1c4>)
 8008390:	fba2 2303 	umull	r2, r3, r2, r3
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f003 0207 	and.w	r2, r3, #7
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	440a      	add	r2, r1
 80083a0:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 80083a2:	e04a      	b.n	800843a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009a      	lsls	r2, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ba:	4a23      	ldr	r2, [pc, #140]	; (8008448 <UART_SetConfig+0x1c4>)
 80083bc:	fba2 2303 	umull	r2, r3, r2, r3
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	0119      	lsls	r1, r3, #4
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009a      	lsls	r2, r3, #2
 80083ce:	441a      	add	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80083da:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <UART_SetConfig+0x1c4>)
 80083dc:	fba3 0302 	umull	r0, r3, r3, r2
 80083e0:	095b      	lsrs	r3, r3, #5
 80083e2:	2064      	movs	r0, #100	; 0x64
 80083e4:	fb00 f303 	mul.w	r3, r0, r3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	3332      	adds	r3, #50	; 0x32
 80083ee:	4a16      	ldr	r2, [pc, #88]	; (8008448 <UART_SetConfig+0x1c4>)
 80083f0:	fba2 2303 	umull	r2, r3, r2, r3
 80083f4:	095b      	lsrs	r3, r3, #5
 80083f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083fa:	4419      	add	r1, r3
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009a      	lsls	r2, r3, #2
 8008406:	441a      	add	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008412:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <UART_SetConfig+0x1c4>)
 8008414:	fba3 0302 	umull	r0, r3, r3, r2
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	2064      	movs	r0, #100	; 0x64
 800841c:	fb00 f303 	mul.w	r3, r0, r3
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	3332      	adds	r3, #50	; 0x32
 8008426:	4a08      	ldr	r2, [pc, #32]	; (8008448 <UART_SetConfig+0x1c4>)
 8008428:	fba2 2303 	umull	r2, r3, r2, r3
 800842c:	095b      	lsrs	r3, r3, #5
 800842e:	f003 020f 	and.w	r2, r3, #15
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	440a      	add	r2, r1
 8008438:	609a      	str	r2, [r3, #8]
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	40013800 	.word	0x40013800
 8008448:	51eb851f 	.word	0x51eb851f

0800844c <__libc_init_array>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	2600      	movs	r6, #0
 8008450:	4d0c      	ldr	r5, [pc, #48]	; (8008484 <__libc_init_array+0x38>)
 8008452:	4c0d      	ldr	r4, [pc, #52]	; (8008488 <__libc_init_array+0x3c>)
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	42a6      	cmp	r6, r4
 800845a:	d109      	bne.n	8008470 <__libc_init_array+0x24>
 800845c:	f000 f88c 	bl	8008578 <_init>
 8008460:	2600      	movs	r6, #0
 8008462:	4d0a      	ldr	r5, [pc, #40]	; (800848c <__libc_init_array+0x40>)
 8008464:	4c0a      	ldr	r4, [pc, #40]	; (8008490 <__libc_init_array+0x44>)
 8008466:	1b64      	subs	r4, r4, r5
 8008468:	10a4      	asrs	r4, r4, #2
 800846a:	42a6      	cmp	r6, r4
 800846c:	d105      	bne.n	800847a <__libc_init_array+0x2e>
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	f855 3b04 	ldr.w	r3, [r5], #4
 8008474:	4798      	blx	r3
 8008476:	3601      	adds	r6, #1
 8008478:	e7ee      	b.n	8008458 <__libc_init_array+0xc>
 800847a:	f855 3b04 	ldr.w	r3, [r5], #4
 800847e:	4798      	blx	r3
 8008480:	3601      	adds	r6, #1
 8008482:	e7f2      	b.n	800846a <__libc_init_array+0x1e>
 8008484:	080088a0 	.word	0x080088a0
 8008488:	080088a0 	.word	0x080088a0
 800848c:	080088a0 	.word	0x080088a0
 8008490:	080088a4 	.word	0x080088a4

08008494 <memcpy>:
 8008494:	440a      	add	r2, r1
 8008496:	4291      	cmp	r1, r2
 8008498:	f100 33ff 	add.w	r3, r0, #4294967295
 800849c:	d100      	bne.n	80084a0 <memcpy+0xc>
 800849e:	4770      	bx	lr
 80084a0:	b510      	push	{r4, lr}
 80084a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a6:	4291      	cmp	r1, r2
 80084a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ac:	d1f9      	bne.n	80084a2 <memcpy+0xe>
 80084ae:	bd10      	pop	{r4, pc}

080084b0 <memset>:
 80084b0:	4603      	mov	r3, r0
 80084b2:	4402      	add	r2, r0
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d100      	bne.n	80084ba <memset+0xa>
 80084b8:	4770      	bx	lr
 80084ba:	f803 1b01 	strb.w	r1, [r3], #1
 80084be:	e7f9      	b.n	80084b4 <memset+0x4>

080084c0 <strncmp>:
 80084c0:	4603      	mov	r3, r0
 80084c2:	b510      	push	{r4, lr}
 80084c4:	b172      	cbz	r2, 80084e4 <strncmp+0x24>
 80084c6:	3901      	subs	r1, #1
 80084c8:	1884      	adds	r4, r0, r2
 80084ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80084ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084d2:	4290      	cmp	r0, r2
 80084d4:	d101      	bne.n	80084da <strncmp+0x1a>
 80084d6:	42a3      	cmp	r3, r4
 80084d8:	d101      	bne.n	80084de <strncmp+0x1e>
 80084da:	1a80      	subs	r0, r0, r2
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	2800      	cmp	r0, #0
 80084e0:	d1f3      	bne.n	80084ca <strncmp+0xa>
 80084e2:	e7fa      	b.n	80084da <strncmp+0x1a>
 80084e4:	4610      	mov	r0, r2
 80084e6:	e7f9      	b.n	80084dc <strncmp+0x1c>

080084e8 <round>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80084ee:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80084f2:	2c13      	cmp	r4, #19
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4606      	mov	r6, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	dc19      	bgt.n	8008532 <round+0x4a>
 80084fe:	2c00      	cmp	r4, #0
 8008500:	da09      	bge.n	8008516 <round+0x2e>
 8008502:	3401      	adds	r4, #1
 8008504:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008508:	d103      	bne.n	8008512 <round+0x2a>
 800850a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800850e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008512:	2200      	movs	r2, #0
 8008514:	e02a      	b.n	800856c <round+0x84>
 8008516:	4917      	ldr	r1, [pc, #92]	; (8008574 <round+0x8c>)
 8008518:	4121      	asrs	r1, r4
 800851a:	ea03 0001 	and.w	r0, r3, r1
 800851e:	4302      	orrs	r2, r0
 8008520:	d010      	beq.n	8008544 <round+0x5c>
 8008522:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008526:	fa42 f404 	asr.w	r4, r2, r4
 800852a:	4423      	add	r3, r4
 800852c:	ea23 0301 	bic.w	r3, r3, r1
 8008530:	e7ef      	b.n	8008512 <round+0x2a>
 8008532:	2c33      	cmp	r4, #51	; 0x33
 8008534:	dd09      	ble.n	800854a <round+0x62>
 8008536:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800853a:	d103      	bne.n	8008544 <round+0x5c>
 800853c:	f7f7 fe76 	bl	800022c <__adddf3>
 8008540:	4606      	mov	r6, r0
 8008542:	460d      	mov	r5, r1
 8008544:	4630      	mov	r0, r6
 8008546:	4629      	mov	r1, r5
 8008548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854a:	f04f 31ff 	mov.w	r1, #4294967295
 800854e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008552:	40f9      	lsrs	r1, r7
 8008554:	4208      	tst	r0, r1
 8008556:	d0f5      	beq.n	8008544 <round+0x5c>
 8008558:	2001      	movs	r0, #1
 800855a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800855e:	fa00 f404 	lsl.w	r4, r0, r4
 8008562:	1912      	adds	r2, r2, r4
 8008564:	bf28      	it	cs
 8008566:	181b      	addcs	r3, r3, r0
 8008568:	ea22 0201 	bic.w	r2, r2, r1
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	e7e6      	b.n	8008540 <round+0x58>
 8008572:	bf00      	nop
 8008574:	000fffff 	.word	0x000fffff

08008578 <_init>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	bf00      	nop
 800857c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857e:	bc08      	pop	{r3}
 8008580:	469e      	mov	lr, r3
 8008582:	4770      	bx	lr

08008584 <_fini>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr
